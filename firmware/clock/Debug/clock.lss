
clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009d74  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00009d74  00009d74  00011d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008d4  20000000  00009d7c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000003d4  200008d4  0000a650  000188d4  2**2
                  ALLOC
  4 .stack        00002000  20000ca8  0000aa24  000188d4  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000188d4  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000188fc  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003bce1  00000000  00000000  0001896d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007c05  00000000  00000000  0005464e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000124c4  00000000  00000000  0005c253  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c60  00000000  00000000  0006e717  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001200  00000000  00000000  0006f377  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00016b7c  00000000  00000000  00070577  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001e3f3  00000000  00000000  000870f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062da5  00000000  00000000  000a54e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000020bc  00000000  00000000  0010828c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002ca8 	.word	0x20002ca8
       4:	000028dd 	.word	0x000028dd
       8:	000028d9 	.word	0x000028d9
       c:	000028b1 	.word	0x000028b1
	...
      2c:	000028d9 	.word	0x000028d9
	...
      38:	000028d9 	.word	0x000028d9
      3c:	000028d9 	.word	0x000028d9
      40:	000028d9 	.word	0x000028d9
      44:	000028d9 	.word	0x000028d9
      48:	000028d9 	.word	0x000028d9
      4c:	00000b21 	.word	0x00000b21
      50:	000008ad 	.word	0x000008ad
      54:	000028d9 	.word	0x000028d9
      58:	000028d9 	.word	0x000028d9
      5c:	00000ec5 	.word	0x00000ec5
      60:	00000ed5 	.word	0x00000ed5
      64:	00000ee5 	.word	0x00000ee5
      68:	00000ef5 	.word	0x00000ef5
      6c:	00000f05 	.word	0x00000f05
      70:	00000f15 	.word	0x00000f15
      74:	00001e05 	.word	0x00001e05
      78:	00001df5 	.word	0x00001df5
      7c:	00001de5 	.word	0x00001de5
      80:	00001dd5 	.word	0x00001dd5
      84:	00001dc5 	.word	0x00001dc5
      88:	00001db5 	.word	0x00001db5
      8c:	00001da5 	.word	0x00001da5
      90:	00001d95 	.word	0x00001d95
      94:	000028d9 	.word	0x000028d9
      98:	000028d9 	.word	0x000028d9
      9c:	000028d9 	.word	0x000028d9
      a0:	000028d9 	.word	0x000028d9

000000a4 <deregister_tm_clones>:
      a4:	b508      	push	{r3, lr}
      a6:	4b06      	ldr	r3, [pc, #24]	; (c0 <deregister_tm_clones+0x1c>)
      a8:	4806      	ldr	r0, [pc, #24]	; (c4 <deregister_tm_clones+0x20>)
      aa:	3303      	adds	r3, #3
      ac:	1a19      	subs	r1, r3, r0
      ae:	2906      	cmp	r1, #6
      b0:	d800      	bhi.n	b4 <deregister_tm_clones+0x10>
      b2:	bd08      	pop	{r3, pc}
      b4:	4a04      	ldr	r2, [pc, #16]	; (c8 <deregister_tm_clones+0x24>)
      b6:	2a00      	cmp	r2, #0
      b8:	d0fb      	beq.n	b2 <deregister_tm_clones+0xe>
      ba:	4790      	blx	r2
      bc:	e7f9      	b.n	b2 <deregister_tm_clones+0xe>
      be:	46c0      	nop			; (mov r8, r8)
      c0:	00009d7c 	.word	0x00009d7c
      c4:	00009d7c 	.word	0x00009d7c
      c8:	00000000 	.word	0x00000000

000000cc <register_tm_clones>:
      cc:	b508      	push	{r3, lr}
      ce:	4807      	ldr	r0, [pc, #28]	; (ec <register_tm_clones+0x20>)
      d0:	4b07      	ldr	r3, [pc, #28]	; (f0 <register_tm_clones+0x24>)
      d2:	1a19      	subs	r1, r3, r0
      d4:	108b      	asrs	r3, r1, #2
      d6:	0fda      	lsrs	r2, r3, #31
      d8:	18d1      	adds	r1, r2, r3
      da:	1049      	asrs	r1, r1, #1
      dc:	d100      	bne.n	e0 <register_tm_clones+0x14>
      de:	bd08      	pop	{r3, pc}
      e0:	4b04      	ldr	r3, [pc, #16]	; (f4 <register_tm_clones+0x28>)
      e2:	2b00      	cmp	r3, #0
      e4:	d0fb      	beq.n	de <register_tm_clones+0x12>
      e6:	4798      	blx	r3
      e8:	e7f9      	b.n	de <register_tm_clones+0x12>
      ea:	46c0      	nop			; (mov r8, r8)
      ec:	00009d7c 	.word	0x00009d7c
      f0:	00009d7c 	.word	0x00009d7c
      f4:	00000000 	.word	0x00000000

000000f8 <__do_global_dtors_aux>:
      f8:	b510      	push	{r4, lr}
      fa:	4c07      	ldr	r4, [pc, #28]	; (118 <__do_global_dtors_aux+0x20>)
      fc:	7823      	ldrb	r3, [r4, #0]
      fe:	2b00      	cmp	r3, #0
     100:	d109      	bne.n	116 <__do_global_dtors_aux+0x1e>
     102:	f7ff ffcf 	bl	a4 <deregister_tm_clones>
     106:	4805      	ldr	r0, [pc, #20]	; (11c <__do_global_dtors_aux+0x24>)
     108:	2800      	cmp	r0, #0
     10a:	d002      	beq.n	112 <__do_global_dtors_aux+0x1a>
     10c:	4804      	ldr	r0, [pc, #16]	; (120 <__do_global_dtors_aux+0x28>)
     10e:	e000      	b.n	112 <__do_global_dtors_aux+0x1a>
     110:	bf00      	nop
     112:	2101      	movs	r1, #1
     114:	7021      	strb	r1, [r4, #0]
     116:	bd10      	pop	{r4, pc}
     118:	200008d4 	.word	0x200008d4
     11c:	00000000 	.word	0x00000000
     120:	00009d7c 	.word	0x00009d7c

00000124 <frame_dummy>:
     124:	b508      	push	{r3, lr}
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <frame_dummy+0x28>)
     128:	2b00      	cmp	r3, #0
     12a:	d003      	beq.n	134 <frame_dummy+0x10>
     12c:	4808      	ldr	r0, [pc, #32]	; (150 <frame_dummy+0x2c>)
     12e:	4909      	ldr	r1, [pc, #36]	; (154 <frame_dummy+0x30>)
     130:	e000      	b.n	134 <frame_dummy+0x10>
     132:	bf00      	nop
     134:	4808      	ldr	r0, [pc, #32]	; (158 <frame_dummy+0x34>)
     136:	6801      	ldr	r1, [r0, #0]
     138:	2900      	cmp	r1, #0
     13a:	d003      	beq.n	144 <frame_dummy+0x20>
     13c:	4a07      	ldr	r2, [pc, #28]	; (15c <frame_dummy+0x38>)
     13e:	2a00      	cmp	r2, #0
     140:	d000      	beq.n	144 <frame_dummy+0x20>
     142:	4790      	blx	r2
     144:	f7ff ffc2 	bl	cc <register_tm_clones>
     148:	bd08      	pop	{r3, pc}
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	00000000 	.word	0x00000000
     150:	00009d7c 	.word	0x00009d7c
     154:	200008d8 	.word	0x200008d8
     158:	00009d7c 	.word	0x00009d7c
     15c:	00000000 	.word	0x00000000

00000160 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
     160:	b5f0      	push	{r4, r5, r6, r7, lr}
     162:	b083      	sub	sp, #12
     164:	466f      	mov	r7, sp
     166:	71f8      	strb	r0, [r7, #7]
     168:	3707      	adds	r7, #7
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
     16a:	4c0b      	ldr	r4, [pc, #44]	; (198 <ssd1306_write_command+0x38>)
     16c:	4e0b      	ldr	r6, [pc, #44]	; (19c <ssd1306_write_command+0x3c>)
     16e:	1c20      	adds	r0, r4, #0
     170:	1c31      	adds	r1, r6, #0
     172:	2201      	movs	r2, #1
     174:	4d0a      	ldr	r5, [pc, #40]	; (1a0 <ssd1306_write_command+0x40>)
     176:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     178:	2280      	movs	r2, #128	; 0x80
     17a:	05d2      	lsls	r2, r2, #23
     17c:	4b09      	ldr	r3, [pc, #36]	; (1a4 <ssd1306_write_command+0x44>)
     17e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(SSD1306_DC_PIN, false);
	spi_write_buffer_wait(&ssd1306_master, &command, 1);
     180:	1c20      	adds	r0, r4, #0
     182:	1c39      	adds	r1, r7, #0
     184:	2201      	movs	r2, #1
     186:	4b08      	ldr	r3, [pc, #32]	; (1a8 <ssd1306_write_command+0x48>)
     188:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
     18a:	1c20      	adds	r0, r4, #0
     18c:	1c31      	adds	r1, r6, #0
     18e:	2200      	movs	r2, #0
     190:	47a8      	blx	r5
}
     192:	b003      	add	sp, #12
     194:	bdf0      	pop	{r4, r5, r6, r7, pc}
     196:	46c0      	nop			; (mov r8, r8)
     198:	20000b70 	.word	0x20000b70
     19c:	20000ba4 	.word	0x20000ba4
     1a0:	00001125 	.word	0x00001125
     1a4:	41004480 	.word	0x41004480
     1a8:	0000120d 	.word	0x0000120d

000001ac <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
     1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ae:	b08f      	sub	sp, #60	; 0x3c
	// Initialize delay routine
	delay_init();
     1b0:	4b60      	ldr	r3, [pc, #384]	; (334 <ssd1306_init+0x188>)
     1b2:	4798      	blx	r3
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
	uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
     1b4:	2000      	movs	r0, #0
     1b6:	4b60      	ldr	r3, [pc, #384]	; (338 <ssd1306_init+0x18c>)
     1b8:	4798      	blx	r3
     1ba:	4960      	ldr	r1, [pc, #384]	; (33c <ssd1306_init+0x190>)
     1bc:	4b60      	ldr	r3, [pc, #384]	; (340 <ssd1306_init+0x194>)
     1be:	4798      	blx	r3
     1c0:	0083      	lsls	r3, r0, #2
     1c2:	1818      	adds	r0, r3, r0
     1c4:	0040      	lsls	r0, r0, #1
     1c6:	2280      	movs	r2, #128	; 0x80
     1c8:	0512      	lsls	r2, r2, #20
     1ca:	4b5e      	ldr	r3, [pc, #376]	; (344 <ssd1306_init+0x198>)
     1cc:	615a      	str	r2, [r3, #20]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     1ce:	2800      	cmp	r0, #0
     1d0:	d100      	bne.n	1d4 <ssd1306_init+0x28>
     1d2:	e09b      	b.n	30c <ssd1306_init+0x160>
		SysTick->LOAD = n;
     1d4:	4b5c      	ldr	r3, [pc, #368]	; (348 <ssd1306_init+0x19c>)
     1d6:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
     1d8:	2200      	movs	r2, #0
     1da:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     1dc:	1c19      	adds	r1, r3, #0
     1de:	2280      	movs	r2, #128	; 0x80
     1e0:	0252      	lsls	r2, r2, #9
     1e2:	680b      	ldr	r3, [r1, #0]
     1e4:	4213      	tst	r3, r2
     1e6:	d0fc      	beq.n	1e2 <ssd1306_init+0x36>
     1e8:	e095      	b.n	316 <ssd1306_init+0x16a>
     1ea:	680b      	ldr	r3, [r1, #0]
     1ec:	4213      	tst	r3, r2
     1ee:	d0fc      	beq.n	1ea <ssd1306_init+0x3e>
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     1f0:	4c56      	ldr	r4, [pc, #344]	; (34c <ssd1306_init+0x1a0>)
     1f2:	2331      	movs	r3, #49	; 0x31
     1f4:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     1f6:	2300      	movs	r3, #0
     1f8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     1fa:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1fc:	a901      	add	r1, sp, #4
     1fe:	2201      	movs	r2, #1
     200:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     202:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     204:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     206:	2031      	movs	r0, #49	; 0x31
     208:	4b51      	ldr	r3, [pc, #324]	; (350 <ssd1306_init+0x1a4>)
     20a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     20c:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     20e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     210:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     212:	2900      	cmp	r1, #0
     214:	d103      	bne.n	21e <ssd1306_init+0x72>
		return &(ports[port_index]->Group[group_index]);
     216:	095a      	lsrs	r2, r3, #5
     218:	01d2      	lsls	r2, r2, #7
     21a:	494a      	ldr	r1, [pc, #296]	; (344 <ssd1306_init+0x198>)
     21c:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     21e:	271f      	movs	r7, #31
     220:	403b      	ands	r3, r7
     222:	2401      	movs	r4, #1
     224:	1c21      	adds	r1, r4, #0
     226:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     228:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     22a:	aa01      	add	r2, sp, #4
     22c:	7014      	strb	r4, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     22e:	2300      	movs	r3, #0
     230:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     232:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     234:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
     236:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
     238:	7494      	strb	r4, [r2, #18]
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     23a:	2120      	movs	r1, #32
     23c:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     23e:	9307      	str	r3, [sp, #28]
     240:	9308      	str	r3, [sp, #32]
	slave_config.ss_pin = SSD1306_CS_PIN;
	spi_attach_slave(&ssd1306_slave, &slave_config);

	spi_get_config_defaults(&config);

	config.mux_setting = SSD1306_SPI_PINMUX_SETTING;
     242:	2380      	movs	r3, #128	; 0x80
     244:	025b      	lsls	r3, r3, #9
     246:	60d3      	str	r3, [r2, #12]
	config.pinmux_pad0 = SSD1306_SPI_PINMUX_PAD0;
     248:	4b42      	ldr	r3, [pc, #264]	; (354 <ssd1306_init+0x1a8>)
     24a:	6253      	str	r3, [r2, #36]	; 0x24
	config.pinmux_pad1 = SSD1306_SPI_PINMUX_PAD1;
     24c:	2301      	movs	r3, #1
     24e:	425b      	negs	r3, r3
     250:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad2 = SSD1306_SPI_PINMUX_PAD2;
     252:	4b41      	ldr	r3, [pc, #260]	; (358 <ssd1306_init+0x1ac>)
     254:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad3 = SSD1306_SPI_PINMUX_PAD3;
     256:	4b41      	ldr	r3, [pc, #260]	; (35c <ssd1306_init+0x1b0>)
     258:	6313      	str	r3, [r2, #48]	; 0x30
	config.mode_specific.master.baudrate = SSD1306_CLOCK_SPEED;
     25a:	4b38      	ldr	r3, [pc, #224]	; (33c <ssd1306_init+0x190>)
     25c:	6153      	str	r3, [r2, #20]

	spi_init(&ssd1306_master, SSD1306_SPI, &config);
     25e:	4e40      	ldr	r6, [pc, #256]	; (360 <ssd1306_init+0x1b4>)
     260:	1c30      	adds	r0, r6, #0
     262:	4940      	ldr	r1, [pc, #256]	; (364 <ssd1306_init+0x1b8>)
     264:	4b40      	ldr	r3, [pc, #256]	; (368 <ssd1306_init+0x1bc>)
     266:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     268:	6835      	ldr	r5, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     26a:	1c28      	adds	r0, r5, #0
     26c:	4b3f      	ldr	r3, [pc, #252]	; (36c <ssd1306_init+0x1c0>)
     26e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     270:	4007      	ands	r7, r0
     272:	40bc      	lsls	r4, r7
     274:	4b3e      	ldr	r3, [pc, #248]	; (370 <ssd1306_init+0x1c4>)
     276:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     278:	6832      	ldr	r2, [r6, #0]
#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
     27a:	8a13      	ldrh	r3, [r2, #16]
     27c:	0bdb      	lsrs	r3, r3, #15

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     27e:	03db      	lsls	r3, r3, #15
     280:	b29b      	uxth	r3, r3
     282:	2b00      	cmp	r3, #0
     284:	d1f9      	bne.n	27a <ssd1306_init+0xce>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     286:	682a      	ldr	r2, [r5, #0]
     288:	2302      	movs	r3, #2
     28a:	4313      	orrs	r3, r2
     28c:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     28e:	2301      	movs	r3, #1
     290:	466a      	mov	r2, sp
     292:	7053      	strb	r3, [r2, #1]
	config->powersave  = false;
     294:	2200      	movs	r2, #0
     296:	4669      	mov	r1, sp
     298:	708a      	strb	r2, [r1, #2]
	spi_enable(&ssd1306_master);

	struct port_config pin;
	port_get_config_defaults(&pin);
	pin.direction = PORT_PIN_DIR_OUTPUT;
     29a:	700b      	strb	r3, [r1, #0]

	port_pin_set_config(SSD1306_DC_PIN, &pin);
     29c:	203e      	movs	r0, #62	; 0x3e
     29e:	4c2c      	ldr	r4, [pc, #176]	; (350 <ssd1306_init+0x1a4>)
     2a0:	47a0      	blx	r4
	port_pin_set_config(SSD1306_RES_PIN, &pin);
     2a2:	201b      	movs	r0, #27
     2a4:	4669      	mov	r1, sp
     2a6:	47a0      	blx	r4
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     2a8:	2280      	movs	r2, #128	; 0x80
     2aa:	0512      	lsls	r2, r2, #20
     2ac:	4b25      	ldr	r3, [pc, #148]	; (344 <ssd1306_init+0x198>)
     2ae:	619a      	str	r2, [r3, #24]

	// Set the reset pin to the default state
	port_pin_set_output_level(SSD1306_RES_PIN, true);

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
     2b0:	20a8      	movs	r0, #168	; 0xa8
     2b2:	4c30      	ldr	r4, [pc, #192]	; (374 <ssd1306_init+0x1c8>)
     2b4:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
     2b6:	201f      	movs	r0, #31
     2b8:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
     2ba:	20d3      	movs	r0, #211	; 0xd3
     2bc:	47a0      	blx	r4
	ssd1306_write_command(0x00);
     2be:	2000      	movs	r0, #0
     2c0:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
     2c2:	2040      	movs	r0, #64	; 0x40
     2c4:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     2c6:	20a1      	movs	r0, #161	; 0xa1
     2c8:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     2ca:	20c8      	movs	r0, #200	; 0xc8
     2cc:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
     2ce:	20da      	movs	r0, #218	; 0xda
     2d0:	47a0      	blx	r4
	ssd1306_write_command(0x02);
     2d2:	2002      	movs	r0, #2
     2d4:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     2d6:	2081      	movs	r0, #129	; 0x81
     2d8:	47a0      	blx	r4
	ssd1306_write_command(contrast);
     2da:	208f      	movs	r0, #143	; 0x8f
     2dc:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     2de:	20a4      	movs	r0, #164	; 0xa4
     2e0:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
     2e2:	20a6      	movs	r0, #166	; 0xa6
     2e4:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     2e6:	20d5      	movs	r0, #213	; 0xd5
     2e8:	47a0      	blx	r4
	ssd1306_write_command(0x80);
     2ea:	2080      	movs	r0, #128	; 0x80
     2ec:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     2ee:	208d      	movs	r0, #141	; 0x8d
     2f0:	47a0      	blx	r4
	ssd1306_write_command(0x14);
     2f2:	2014      	movs	r0, #20
     2f4:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     2f6:	20db      	movs	r0, #219	; 0xdb
     2f8:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
     2fa:	2040      	movs	r0, #64	; 0x40
     2fc:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     2fe:	20d9      	movs	r0, #217	; 0xd9
     300:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
     302:	20f1      	movs	r0, #241	; 0xf1
     304:	47a0      	blx	r4
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     306:	20af      	movs	r0, #175	; 0xaf
     308:	47a0      	blx	r4
     30a:	e010      	b.n	32e <ssd1306_init+0x182>
     30c:	2280      	movs	r2, #128	; 0x80
     30e:	0512      	lsls	r2, r2, #20
     310:	4b0c      	ldr	r3, [pc, #48]	; (344 <ssd1306_init+0x198>)
     312:	619a      	str	r2, [r3, #24]
     314:	e76c      	b.n	1f0 <ssd1306_init+0x44>
     316:	2280      	movs	r2, #128	; 0x80
     318:	0512      	lsls	r2, r2, #20
     31a:	4b0a      	ldr	r3, [pc, #40]	; (344 <ssd1306_init+0x198>)
     31c:	619a      	str	r2, [r3, #24]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     31e:	4b0a      	ldr	r3, [pc, #40]	; (348 <ssd1306_init+0x19c>)
     320:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
     322:	2200      	movs	r2, #0
     324:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     326:	1c19      	adds	r1, r3, #0
     328:	2280      	movs	r2, #128	; 0x80
     32a:	0252      	lsls	r2, r2, #9
     32c:	e75d      	b.n	1ea <ssd1306_init+0x3e>

	ssd1306_display_on();
}
     32e:	b00f      	add	sp, #60	; 0x3c
     330:	bdf0      	pop	{r4, r5, r6, r7, pc}
     332:	46c0      	nop			; (mov r8, r8)
     334:	000003c5 	.word	0x000003c5
     338:	00002691 	.word	0x00002691
     33c:	000f4240 	.word	0x000f4240
     340:	00002d15 	.word	0x00002d15
     344:	41004400 	.word	0x41004400
     348:	e000e010 	.word	0xe000e010
     34c:	20000ba4 	.word	0x20000ba4
     350:	00002235 	.word	0x00002235
     354:	00300002 	.word	0x00300002
     358:	00360003 	.word	0x00360003
     35c:	00370003 	.word	0x00370003
     360:	20000b70 	.word	0x20000b70
     364:	42001c00 	.word	0x42001c00
     368:	00000f2d 	.word	0x00000f2d
     36c:	00000e99 	.word	0x00000e99
     370:	e000e100 	.word	0xe000e100
     374:	00000161 	.word	0x00000161

00000378 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
     378:	b5f0      	push	{r4, r5, r6, r7, lr}
     37a:	b083      	sub	sp, #12
     37c:	466f      	mov	r7, sp
     37e:	71f8      	strb	r0, [r7, #7]
     380:	3707      	adds	r7, #7
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
     382:	4c0b      	ldr	r4, [pc, #44]	; (3b0 <ssd1306_write_data+0x38>)
     384:	4e0b      	ldr	r6, [pc, #44]	; (3b4 <ssd1306_write_data+0x3c>)
     386:	1c20      	adds	r0, r4, #0
     388:	1c31      	adds	r1, r6, #0
     38a:	2201      	movs	r2, #1
     38c:	4d0a      	ldr	r5, [pc, #40]	; (3b8 <ssd1306_write_data+0x40>)
     38e:	47a8      	blx	r5
     390:	2280      	movs	r2, #128	; 0x80
     392:	05d2      	lsls	r2, r2, #23
     394:	4b09      	ldr	r3, [pc, #36]	; (3bc <ssd1306_write_data+0x44>)
     396:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SSD1306_DC_PIN, true);
	spi_write_buffer_wait(&ssd1306_master, &data, 1);
     398:	1c20      	adds	r0, r4, #0
     39a:	1c39      	adds	r1, r7, #0
     39c:	2201      	movs	r2, #1
     39e:	4b08      	ldr	r3, [pc, #32]	; (3c0 <ssd1306_write_data+0x48>)
     3a0:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
     3a2:	1c20      	adds	r0, r4, #0
     3a4:	1c31      	adds	r1, r6, #0
     3a6:	2200      	movs	r2, #0
     3a8:	47a8      	blx	r5
}
     3aa:	b003      	add	sp, #12
     3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	20000b70 	.word	0x20000b70
     3b4:	20000ba4 	.word	0x20000ba4
     3b8:	00001125 	.word	0x00001125
     3bc:	41004480 	.word	0x41004480
     3c0:	0000120d 	.word	0x0000120d

000003c4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     3c4:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     3c6:	2000      	movs	r0, #0
     3c8:	4b08      	ldr	r3, [pc, #32]	; (3ec <delay_init+0x28>)
     3ca:	4798      	blx	r3
	cycles_per_ms /= 1000;
     3cc:	4c08      	ldr	r4, [pc, #32]	; (3f0 <delay_init+0x2c>)
     3ce:	21fa      	movs	r1, #250	; 0xfa
     3d0:	0089      	lsls	r1, r1, #2
     3d2:	47a0      	blx	r4
     3d4:	4b07      	ldr	r3, [pc, #28]	; (3f4 <delay_init+0x30>)
     3d6:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     3d8:	21fa      	movs	r1, #250	; 0xfa
     3da:	0089      	lsls	r1, r1, #2
     3dc:	47a0      	blx	r4
     3de:	4b06      	ldr	r3, [pc, #24]	; (3f8 <delay_init+0x34>)
     3e0:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     3e2:	2205      	movs	r2, #5
     3e4:	4b05      	ldr	r3, [pc, #20]	; (3fc <delay_init+0x38>)
     3e6:	601a      	str	r2, [r3, #0]
}
     3e8:	bd10      	pop	{r4, pc}
     3ea:	46c0      	nop			; (mov r8, r8)
     3ec:	00002691 	.word	0x00002691
     3f0:	00002d15 	.word	0x00002d15
     3f4:	20000004 	.word	0x20000004
     3f8:	20000000 	.word	0x20000000
     3fc:	e000e010 	.word	0xe000e010

00000400 <gfx_mono_set_framebuffer>:
 * gfx_mono_set_framebuffer(framebuffer);
 * \endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
     400:	4b01      	ldr	r3, [pc, #4]	; (408 <gfx_mono_set_framebuffer+0x8>)
     402:	6018      	str	r0, [r3, #0]
}
     404:	4770      	bx	lr
     406:	46c0      	nop			; (mov r8, r8)
     408:	200008f0 	.word	0x200008f0

0000040c <gfx_mono_framebuffer_put_byte>:
 * \endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     40c:	4b02      	ldr	r3, [pc, #8]	; (418 <gfx_mono_framebuffer_put_byte+0xc>)
     40e:	681b      	ldr	r3, [r3, #0]
     410:	01c0      	lsls	r0, r0, #7
     412:	1841      	adds	r1, r0, r1
     414:	54ca      	strb	r2, [r1, r3]
}
     416:	4770      	bx	lr
     418:	200008f0 	.word	0x200008f0

0000041c <gfx_mono_framebuffer_get_byte>:
 * data = gfx_mono_framebuffer_get_byte(0, 0);
 * \endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     41c:	4b02      	ldr	r3, [pc, #8]	; (428 <gfx_mono_framebuffer_get_byte+0xc>)
     41e:	681b      	ldr	r3, [r3, #0]
     420:	01c0      	lsls	r0, r0, #7
     422:	1840      	adds	r0, r0, r1
     424:	5c18      	ldrb	r0, [r3, r0]
}
     426:	4770      	bx	lr
     428:	200008f0 	.word	0x200008f0

0000042c <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     42c:	b5f0      	push	{r4, r5, r6, r7, lr}
     42e:	4657      	mov	r7, sl
     430:	464e      	mov	r6, r9
     432:	4645      	mov	r5, r8
     434:	b4e0      	push	{r5, r6, r7}
     436:	1c14      	adds	r4, r2, #0
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
     438:	1882      	adds	r2, r0, r2
     43a:	2a80      	cmp	r2, #128	; 0x80
     43c:	dd03      	ble.n	446 <gfx_mono_generic_draw_horizontal_line+0x1a>
		length = GFX_MONO_LCD_WIDTH - x;
     43e:	2480      	movs	r4, #128	; 0x80
     440:	4264      	negs	r4, r4
     442:	1a24      	subs	r4, r4, r0
     444:	b2e4      	uxtb	r4, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     446:	2c00      	cmp	r4, #0
     448:	d051      	beq.n	4ee <gfx_mono_generic_draw_horizontal_line+0xc2>
	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
		length = GFX_MONO_LCD_WIDTH - x;
	}

	page = y / 8;
     44a:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
     44c:	00ef      	lsls	r7, r5, #3
     44e:	1bc9      	subs	r1, r1, r7
     450:	2701      	movs	r7, #1
     452:	408f      	lsls	r7, r1
     454:	1c39      	adds	r1, r7, #0
     456:	b2ff      	uxtb	r7, r7
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     458:	2b01      	cmp	r3, #1
     45a:	d004      	beq.n	466 <gfx_mono_generic_draw_horizontal_line+0x3a>
     45c:	2b00      	cmp	r3, #0
     45e:	d019      	beq.n	494 <gfx_mono_generic_draw_horizontal_line+0x68>
     460:	2b02      	cmp	r3, #2
     462:	d144      	bne.n	4ee <gfx_mono_generic_draw_horizontal_line+0xc2>
     464:	e02d      	b.n	4c2 <gfx_mono_generic_draw_horizontal_line+0x96>
 * \param[in]  x          X coordinate of leftmost pixel.
 * \param[in]  y          Y coordinate of the line.
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
     466:	3801      	subs	r0, #1
     468:	4682      	mov	sl, r0
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     46a:	4b23      	ldr	r3, [pc, #140]	; (4f8 <gfx_mono_generic_draw_horizontal_line+0xcc>)
     46c:	4699      	mov	r9, r3
			temp |= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     46e:	4b23      	ldr	r3, [pc, #140]	; (4fc <gfx_mono_generic_draw_horizontal_line+0xd0>)
     470:	4698      	mov	r8, r3
 * \param[in]  x          X coordinate of leftmost pixel.
 * \param[in]  y          Y coordinate of the line.
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
     472:	4653      	mov	r3, sl
     474:	18e6      	adds	r6, r4, r3
     476:	b2f6      	uxtb	r6, r6
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     478:	1c28      	adds	r0, r5, #0
     47a:	1c31      	adds	r1, r6, #0
     47c:	47c8      	blx	r9
			temp |= pixelmask;
     47e:	4338      	orrs	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
     480:	b2c2      	uxtb	r2, r0
     482:	1c28      	adds	r0, r5, #0
     484:	1c31      	adds	r1, r6, #0
     486:	2300      	movs	r3, #0
     488:	47c0      	blx	r8
     48a:	3c01      	subs	r4, #1
     48c:	b2e4      	uxtb	r4, r4
		return;
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
     48e:	2c00      	cmp	r4, #0
     490:	d1ef      	bne.n	472 <gfx_mono_generic_draw_horizontal_line+0x46>
     492:	e02c      	b.n	4ee <gfx_mono_generic_draw_horizontal_line+0xc2>
 * \param[in]  x          X coordinate of leftmost pixel.
 * \param[in]  y          Y coordinate of the line.
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
     494:	3801      	subs	r0, #1
     496:	4682      	mov	sl, r0
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     498:	4b17      	ldr	r3, [pc, #92]	; (4f8 <gfx_mono_generic_draw_horizontal_line+0xcc>)
     49a:	4698      	mov	r8, r3
			temp &= ~pixelmask;
     49c:	43cf      	mvns	r7, r1
 * \param[in]  x          X coordinate of leftmost pixel.
 * \param[in]  y          Y coordinate of the line.
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
     49e:	4653      	mov	r3, sl
     4a0:	18e6      	adds	r6, r4, r3
     4a2:	b2f6      	uxtb	r6, r6
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     4a4:	1c28      	adds	r0, r5, #0
     4a6:	1c31      	adds	r1, r6, #0
     4a8:	47c0      	blx	r8
			temp &= ~pixelmask;
     4aa:	4038      	ands	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
     4ac:	b2c2      	uxtb	r2, r0
     4ae:	1c28      	adds	r0, r5, #0
     4b0:	1c31      	adds	r1, r6, #0
     4b2:	2300      	movs	r3, #0
     4b4:	4e11      	ldr	r6, [pc, #68]	; (4fc <gfx_mono_generic_draw_horizontal_line+0xd0>)
     4b6:	47b0      	blx	r6
     4b8:	3c01      	subs	r4, #1
     4ba:	b2e4      	uxtb	r4, r4
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
     4bc:	2c00      	cmp	r4, #0
     4be:	d1ee      	bne.n	49e <gfx_mono_generic_draw_horizontal_line+0x72>
     4c0:	e015      	b.n	4ee <gfx_mono_generic_draw_horizontal_line+0xc2>
 * \param[in]  x          X coordinate of leftmost pixel.
 * \param[in]  y          Y coordinate of the line.
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
     4c2:	3801      	subs	r0, #1
     4c4:	4682      	mov	sl, r0
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     4c6:	4b0c      	ldr	r3, [pc, #48]	; (4f8 <gfx_mono_generic_draw_horizontal_line+0xcc>)
     4c8:	4699      	mov	r9, r3
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     4ca:	4b0c      	ldr	r3, [pc, #48]	; (4fc <gfx_mono_generic_draw_horizontal_line+0xd0>)
     4cc:	4698      	mov	r8, r3
 * \param[in]  x          X coordinate of leftmost pixel.
 * \param[in]  y          Y coordinate of the line.
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
     4ce:	4653      	mov	r3, sl
     4d0:	18e6      	adds	r6, r4, r3
     4d2:	b2f6      	uxtb	r6, r6
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     4d4:	1c28      	adds	r0, r5, #0
     4d6:	1c31      	adds	r1, r6, #0
     4d8:	47c8      	blx	r9
			temp ^= pixelmask;
     4da:	4078      	eors	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
     4dc:	b2c2      	uxtb	r2, r0
     4de:	1c28      	adds	r0, r5, #0
     4e0:	1c31      	adds	r1, r6, #0
     4e2:	2300      	movs	r3, #0
     4e4:	47c0      	blx	r8
     4e6:	3c01      	subs	r4, #1
     4e8:	b2e4      	uxtb	r4, r4
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
     4ea:	2c00      	cmp	r4, #0
     4ec:	d1ef      	bne.n	4ce <gfx_mono_generic_draw_horizontal_line+0xa2>
		break;

	default:
		break;
	}
}
     4ee:	bc1c      	pop	{r2, r3, r4}
     4f0:	4690      	mov	r8, r2
     4f2:	4699      	mov	r9, r3
     4f4:	46a2      	mov	sl, r4
     4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4f8:	000006ed 	.word	0x000006ed
     4fc:	00000649 	.word	0x00000649

00000500 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     502:	464f      	mov	r7, r9
     504:	4646      	mov	r6, r8
     506:	b4c0      	push	{r6, r7}
     508:	1c05      	adds	r5, r0, #0
     50a:	1c16      	adds	r6, r2, #0
     50c:	1c1c      	adds	r4, r3, #0
     50e:	ab08      	add	r3, sp, #32
     510:	781f      	ldrb	r7, [r3, #0]
	if (height == 0) {
     512:	2c00      	cmp	r4, #0
     514:	d00e      	beq.n	534 <gfx_mono_generic_draw_filled_rect+0x34>
 * \param[in]  y           Y coordinate of the top side.
 * \param[in]  width       Width of the rectangle.
 * \param[in]  height      Height of the rectangle.
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
     516:	3901      	subs	r1, #1
     518:	4689      	mov	r9, r1
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     51a:	4b08      	ldr	r3, [pc, #32]	; (53c <gfx_mono_generic_draw_filled_rect+0x3c>)
     51c:	4698      	mov	r8, r3
 * \param[in]  y           Y coordinate of the top side.
 * \param[in]  width       Width of the rectangle.
 * \param[in]  height      Height of the rectangle.
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
     51e:	464b      	mov	r3, r9
     520:	18e1      	adds	r1, r4, r3
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     522:	b2c9      	uxtb	r1, r1
     524:	1c28      	adds	r0, r5, #0
     526:	1c32      	adds	r2, r6, #0
     528:	1c3b      	adds	r3, r7, #0
     52a:	47c0      	blx	r8
     52c:	3c01      	subs	r4, #1
     52e:	b2e4      	uxtb	r4, r4
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     530:	2c00      	cmp	r4, #0
     532:	d1f4      	bne.n	51e <gfx_mono_generic_draw_filled_rect+0x1e>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     534:	bc0c      	pop	{r2, r3}
     536:	4690      	mov	r8, r2
     538:	4699      	mov	r9, r3
     53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     53c:	0000042d 	.word	0x0000042d

00000540 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     540:	b5f0      	push	{r4, r5, r6, r7, lr}
     542:	465f      	mov	r7, fp
     544:	4656      	mov	r6, sl
     546:	464d      	mov	r5, r9
     548:	4644      	mov	r4, r8
     54a:	b4f0      	push	{r4, r5, r6, r7}
     54c:	b085      	sub	sp, #20
     54e:	1c06      	adds	r6, r0, #0
     550:	4688      	mov	r8, r1
     552:	1c14      	adds	r4, r2, #0
     554:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     556:	7a1a      	ldrb	r2, [r3, #8]
     558:	7a5b      	ldrb	r3, [r3, #9]
     55a:	2100      	movs	r1, #0
     55c:	9100      	str	r1, [sp, #0]
     55e:	4640      	mov	r0, r8
     560:	1c21      	adds	r1, r4, #0
     562:	4d23      	ldr	r5, [pc, #140]	; (5f0 <gfx_mono_draw_char+0xb0>)
     564:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
     566:	4659      	mov	r1, fp
     568:	780b      	ldrb	r3, [r1, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d139      	bne.n	5e2 <gfx_mono_draw_char+0xa2>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     56e:	7a0a      	ldrb	r2, [r1, #8]
     570:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     572:	0751      	lsls	r1, r2, #29
     574:	d000      	beq.n	578 <gfx_mono_draw_char+0x38>
		char_row_size++;
     576:	3301      	adds	r3, #1
	}

	glyph_data_offset = char_row_size * font->height *
     578:	465a      	mov	r2, fp
     57a:	7a55      	ldrb	r5, [r2, #9]
			((uint8_t)ch - font->first_char);
     57c:	7a92      	ldrb	r2, [r2, #10]
     57e:	1ab6      	subs	r6, r6, r2
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
     580:	436e      	muls	r6, r5
     582:	435e      	muls	r6, r3
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     584:	b2b6      	uxth	r6, r6
     586:	465b      	mov	r3, fp
     588:	685b      	ldr	r3, [r3, #4]
     58a:	199e      	adds	r6, r3, r6

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;
     58c:	46a2      	mov	sl, r4
	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     58e:	2107      	movs	r1, #7
     590:	4689      	mov	r9, r1
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
				glyph_data++;
			}

			if ((glyph_byte & 0x80)) {
				gfx_mono_draw_pixel(inc_x, inc_y,
     592:	465b      	mov	r3, fp
     594:	9303      	str	r3, [sp, #12]
     596:	46ab      	mov	fp, r5
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     598:	9903      	ldr	r1, [sp, #12]
     59a:	7a0f      	ldrb	r7, [r1, #8]

		for (i = 0; i < pixelsToDraw; i++) {
     59c:	2f00      	cmp	r7, #0
     59e:	d016      	beq.n	5ce <gfx_mono_draw_char+0x8e>
     5a0:	2400      	movs	r4, #0
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
     5a2:	2500      	movs	r5, #0
 * \param[in] c        Character to be drawn
 * \param[in] x        X coordinate on screen.
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
     5a4:	4642      	mov	r2, r8
     5a6:	1910      	adds	r0, r2, r4
     5a8:	b2c0      	uxtb	r0, r0
	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     5aa:	464b      	mov	r3, r9
     5ac:	4223      	tst	r3, r4
     5ae:	d101      	bne.n	5b4 <gfx_mono_draw_char+0x74>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     5b0:	7835      	ldrb	r5, [r6, #0]
				glyph_data++;
     5b2:	3601      	adds	r6, #1
			}

			if ((glyph_byte & 0x80)) {
     5b4:	b26b      	sxtb	r3, r5
     5b6:	2b00      	cmp	r3, #0
     5b8:	da03      	bge.n	5c2 <gfx_mono_draw_char+0x82>
				gfx_mono_draw_pixel(inc_x, inc_y,
     5ba:	4651      	mov	r1, sl
     5bc:	2201      	movs	r2, #1
     5be:	4b0d      	ldr	r3, [pc, #52]	; (5f4 <gfx_mono_draw_char+0xb4>)
     5c0:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     5c2:	006d      	lsls	r5, r5, #1
     5c4:	b2ed      	uxtb	r5, r5
     5c6:	3401      	adds	r4, #1

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     5c8:	b2e3      	uxtb	r3, r4
     5ca:	429f      	cmp	r7, r3
     5cc:	d8ea      	bhi.n	5a4 <gfx_mono_draw_char+0x64>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     5ce:	4653      	mov	r3, sl
     5d0:	3301      	adds	r3, #1
     5d2:	b2db      	uxtb	r3, r3
     5d4:	469a      	mov	sl, r3
		inc_x = x;
		rows_left--;
     5d6:	465b      	mov	r3, fp
     5d8:	3b01      	subs	r3, #1
     5da:	b2db      	uxtb	r3, r3
     5dc:	469b      	mov	fp, r3
	} while (rows_left > 0);
     5de:	2b00      	cmp	r3, #0
     5e0:	d1da      	bne.n	598 <gfx_mono_draw_char+0x58>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     5e2:	b005      	add	sp, #20
     5e4:	bc3c      	pop	{r2, r3, r4, r5}
     5e6:	4690      	mov	r8, r2
     5e8:	4699      	mov	r9, r3
     5ea:	46a2      	mov	sl, r4
     5ec:	46ab      	mov	fp, r5
     5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5f0:	00000501 	.word	0x00000501
     5f4:	000006f9 	.word	0x000006f9

000005f8 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5fa:	464f      	mov	r7, r9
     5fc:	4646      	mov	r6, r8
     5fe:	b4c0      	push	{r6, r7}
     600:	1c04      	adds	r4, r0, #0
     602:	4689      	mov	r9, r1
     604:	4690      	mov	r8, r2
     606:	1c1f      	adds	r7, r3, #0
     608:	1c0e      	adds	r6, r1, #0
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     60a:	7820      	ldrb	r0, [r4, #0]
     60c:	280a      	cmp	r0, #10
     60e:	d106      	bne.n	61e <gfx_mono_draw_string+0x26>
			x = start_of_string_position_x;
			y += font->height + 1;
     610:	7a7b      	ldrb	r3, [r7, #9]
     612:	3301      	adds	r3, #1
     614:	4443      	add	r3, r8
     616:	b2db      	uxtb	r3, r3
     618:	4698      	mov	r8, r3

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     61a:	464e      	mov	r6, r9
     61c:	e009      	b.n	632 <gfx_mono_draw_string+0x3a>
			y += font->height + 1;
		} else if (*str == '\r') {
     61e:	280d      	cmp	r0, #13
     620:	d007      	beq.n	632 <gfx_mono_draw_string+0x3a>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     622:	1c31      	adds	r1, r6, #0
     624:	4642      	mov	r2, r8
     626:	1c3b      	adds	r3, r7, #0
     628:	4d06      	ldr	r5, [pc, #24]	; (644 <gfx_mono_draw_string+0x4c>)
     62a:	47a8      	blx	r5
			x += font->width;
     62c:	7a3b      	ldrb	r3, [r7, #8]
     62e:	18f6      	adds	r6, r6, r3
     630:	b2f6      	uxtb	r6, r6
		}
	} while (*(++str));
     632:	3401      	adds	r4, #1
     634:	7820      	ldrb	r0, [r4, #0]
     636:	2800      	cmp	r0, #0
     638:	d1e7      	bne.n	60a <gfx_mono_draw_string+0x12>
}
     63a:	bc0c      	pop	{r2, r3}
     63c:	4690      	mov	r8, r2
     63e:	4699      	mov	r9, r3
     640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     642:	46c0      	nop			; (mov r8, r8)
     644:	00000541 	.word	0x00000541

00000648 <gfx_mono_ssd1306_put_byte>:
 * gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
 * \endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
     648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     64a:	1c05      	adds	r5, r0, #0
     64c:	1c0c      	adds	r4, r1, #0
     64e:	1c16      	adds	r6, r2, #0
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
     650:	2b00      	cmp	r3, #0
     652:	d103      	bne.n	65c <gfx_mono_ssd1306_put_byte+0x14>
     654:	4b0d      	ldr	r3, [pc, #52]	; (68c <gfx_mono_ssd1306_put_byte+0x44>)
     656:	4798      	blx	r3
     658:	42b0      	cmp	r0, r6
     65a:	d016      	beq.n	68a <gfx_mono_ssd1306_put_byte+0x42>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
     65c:	1c28      	adds	r0, r5, #0
     65e:	1c21      	adds	r1, r4, #0
     660:	1c32      	adds	r2, r6, #0
     662:	4b0b      	ldr	r3, [pc, #44]	; (690 <gfx_mono_ssd1306_put_byte+0x48>)
     664:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
     666:	270f      	movs	r7, #15
     668:	403d      	ands	r5, r7
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
     66a:	23b0      	movs	r3, #176	; 0xb0
     66c:	1c28      	adds	r0, r5, #0
     66e:	4318      	orrs	r0, r3
     670:	4d08      	ldr	r5, [pc, #32]	; (694 <gfx_mono_ssd1306_put_byte+0x4c>)
     672:	47a8      	blx	r5
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
     674:	0660      	lsls	r0, r4, #25
     676:	0f40      	lsrs	r0, r0, #29
     678:	2310      	movs	r3, #16
     67a:	4318      	orrs	r0, r3
     67c:	47a8      	blx	r5
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
     67e:	1c38      	adds	r0, r7, #0
     680:	4020      	ands	r0, r4
     682:	47a8      	blx	r5
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
     684:	1c30      	adds	r0, r6, #0
     686:	4b04      	ldr	r3, [pc, #16]	; (698 <gfx_mono_ssd1306_put_byte+0x50>)
     688:	4798      	blx	r3
}
     68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     68c:	0000041d 	.word	0x0000041d
     690:	0000040d 	.word	0x0000040d
     694:	00000161 	.word	0x00000161
     698:	00000379 	.word	0x00000379

0000069c <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
     69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     69e:	480e      	ldr	r0, [pc, #56]	; (6d8 <gfx_mono_ssd1306_init+0x3c>)
     6a0:	4b0e      	ldr	r3, [pc, #56]	; (6dc <gfx_mono_ssd1306_init+0x40>)
     6a2:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
     6a4:	4b0e      	ldr	r3, [pc, #56]	; (6e0 <gfx_mono_ssd1306_init+0x44>)
     6a6:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
     6a8:	2040      	movs	r0, #64	; 0x40
     6aa:	4b0e      	ldr	r3, [pc, #56]	; (6e4 <gfx_mono_ssd1306_init+0x48>)
     6ac:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     6ae:	2500      	movs	r5, #0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
     6b0:	2600      	movs	r6, #0
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
     6b2:	4f0d      	ldr	r7, [pc, #52]	; (6e8 <gfx_mono_ssd1306_init+0x4c>)
     6b4:	e00c      	b.n	6d0 <gfx_mono_ssd1306_init+0x34>
     6b6:	1c28      	adds	r0, r5, #0
     6b8:	1c21      	adds	r1, r4, #0
     6ba:	1c32      	adds	r2, r6, #0
     6bc:	2301      	movs	r3, #1
     6be:	47b8      	blx	r7
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     6c0:	3401      	adds	r4, #1
     6c2:	b2e4      	uxtb	r4, r4
     6c4:	2c80      	cmp	r4, #128	; 0x80
     6c6:	d1f6      	bne.n	6b6 <gfx_mono_ssd1306_init+0x1a>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     6c8:	3501      	adds	r5, #1
     6ca:	b2ed      	uxtb	r5, r5
     6cc:	2d04      	cmp	r5, #4
     6ce:	d001      	beq.n	6d4 <gfx_mono_ssd1306_init+0x38>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
     6d0:	1c34      	adds	r4, r6, #0
     6d2:	e7f0      	b.n	6b6 <gfx_mono_ssd1306_init+0x1a>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
		}
	}
}
     6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6d6:	46c0      	nop			; (mov r8, r8)
     6d8:	200008f4 	.word	0x200008f4
     6dc:	00000401 	.word	0x00000401
     6e0:	000001ad 	.word	0x000001ad
     6e4:	00000161 	.word	0x00000161
     6e8:	00000649 	.word	0x00000649

000006ec <gfx_mono_ssd1306_get_byte>:
 * \code
 * data = gfx_mono_ssd1306_get_byte(0, 0);
 * \endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
     6ec:	b508      	push	{r3, lr}
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     6ee:	4b01      	ldr	r3, [pc, #4]	; (6f4 <gfx_mono_ssd1306_get_byte+0x8>)
     6f0:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
     6f2:	bd08      	pop	{r3, pc}
     6f4:	0000041d 	.word	0x0000041d

000006f8 <gfx_mono_ssd1306_draw_pixel>:
 * gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
 * \endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fa:	4647      	mov	r7, r8
     6fc:	b480      	push	{r7}
     6fe:	1c04      	adds	r4, r0, #0
     700:	1c15      	adds	r5, r2, #0
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     702:	b243      	sxtb	r3, r0
     704:	2b00      	cmp	r3, #0
     706:	db23      	blt.n	750 <gfx_mono_ssd1306_draw_pixel+0x58>
     708:	291f      	cmp	r1, #31
     70a:	d821      	bhi.n	750 <gfx_mono_ssd1306_draw_pixel+0x58>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     70c:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
     70e:	00f7      	lsls	r7, r6, #3
     710:	1bc9      	subs	r1, r1, r7
     712:	2701      	movs	r7, #1
     714:	408f      	lsls	r7, r1
     716:	b2fb      	uxtb	r3, r7
     718:	4698      	mov	r8, r3
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
     71a:	1c30      	adds	r0, r6, #0
     71c:	1c21      	adds	r1, r4, #0
     71e:	4b0e      	ldr	r3, [pc, #56]	; (758 <gfx_mono_ssd1306_draw_pixel+0x60>)
     720:	4798      	blx	r3
     722:	1c02      	adds	r2, r0, #0

	switch (color) {
     724:	2d01      	cmp	r5, #1
     726:	d004      	beq.n	732 <gfx_mono_ssd1306_draw_pixel+0x3a>
     728:	2d00      	cmp	r5, #0
     72a:	d006      	beq.n	73a <gfx_mono_ssd1306_draw_pixel+0x42>
     72c:	2d02      	cmp	r5, #2
     72e:	d10a      	bne.n	746 <gfx_mono_ssd1306_draw_pixel+0x4e>
     730:	e006      	b.n	740 <gfx_mono_ssd1306_draw_pixel+0x48>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     732:	4643      	mov	r3, r8
     734:	4318      	orrs	r0, r3
     736:	b2c2      	uxtb	r2, r0
		break;
     738:	e005      	b.n	746 <gfx_mono_ssd1306_draw_pixel+0x4e>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     73a:	43b8      	bics	r0, r7
     73c:	b2c2      	uxtb	r2, r0
		break;
     73e:	e002      	b.n	746 <gfx_mono_ssd1306_draw_pixel+0x4e>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     740:	4643      	mov	r3, r8
     742:	4058      	eors	r0, r3
     744:	b2c2      	uxtb	r2, r0

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     746:	1c30      	adds	r0, r6, #0
     748:	1c21      	adds	r1, r4, #0
     74a:	2300      	movs	r3, #0
     74c:	4c03      	ldr	r4, [pc, #12]	; (75c <gfx_mono_ssd1306_draw_pixel+0x64>)
     74e:	47a0      	blx	r4
}
     750:	bc04      	pop	{r2}
     752:	4690      	mov	r8, r2
     754:	bdf0      	pop	{r4, r5, r6, r7, pc}
     756:	46c0      	nop			; (mov r8, r8)
     758:	000006ed 	.word	0x000006ed
     75c:	00000649 	.word	0x00000649

00000760 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     760:	4b05      	ldr	r3, [pc, #20]	; (778 <_extint_enable+0x18>)
     762:	7819      	ldrb	r1, [r3, #0]
     764:	2202      	movs	r2, #2
     766:	430a      	orrs	r2, r1
     768:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     76a:	1c1a      	adds	r2, r3, #0
     76c:	7853      	ldrb	r3, [r2, #1]
     76e:	b25b      	sxtb	r3, r3
     770:	2b00      	cmp	r3, #0
     772:	dbfb      	blt.n	76c <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     774:	4770      	bx	lr
     776:	46c0      	nop			; (mov r8, r8)
     778:	40001800 	.word	0x40001800

0000077c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     77c:	b500      	push	{lr}
     77e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     780:	4b12      	ldr	r3, [pc, #72]	; (7cc <_system_extint_init+0x50>)
     782:	6999      	ldr	r1, [r3, #24]
     784:	2240      	movs	r2, #64	; 0x40
     786:	430a      	orrs	r2, r1
     788:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     78a:	a901      	add	r1, sp, #4
     78c:	2300      	movs	r3, #0
     78e:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     790:	2003      	movs	r0, #3
     792:	4b0f      	ldr	r3, [pc, #60]	; (7d0 <_system_extint_init+0x54>)
     794:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     796:	2003      	movs	r0, #3
     798:	4b0e      	ldr	r3, [pc, #56]	; (7d4 <_system_extint_init+0x58>)
     79a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     79c:	4b0e      	ldr	r3, [pc, #56]	; (7d8 <_system_extint_init+0x5c>)
     79e:	7819      	ldrb	r1, [r3, #0]
     7a0:	2201      	movs	r2, #1
     7a2:	430a      	orrs	r2, r1
     7a4:	701a      	strb	r2, [r3, #0]
     7a6:	1c1a      	adds	r2, r3, #0
     7a8:	7853      	ldrb	r3, [r2, #1]
     7aa:	b25b      	sxtb	r3, r3
     7ac:	2b00      	cmp	r3, #0
     7ae:	dbfb      	blt.n	7a8 <_system_extint_init+0x2c>
     7b0:	4b0a      	ldr	r3, [pc, #40]	; (7dc <_system_extint_init+0x60>)
 *
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
     7b2:	1c19      	adds	r1, r3, #0
     7b4:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     7b6:	2200      	movs	r2, #0
     7b8:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     7ba:	428b      	cmp	r3, r1
     7bc:	d1fc      	bne.n	7b8 <_system_extint_init+0x3c>
     7be:	2210      	movs	r2, #16
     7c0:	4b07      	ldr	r3, [pc, #28]	; (7e0 <_system_extint_init+0x64>)
     7c2:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     7c4:	4b07      	ldr	r3, [pc, #28]	; (7e4 <_system_extint_init+0x68>)
     7c6:	4798      	blx	r3
}
     7c8:	b003      	add	sp, #12
     7ca:	bd00      	pop	{pc}
     7cc:	40000400 	.word	0x40000400
     7d0:	000027a9 	.word	0x000027a9
     7d4:	0000271d 	.word	0x0000271d
     7d8:	40001800 	.word	0x40001800
     7dc:	20000ba8 	.word	0x20000ba8
     7e0:	e000e100 	.word	0xe000e100
     7e4:	00000761 	.word	0x00000761

000007e8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7ea:	b083      	sub	sp, #12
     7ec:	1c05      	adds	r5, r0, #0
     7ee:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7f0:	a901      	add	r1, sp, #4
     7f2:	2300      	movs	r3, #0
     7f4:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     7f6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     7f8:	6863      	ldr	r3, [r4, #4]
     7fa:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     7fc:	7a23      	ldrb	r3, [r4, #8]
     7fe:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     800:	7820      	ldrb	r0, [r4, #0]
     802:	4b15      	ldr	r3, [pc, #84]	; (858 <extint_chan_set_config+0x70>)
     804:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     806:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     808:	2d1f      	cmp	r5, #31
     80a:	d800      	bhi.n	80e <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     80c:	4b13      	ldr	r3, [pc, #76]	; (85c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     80e:	2107      	movs	r1, #7
     810:	4029      	ands	r1, r5
     812:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     814:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     816:	7aa2      	ldrb	r2, [r4, #10]
     818:	2a00      	cmp	r2, #0
     81a:	d001      	beq.n	820 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     81c:	2208      	movs	r2, #8
     81e:	4310      	orrs	r0, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     820:	08ea      	lsrs	r2, r5, #3
     822:	3206      	adds	r2, #6
     824:	0092      	lsls	r2, r2, #2
     826:	58d6      	ldr	r6, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     828:	4088      	lsls	r0, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     82a:	270f      	movs	r7, #15
     82c:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     82e:	43be      	bics	r6, r7
     830:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     832:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     834:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     836:	7a62      	ldrb	r2, [r4, #9]
     838:	2a00      	cmp	r2, #0
     83a:	d006      	beq.n	84a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     83c:	695a      	ldr	r2, [r3, #20]
     83e:	2101      	movs	r1, #1
     840:	40a9      	lsls	r1, r5
     842:	1c0d      	adds	r5, r1, #0
     844:	4315      	orrs	r5, r2
     846:	615d      	str	r5, [r3, #20]
     848:	e004      	b.n	854 <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     84a:	695a      	ldr	r2, [r3, #20]
     84c:	2101      	movs	r1, #1
     84e:	40a9      	lsls	r1, r5
     850:	438a      	bics	r2, r1
     852:	615a      	str	r2, [r3, #20]
	}
}
     854:	b003      	add	sp, #12
     856:	bdf0      	pop	{r4, r5, r6, r7, pc}
     858:	00002881 	.word	0x00002881
     85c:	40001800 	.word	0x40001800

00000860 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     860:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     862:	2a00      	cmp	r2, #0
     864:	d10e      	bne.n	884 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     866:	008a      	lsls	r2, r1, #2
     868:	4b07      	ldr	r3, [pc, #28]	; (888 <extint_register_callback+0x28>)
     86a:	58d2      	ldr	r2, [r2, r3]
     86c:	2a00      	cmp	r2, #0
     86e:	d103      	bne.n	878 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
     870:	0089      	lsls	r1, r1, #2
     872:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
     874:	2300      	movs	r3, #0
     876:	e005      	b.n	884 <extint_register_callback+0x24>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     878:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     87a:	1a12      	subs	r2, r2, r0
     87c:	1e50      	subs	r0, r2, #1
     87e:	4182      	sbcs	r2, r0
     880:	4252      	negs	r2, r2
     882:	4013      	ands	r3, r2
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     884:	1c18      	adds	r0, r3, #0
     886:	4770      	bx	lr
     888:	20000ba8 	.word	0x20000ba8

0000088c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     88c:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     88e:	2900      	cmp	r1, #0
     890:	d107      	bne.n	8a2 <extint_chan_enable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
     892:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     894:	281f      	cmp	r0, #31
     896:	d800      	bhi.n	89a <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     898:	4b03      	ldr	r3, [pc, #12]	; (8a8 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     89a:	2201      	movs	r2, #1
     89c:	4082      	lsls	r2, r0
     89e:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     8a0:	2300      	movs	r3, #0
}
     8a2:	1c18      	adds	r0, r3, #0
     8a4:	4770      	bx	lr
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	40001800 	.word	0x40001800

000008ac <EIC_Handler>:
	return STATUS_OK;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ae:	4647      	mov	r7, r8
     8b0:	b480      	push	{r7}
     8b2:	4d16      	ldr	r5, [pc, #88]	; (90c <EIC_Handler+0x60>)
	/* Find any triggered channels, run associated callback handlers */
	for (uint8_t i = 0; i < EIC_NUMBER_OF_INTERRUPTS ; i++) {
     8b4:	2400      	movs	r4, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     8b6:	221f      	movs	r2, #31
     8b8:	4690      	mov	r8, r2
     8ba:	2701      	movs	r7, #1

	return (eic_module->INTFLAG.reg & eic_mask);
     8bc:	2600      	movs	r6, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     8be:	2c1f      	cmp	r4, #31
     8c0:	d90e      	bls.n	8e0 <EIC_Handler+0x34>
     8c2:	e017      	b.n	8f4 <EIC_Handler+0x48>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     8c4:	4a12      	ldr	r2, [pc, #72]	; (910 <EIC_Handler+0x64>)
     8c6:	e000      	b.n	8ca <EIC_Handler+0x1e>
	} else {
		Assert(false);
		return NULL;
     8c8:	1c32      	adds	r2, r6, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     8ca:	6113      	str	r3, [r2, #16]
		if (extint_chan_is_detected(i)) {
			/* Clear flag */
			extint_chan_clear_detected(i);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[i] != NULL) {
     8cc:	682b      	ldr	r3, [r5, #0]
     8ce:	2b00      	cmp	r3, #0
     8d0:	d000      	beq.n	8d4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[i]();
     8d2:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (uint8_t i = 0; i < EIC_NUMBER_OF_INTERRUPTS ; i++) {
     8d4:	3401      	adds	r4, #1
     8d6:	b2e4      	uxtb	r4, r4
     8d8:	3504      	adds	r5, #4
     8da:	2c10      	cmp	r4, #16
     8dc:	d1ef      	bne.n	8be <EIC_Handler+0x12>
     8de:	e012      	b.n	906 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     8e0:	4643      	mov	r3, r8
     8e2:	4023      	ands	r3, r4
     8e4:	1c3a      	adds	r2, r7, #0
     8e6:	409a      	lsls	r2, r3
     8e8:	1c13      	adds	r3, r2, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     8ea:	4a09      	ldr	r2, [pc, #36]	; (910 <EIC_Handler+0x64>)
     8ec:	6912      	ldr	r2, [r2, #16]
		if (extint_chan_is_detected(i)) {
     8ee:	421a      	tst	r2, r3
     8f0:	d1e8      	bne.n	8c4 <EIC_Handler+0x18>
     8f2:	e7ef      	b.n	8d4 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     8f4:	4643      	mov	r3, r8
     8f6:	4023      	ands	r3, r4
     8f8:	1c3a      	adds	r2, r7, #0
     8fa:	409a      	lsls	r2, r3
     8fc:	1c13      	adds	r3, r2, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     8fe:	6932      	ldr	r2, [r6, #16]
     900:	421a      	tst	r2, r3
     902:	d1e1      	bne.n	8c8 <EIC_Handler+0x1c>
     904:	e7e6      	b.n	8d4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[i]();
			}
		}
	}
}
     906:	bc04      	pop	{r2}
     908:	4690      	mov	r8, r2
     90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     90c:	20000ba8 	.word	0x20000ba8
     910:	40001800 	.word	0x40001800

00000914 <_rtc_calendar_time_to_register_value>:
 * \internal Convert time structure to register_value.
 */
static uint32_t _rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     914:	b510      	push	{r4, lr}

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     916:	790a      	ldrb	r2, [r1, #4]
     918:	0452      	lsls	r2, r2, #17
	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     91a:	794b      	ldrb	r3, [r1, #5]
     91c:	059b      	lsls	r3, r3, #22
     91e:	431a      	orrs	r2, r3

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     920:	788b      	ldrb	r3, [r1, #2]
     922:	031b      	lsls	r3, r3, #12

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     924:	431a      	orrs	r2, r3
{
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     926:	88cc      	ldrh	r4, [r1, #6]
     928:	88c3      	ldrh	r3, [r0, #6]
     92a:	1ae3      	subs	r3, r4, r3
     92c:	069b      	lsls	r3, r3, #26

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     92e:	431a      	orrs	r2, r3
     930:	1c13      	adds	r3, r2, #0

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     932:	7900      	ldrb	r0, [r0, #4]
     934:	2800      	cmp	r0, #0
     936:	d105      	bne.n	944 <_rtc_calendar_time_to_register_value+0x30>
     938:	78c8      	ldrb	r0, [r1, #3]
     93a:	2800      	cmp	r0, #0
     93c:	d002      	beq.n	944 <_rtc_calendar_time_to_register_value+0x30>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
     93e:	2380      	movs	r3, #128	; 0x80
     940:	025b      	lsls	r3, r3, #9
     942:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     944:	7848      	ldrb	r0, [r1, #1]
     946:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     948:	780a      	ldrb	r2, [r1, #0]
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     94a:	4310      	orrs	r0, r2

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     94c:	4318      	orrs	r0, r3

	return register_value;
}
     94e:	bd10      	pop	{r4, pc}

00000950 <_rtc_calendar_register_value_to_time>:
 */
static void _rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
     950:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     952:	0e8c      	lsrs	r4, r1, #26
     954:	88c3      	ldrh	r3, [r0, #6]
     956:	18e3      	adds	r3, r4, r3
     958:	80d3      	strh	r3, [r2, #6]
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
     95a:	018b      	lsls	r3, r1, #6
     95c:	0f1b      	lsrs	r3, r3, #28
     95e:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
     960:	028b      	lsls	r3, r1, #10
     962:	0edb      	lsrs	r3, r3, #27
     964:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
     966:	7903      	ldrb	r3, [r0, #4]
     968:	2b00      	cmp	r3, #0
     96a:	d003      	beq.n	974 <_rtc_calendar_register_value_to_time+0x24>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
     96c:	03cb      	lsls	r3, r1, #15
     96e:	0edb      	lsrs	r3, r3, #27
     970:	7093      	strb	r3, [r2, #2]
     972:	e005      	b.n	980 <_rtc_calendar_register_value_to_time+0x30>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
     974:	040b      	lsls	r3, r1, #16
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
     976:	0f1b      	lsrs	r3, r3, #28
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
     978:	7093      	strb	r3, [r2, #2]
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
     97a:	03cb      	lsls	r3, r1, #15
     97c:	0fdb      	lsrs	r3, r3, #31
     97e:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
     980:	050b      	lsls	r3, r1, #20
     982:	0e9b      	lsrs	r3, r3, #26
     984:	7053      	strb	r3, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
     986:	233f      	movs	r3, #63	; 0x3f
     988:	4019      	ands	r1, r3
     98a:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
     98c:	bd10      	pop	{r4, pc}
     98e:	46c0      	nop			; (mov r8, r8)

00000990 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     990:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     992:	6801      	ldr	r1, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     994:	2408      	movs	r4, #8
     996:	2380      	movs	r3, #128	; 0x80
     998:	4a0b      	ldr	r2, [pc, #44]	; (9c8 <rtc_calendar_reset+0x38>)
     99a:	50d4      	str	r4, [r2, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     99c:	6802      	ldr	r2, [r0, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     99e:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     9a0:	b25b      	sxtb	r3, r3
     9a2:	2b00      	cmp	r3, #0
     9a4:	dbfb      	blt.n	99e <rtc_calendar_reset+0xe>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
     9a6:	880b      	ldrh	r3, [r1, #0]
     9a8:	2202      	movs	r2, #2
     9aa:	4393      	bics	r3, r2
     9ac:	800b      	strh	r3, [r1, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
     9ae:	2300      	movs	r3, #0
     9b0:	7403      	strb	r3, [r0, #16]
	module->enabled_callback    = 0;
     9b2:	7443      	strb	r3, [r0, #17]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9b4:	6802      	ldr	r2, [r0, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     9b6:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
     9b8:	b25b      	sxtb	r3, r3
     9ba:	2b00      	cmp	r3, #0
     9bc:	dbfb      	blt.n	9b6 <rtc_calendar_reset+0x26>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
     9be:	880a      	ldrh	r2, [r1, #0]
     9c0:	2301      	movs	r3, #1
     9c2:	4313      	orrs	r3, r2
     9c4:	800b      	strh	r3, [r1, #0]
}
     9c6:	bd10      	pop	{r4, pc}
     9c8:	e000e100 	.word	0xe000e100

000009cc <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar.
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     9cc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9ce:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = _rtc_calendar_time_to_register_value(module, time);
     9d0:	4b03      	ldr	r3, [pc, #12]	; (9e0 <rtc_calendar_set_time+0x14>)
     9d2:	4798      	blx	r3
     9d4:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_calendar_is_syncing(module)) {
     9d6:	b25b      	sxtb	r3, r3
     9d8:	2b00      	cmp	r3, #0
     9da:	dbfb      	blt.n	9d4 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
     9dc:	6120      	str	r0, [r4, #16]
}
     9de:	bd10      	pop	{r4, pc}
     9e0:	00000915 	.word	0x00000915

000009e4 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time.
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
     9e4:	b538      	push	{r3, r4, r5, lr}
     9e6:	1c0a      	adds	r2, r1, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9e8:	6805      	ldr	r5, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
     9ea:	7943      	ldrb	r3, [r0, #5]
     9ec:	2b00      	cmp	r3, #0
     9ee:	d106      	bne.n	9fe <rtc_calendar_get_time+0x1a>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
     9f0:	4b05      	ldr	r3, [pc, #20]	; (a08 <rtc_calendar_get_time+0x24>)
     9f2:	806b      	strh	r3, [r5, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9f4:	6804      	ldr	r4, [r0, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     9f6:	7aa3      	ldrb	r3, [r4, #10]

		while (rtc_calendar_is_syncing(module)) {
     9f8:	b25b      	sxtb	r3, r3
     9fa:	2b00      	cmp	r3, #0
     9fc:	dbfb      	blt.n	9f6 <rtc_calendar_get_time+0x12>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
     9fe:	6929      	ldr	r1, [r5, #16]

	/* Convert value to time structure. */
	_rtc_calendar_register_value_to_time(module, register_value, time);
     a00:	4b02      	ldr	r3, [pc, #8]	; (a0c <rtc_calendar_get_time+0x28>)
     a02:	4798      	blx	r3
}
     a04:	bd38      	pop	{r3, r4, r5, pc}
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	ffff8000 	.word	0xffff8000
     a0c:	00000951 	.word	0x00000951

00000a10 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     a10:	b570      	push	{r4, r5, r6, lr}
     a12:	1c0e      	adds	r6, r1, #0
     a14:	1c15      	adds	r5, r2, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a16:	6804      	ldr	r4, [r0, #0]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
     a18:	2317      	movs	r3, #23
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     a1a:	2a01      	cmp	r2, #1
     a1c:	d80c      	bhi.n	a38 <rtc_calendar_set_alarm+0x28>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Get register_value from time. */
	uint32_t register_value = _rtc_calendar_time_to_register_value(module, &(alarm->time));
     a1e:	4b07      	ldr	r3, [pc, #28]	; (a3c <rtc_calendar_set_alarm+0x2c>)
     a20:	4798      	blx	r3
     a22:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_calendar_is_syncing(module)) {
     a24:	b25b      	sxtb	r3, r3
     a26:	2b00      	cmp	r3, #0
     a28:	dbfb      	blt.n	a22 <rtc_calendar_set_alarm+0x12>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     a2a:	3503      	adds	r5, #3
     a2c:	00ed      	lsls	r5, r5, #3
     a2e:	5128      	str	r0, [r5, r4]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     a30:	7a33      	ldrb	r3, [r6, #8]
     a32:	1964      	adds	r4, r4, r5
     a34:	7123      	strb	r3, [r4, #4]

	return STATUS_OK;
     a36:	2300      	movs	r3, #0
}
     a38:	1c18      	adds	r0, r3, #0
     a3a:	bd70      	pop	{r4, r5, r6, pc}
     a3c:	00000915 	.word	0x00000915

00000a40 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
     a40:	b530      	push	{r4, r5, lr}
     a42:	b083      	sub	sp, #12
     a44:	1c04      	adds	r4, r0, #0
     a46:	1c15      	adds	r5, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     a48:	6001      	str	r1, [r0, #0]
     a4a:	4b1c      	ldr	r3, [pc, #112]	; (abc <rtc_calendar_init+0x7c>)
     a4c:	6999      	ldr	r1, [r3, #24]
     a4e:	2220      	movs	r2, #32
     a50:	430a      	orrs	r2, r1
     a52:	619a      	str	r2, [r3, #24]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     a54:	a901      	add	r1, sp, #4
     a56:	2302      	movs	r3, #2
     a58:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     a5a:	2002      	movs	r0, #2
     a5c:	4b18      	ldr	r3, [pc, #96]	; (ac0 <rtc_calendar_init+0x80>)
     a5e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     a60:	2002      	movs	r0, #2
     a62:	4b18      	ldr	r3, [pc, #96]	; (ac4 <rtc_calendar_init+0x84>)
     a64:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
     a66:	1c20      	adds	r0, r4, #0
     a68:	4b17      	ldr	r3, [pc, #92]	; (ac8 <rtc_calendar_init+0x88>)
     a6a:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
     a6c:	792b      	ldrb	r3, [r5, #4]
     a6e:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     a70:	78eb      	ldrb	r3, [r5, #3]
     a72:	7163      	strb	r3, [r4, #5]
	module->year_init_value     = config->year_init_value;
     a74:	88eb      	ldrh	r3, [r5, #6]
     a76:	80e3      	strh	r3, [r4, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     a78:	4b14      	ldr	r3, [pc, #80]	; (acc <rtc_calendar_init+0x8c>)
     a7a:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a7c:	6823      	ldr	r3, [r4, #0]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
     a7e:	882a      	ldrh	r2, [r5, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
     a80:	7929      	ldrb	r1, [r5, #4]
     a82:	2900      	cmp	r1, #0
     a84:	d002      	beq.n	a8c <rtc_calendar_init+0x4c>

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
     a86:	2108      	movs	r1, #8
     a88:	430a      	orrs	r2, r1
     a8a:	e001      	b.n	a90 <rtc_calendar_init+0x50>

	/* Check clock mode. */
	if (!(config->clock_24h)) {
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
     a8c:	2148      	movs	r1, #72	; 0x48
     a8e:	430a      	orrs	r2, r1
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
     a90:	78a9      	ldrb	r1, [r5, #2]
     a92:	2900      	cmp	r1, #0
     a94:	d001      	beq.n	a9a <rtc_calendar_init+0x5a>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
     a96:	2180      	movs	r1, #128	; 0x80
     a98:	430a      	orrs	r2, r1
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
     a9a:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     a9c:	78ea      	ldrb	r2, [r5, #3]
     a9e:	2a00      	cmp	r2, #0
     aa0:	d004      	beq.n	aac <rtc_calendar_init+0x6c>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
     aa2:	8859      	ldrh	r1, [r3, #2]
     aa4:	2280      	movs	r2, #128	; 0x80
     aa6:	01d2      	lsls	r2, r2, #7
     aa8:	430a      	orrs	r2, r1
     aaa:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     aac:	1c29      	adds	r1, r5, #0
     aae:	3108      	adds	r1, #8
     ab0:	1c20      	adds	r0, r4, #0
     ab2:	2200      	movs	r2, #0
     ab4:	4b06      	ldr	r3, [pc, #24]	; (ad0 <rtc_calendar_init+0x90>)
     ab6:	4798      	blx	r3
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
}
     ab8:	b003      	add	sp, #12
     aba:	bd30      	pop	{r4, r5, pc}
     abc:	40000400 	.word	0x40000400
     ac0:	000027a9 	.word	0x000027a9
     ac4:	0000271d 	.word	0x0000271d
     ac8:	00000991 	.word	0x00000991
     acc:	20000be8 	.word	0x20000be8
     ad0:	00000a11 	.word	0x00000a11

00000ad4 <rtc_calendar_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
     ad4:	2a01      	cmp	r2, #1
     ad6:	d002      	beq.n	ade <rtc_calendar_register_callback+0xa>
		status = STATUS_OK;
	} else if (callback_type > RTC_NUM_OF_ALARMS) {
     ad8:	d901      	bls.n	ade <rtc_calendar_register_callback+0xa>
		/* Make sure alarm callback can be registered */
		status = STATUS_ERR_INVALID_ARG;
     ada:	2017      	movs	r0, #23
     adc:	e00a      	b.n	af4 <rtc_calendar_register_callback+0x20>
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     ade:	1c93      	adds	r3, r2, #2
     ae0:	009b      	lsls	r3, r3, #2
     ae2:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     ae4:	7c03      	ldrb	r3, [r0, #16]
     ae6:	2101      	movs	r1, #1
     ae8:	4091      	lsls	r1, r2
     aea:	1c0a      	adds	r2, r1, #0
     aec:	431a      	orrs	r2, r3
     aee:	b2d2      	uxtb	r2, r2
     af0:	7402      	strb	r2, [r0, #16]
     af2:	2000      	movs	r0, #0
	}

	return status;
}
     af4:	4770      	bx	lr
     af6:	46c0      	nop			; (mov r8, r8)

00000af8 <rtc_calendar_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_calendar_enable_callback(
		struct rtc_module *const module,
		enum rtc_calendar_callback callback_type)
{
     af8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     afa:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
     afc:	2901      	cmp	r1, #1
     afe:	d102      	bne.n	b06 <rtc_calendar_enable_callback+0xe>
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
     b00:	2380      	movs	r3, #128	; 0x80
     b02:	71d3      	strb	r3, [r2, #7]
     b04:	e004      	b.n	b10 <rtc_calendar_enable_callback+0x18>
	} else {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM(1 << callback_type);
     b06:	2301      	movs	r3, #1
     b08:	1c1c      	adds	r4, r3, #0
     b0a:	408c      	lsls	r4, r1
     b0c:	4023      	ands	r3, r4
     b0e:	71d3      	strb	r3, [r2, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     b10:	7c43      	ldrb	r3, [r0, #17]
     b12:	2201      	movs	r2, #1
     b14:	408a      	lsls	r2, r1
     b16:	1c11      	adds	r1, r2, #0
     b18:	4319      	orrs	r1, r3
     b1a:	b2c9      	uxtb	r1, r1
     b1c:	7441      	strb	r1, [r0, #17]
}
     b1e:	bd10      	pop	{r4, pc}

00000b20 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     b20:	b510      	push	{r4, lr}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
     b22:	4b0e      	ldr	r3, [pc, #56]	; (b5c <RTC_Handler+0x3c>)
     b24:	681b      	ldr	r3, [r3, #0]

	Rtc *const rtc_module = module->hw;
     b26:	681c      	ldr	r4, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
     b28:	7c59      	ldrb	r1, [r3, #17]
			module->registered_callback;
     b2a:	7c1a      	ldrb	r2, [r3, #16]
	struct rtc_module *module = _rtc_instance[instance_index];

	Rtc *const rtc_module = module->hw;

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
     b2c:	1c08      	adds	r0, r1, #0
     b2e:	4010      	ands	r0, r2
			module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = (rtc_module->MODE2.INTFLAG.reg &
     b30:	7a21      	ldrb	r1, [r4, #8]
			rtc_module->MODE2.INTENSET.reg);
     b32:	79e2      	ldrb	r2, [r4, #7]
	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
			module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = (rtc_module->MODE2.INTFLAG.reg &
     b34:	400a      	ands	r2, r1
			rtc_module->MODE2.INTENSET.reg);

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
     b36:	09d1      	lsrs	r1, r2, #7
     b38:	d006      	beq.n	b48 <RTC_Handler+0x28>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
     b3a:	0781      	lsls	r1, r0, #30
     b3c:	d501      	bpl.n	b42 <RTC_Handler+0x22>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
     b3e:	68db      	ldr	r3, [r3, #12]
     b40:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
     b42:	2380      	movs	r3, #128	; 0x80
     b44:	7223      	strb	r3, [r4, #8]
     b46:	e007      	b.n	b58 <RTC_Handler+0x38>

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
     b48:	07d1      	lsls	r1, r2, #31
     b4a:	d505      	bpl.n	b58 <RTC_Handler+0x38>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
     b4c:	07c2      	lsls	r2, r0, #31
     b4e:	d501      	bpl.n	b54 <RTC_Handler+0x34>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
     b50:	689b      	ldr	r3, [r3, #8]
     b52:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
     b54:	2301      	movs	r3, #1
     b56:	7223      	strb	r3, [r4, #8]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
     b58:	bd10      	pop	{r4, pc}
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	20000be8 	.word	0x20000be8

00000b60 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     b60:	b538      	push	{r3, r4, r5, lr}
     b62:	1c15      	adds	r5, r2, #0
	/* Baud value variable */
	uint16_t baud_calculated = 0;

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     b64:	084c      	lsrs	r4, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b66:	2340      	movs	r3, #64	; 0x40
{
	/* Baud value variable */
	uint16_t baud_calculated = 0;

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     b68:	4284      	cmp	r4, r0
     b6a:	d30b      	bcc.n	b84 <_sercom_get_sync_baud_val+0x24>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;
     b6c:	0043      	lsls	r3, r0, #1
     b6e:	1c08      	adds	r0, r1, #0
     b70:	1c19      	adds	r1, r3, #0
     b72:	4b05      	ldr	r3, [pc, #20]	; (b88 <_sercom_get_sync_baud_val+0x28>)
     b74:	4798      	blx	r3
     b76:	3801      	subs	r0, #1
     b78:	b280      	uxth	r0, r0

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b7a:	2340      	movs	r3, #64	; 0x40
	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     b7c:	28ff      	cmp	r0, #255	; 0xff
     b7e:	d801      	bhi.n	b84 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     b80:	8028      	strh	r0, [r5, #0]
		return STATUS_OK;
     b82:	2300      	movs	r3, #0
	}
}
     b84:	1c18      	adds	r0, r3, #0
     b86:	bd38      	pop	{r3, r4, r5, pc}
     b88:	00002d15 	.word	0x00002d15
     b8c:	00000000 	.word	0x00000000

00000b90 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b92:	464f      	mov	r7, r9
     b94:	4646      	mov	r6, r8
     b96:	b4c0      	push	{r6, r7}
     b98:	4684      	mov	ip, r0
     b9a:	4688      	mov	r8, r1
     b9c:	1c16      	adds	r6, r2, #0
     b9e:	aa08      	add	r2, sp, #32
     ba0:	7810      	ldrb	r0, [r2, #0]
	uint64_t baud_calculated = 0;
	uint8_t baud_fp;
	uint32_t baud_int;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) >= peripheral_clock) {
     ba2:	4662      	mov	r2, ip
     ba4:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ba6:	2740      	movs	r7, #64	; 0x40
	uint64_t baud_calculated = 0;
	uint8_t baud_fp;
	uint32_t baud_int;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) >= peripheral_clock) {
     ba8:	428a      	cmp	r2, r1
     baa:	d244      	bcs.n	c36 <_sercom_get_async_baud_val+0xa6>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     bac:	2b00      	cmp	r3, #0
     bae:	d114      	bne.n	bda <_sercom_get_async_baud_val+0x4a>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
     bb0:	2100      	movs	r1, #0
     bb2:	4662      	mov	r2, ip
     bb4:	4c24      	ldr	r4, [pc, #144]	; (c48 <_sercom_get_async_baud_val+0xb8>)
     bb6:	47a0      	blx	r4
     bb8:	1c01      	adds	r1, r0, #0
     bba:	2000      	movs	r0, #0
     bbc:	4642      	mov	r2, r8
     bbe:	2300      	movs	r3, #0
     bc0:	4c22      	ldr	r4, [pc, #136]	; (c4c <_sercom_get_async_baud_val+0xbc>)
     bc2:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     bc4:	4b1f      	ldr	r3, [pc, #124]	; (c44 <_sercom_get_async_baud_val+0xb4>)
     bc6:	4a1e      	ldr	r2, [pc, #120]	; (c40 <_sercom_get_async_baud_val+0xb0>)
     bc8:	1c14      	adds	r4, r2, #0
     bca:	1c1d      	adds	r5, r3, #0
     bcc:	1a24      	subs	r4, r4, r0
     bce:	418d      	sbcs	r5, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     bd0:	0c22      	lsrs	r2, r4, #16
     bd2:	042b      	lsls	r3, r5, #16
     bd4:	1c14      	adds	r4, r2, #0
     bd6:	431c      	orrs	r4, r3
     bd8:	e02b      	b.n	c32 <_sercom_get_async_baud_val+0xa2>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     bda:	2400      	movs	r4, #0
     bdc:	2500      	movs	r5, #0
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     bde:	2b01      	cmp	r3, #1
     be0:	d127      	bne.n	c32 <_sercom_get_async_baud_val+0xa2>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
     be2:	0f4f      	lsrs	r7, r1, #29
     be4:	46b9      	mov	r9, r7
     be6:	00cb      	lsls	r3, r1, #3
     be8:	4698      	mov	r8, r3
     bea:	2100      	movs	r1, #0
     bec:	4662      	mov	r2, ip
     bee:	2300      	movs	r3, #0
     bf0:	4f15      	ldr	r7, [pc, #84]	; (c48 <_sercom_get_async_baud_val+0xb8>)
     bf2:	47b8      	blx	r7
     bf4:	1c02      	adds	r2, r0, #0
     bf6:	1c0b      	adds	r3, r1, #0
     bf8:	4640      	mov	r0, r8
     bfa:	4649      	mov	r1, r9
     bfc:	4f13      	ldr	r7, [pc, #76]	; (c4c <_sercom_get_async_baud_val+0xbc>)
     bfe:	47b8      	blx	r7
			baud_int = baud_int / BAUD_FP_MAX;
     c00:	08c2      	lsrs	r2, r0, #3
			if(baud_int < BAUD_INT_MAX) {
     c02:	4b13      	ldr	r3, [pc, #76]	; (c50 <_sercom_get_async_baud_val+0xc0>)
     c04:	429a      	cmp	r2, r3
     c06:	d910      	bls.n	c2a <_sercom_get_async_baud_val+0x9a>
     c08:	3801      	subs	r0, #1
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     c0a:	2301      	movs	r3, #1
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     c0c:	4910      	ldr	r1, [pc, #64]	; (c50 <_sercom_get_async_baud_val+0xc0>)
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
     c0e:	08c2      	lsrs	r2, r0, #3
			if(baud_int < BAUD_INT_MAX) {
     c10:	428a      	cmp	r2, r1
     c12:	d906      	bls.n	c22 <_sercom_get_async_baud_val+0x92>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     c14:	3301      	adds	r3, #1
     c16:	b2db      	uxtb	r3, r3
     c18:	3801      	subs	r0, #1
     c1a:	2b08      	cmp	r3, #8
     c1c:	d1f7      	bne.n	c0e <_sercom_get_async_baud_val+0x7e>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c1e:	2740      	movs	r7, #64	; 0x40
     c20:	e009      	b.n	c36 <_sercom_get_async_baud_val+0xa6>
     c22:	2740      	movs	r7, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     c24:	2b08      	cmp	r3, #8
     c26:	d101      	bne.n	c2c <_sercom_get_async_baud_val+0x9c>
     c28:	e005      	b.n	c36 <_sercom_get_async_baud_val+0xa6>
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     c2a:	2300      	movs	r3, #0
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     c2c:	035b      	lsls	r3, r3, #13
     c2e:	1c1c      	adds	r4, r3, #0
     c30:	4314      	orrs	r4, r2
	}

	*baudval = baud_calculated;
     c32:	8034      	strh	r4, [r6, #0]
	return STATUS_OK;
     c34:	2700      	movs	r7, #0
}
     c36:	1c38      	adds	r0, r7, #0
     c38:	bc0c      	pop	{r2, r3}
     c3a:	4690      	mov	r8, r2
     c3c:	4699      	mov	r9, r3
     c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c40:	00000000 	.word	0x00000000
     c44:	00000001 	.word	0x00000001
     c48:	00002df5 	.word	0x00002df5
     c4c:	00002db5 	.word	0x00002db5
     c50:	00001fff 	.word	0x00001fff
     c54:	46c0      	nop			; (mov r8, r8)
     c56:	46c0      	nop			; (mov r8, r8)

00000c58 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     c58:	b510      	push	{r4, lr}
     c5a:	b082      	sub	sp, #8
     c5c:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     c5e:	4b0f      	ldr	r3, [pc, #60]	; (c9c <sercom_set_gclk_generator+0x44>)
     c60:	781b      	ldrb	r3, [r3, #0]
     c62:	2b00      	cmp	r3, #0
     c64:	d001      	beq.n	c6a <sercom_set_gclk_generator+0x12>
     c66:	2900      	cmp	r1, #0
     c68:	d00d      	beq.n	c86 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     c6a:	a901      	add	r1, sp, #4
     c6c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     c6e:	200c      	movs	r0, #12
     c70:	4b0b      	ldr	r3, [pc, #44]	; (ca0 <sercom_set_gclk_generator+0x48>)
     c72:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     c74:	200c      	movs	r0, #12
     c76:	4b0b      	ldr	r3, [pc, #44]	; (ca4 <sercom_set_gclk_generator+0x4c>)
     c78:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     c7a:	4b08      	ldr	r3, [pc, #32]	; (c9c <sercom_set_gclk_generator+0x44>)
     c7c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     c7e:	2201      	movs	r2, #1
     c80:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     c82:	2000      	movs	r0, #0
     c84:	e007      	b.n	c96 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     c86:	4b05      	ldr	r3, [pc, #20]	; (c9c <sercom_set_gclk_generator+0x44>)
     c88:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     c8a:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     c8c:	1b14      	subs	r4, r2, r4
     c8e:	1e62      	subs	r2, r4, #1
     c90:	4194      	sbcs	r4, r2
     c92:	4264      	negs	r4, r4
     c94:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     c96:	b002      	add	sp, #8
     c98:	bd10      	pop	{r4, pc}
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	20000af4 	.word	0x20000af4
     ca0:	000027a9 	.word	0x000027a9
     ca4:	0000271d 	.word	0x0000271d

00000ca8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     ca8:	4b40      	ldr	r3, [pc, #256]	; (dac <_sercom_get_default_pad+0x104>)
     caa:	4298      	cmp	r0, r3
     cac:	d030      	beq.n	d10 <_sercom_get_default_pad+0x68>
     cae:	d806      	bhi.n	cbe <_sercom_get_default_pad+0x16>
     cb0:	4b3f      	ldr	r3, [pc, #252]	; (db0 <_sercom_get_default_pad+0x108>)
     cb2:	4298      	cmp	r0, r3
     cb4:	d00d      	beq.n	cd2 <_sercom_get_default_pad+0x2a>
     cb6:	4b3f      	ldr	r3, [pc, #252]	; (db4 <_sercom_get_default_pad+0x10c>)
     cb8:	4298      	cmp	r0, r3
     cba:	d169      	bne.n	d90 <_sercom_get_default_pad+0xe8>
     cbc:	e019      	b.n	cf2 <_sercom_get_default_pad+0x4a>
     cbe:	4b3e      	ldr	r3, [pc, #248]	; (db8 <_sercom_get_default_pad+0x110>)
     cc0:	4298      	cmp	r0, r3
     cc2:	d045      	beq.n	d50 <_sercom_get_default_pad+0xa8>
     cc4:	4b3d      	ldr	r3, [pc, #244]	; (dbc <_sercom_get_default_pad+0x114>)
     cc6:	4298      	cmp	r0, r3
     cc8:	d052      	beq.n	d70 <_sercom_get_default_pad+0xc8>
     cca:	4b3d      	ldr	r3, [pc, #244]	; (dc0 <_sercom_get_default_pad+0x118>)
     ccc:	4298      	cmp	r0, r3
     cce:	d15f      	bne.n	d90 <_sercom_get_default_pad+0xe8>
     cd0:	e02e      	b.n	d30 <_sercom_get_default_pad+0x88>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cd2:	2901      	cmp	r1, #1
     cd4:	d05e      	beq.n	d94 <_sercom_get_default_pad+0xec>
     cd6:	2900      	cmp	r1, #0
     cd8:	d005      	beq.n	ce6 <_sercom_get_default_pad+0x3e>
     cda:	2902      	cmp	r1, #2
     cdc:	d005      	beq.n	cea <_sercom_get_default_pad+0x42>
	}

	Assert(false);
	return 0;
     cde:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ce0:	2903      	cmp	r1, #3
     ce2:	d162      	bne.n	daa <_sercom_get_default_pad+0x102>
     ce4:	e003      	b.n	cee <_sercom_get_default_pad+0x46>
     ce6:	4837      	ldr	r0, [pc, #220]	; (dc4 <_sercom_get_default_pad+0x11c>)
     ce8:	e05f      	b.n	daa <_sercom_get_default_pad+0x102>
     cea:	4837      	ldr	r0, [pc, #220]	; (dc8 <_sercom_get_default_pad+0x120>)
     cec:	e05d      	b.n	daa <_sercom_get_default_pad+0x102>
     cee:	4837      	ldr	r0, [pc, #220]	; (dcc <_sercom_get_default_pad+0x124>)
     cf0:	e05b      	b.n	daa <_sercom_get_default_pad+0x102>
     cf2:	2901      	cmp	r1, #1
     cf4:	d050      	beq.n	d98 <_sercom_get_default_pad+0xf0>
     cf6:	2003      	movs	r0, #3
     cf8:	2900      	cmp	r1, #0
     cfa:	d056      	beq.n	daa <_sercom_get_default_pad+0x102>
     cfc:	2902      	cmp	r1, #2
     cfe:	d003      	beq.n	d08 <_sercom_get_default_pad+0x60>
     d00:	2903      	cmp	r1, #3
     d02:	d003      	beq.n	d0c <_sercom_get_default_pad+0x64>
	}

	Assert(false);
	return 0;
     d04:	2000      	movs	r0, #0
     d06:	e050      	b.n	daa <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d08:	4831      	ldr	r0, [pc, #196]	; (dd0 <_sercom_get_default_pad+0x128>)
     d0a:	e04e      	b.n	daa <_sercom_get_default_pad+0x102>
     d0c:	4831      	ldr	r0, [pc, #196]	; (dd4 <_sercom_get_default_pad+0x12c>)
     d0e:	e04c      	b.n	daa <_sercom_get_default_pad+0x102>
     d10:	2901      	cmp	r1, #1
     d12:	d043      	beq.n	d9c <_sercom_get_default_pad+0xf4>
     d14:	2900      	cmp	r1, #0
     d16:	d005      	beq.n	d24 <_sercom_get_default_pad+0x7c>
     d18:	2902      	cmp	r1, #2
     d1a:	d005      	beq.n	d28 <_sercom_get_default_pad+0x80>
	}

	Assert(false);
	return 0;
     d1c:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d1e:	2903      	cmp	r1, #3
     d20:	d143      	bne.n	daa <_sercom_get_default_pad+0x102>
     d22:	e003      	b.n	d2c <_sercom_get_default_pad+0x84>
     d24:	482c      	ldr	r0, [pc, #176]	; (dd8 <_sercom_get_default_pad+0x130>)
     d26:	e040      	b.n	daa <_sercom_get_default_pad+0x102>
     d28:	482c      	ldr	r0, [pc, #176]	; (ddc <_sercom_get_default_pad+0x134>)
     d2a:	e03e      	b.n	daa <_sercom_get_default_pad+0x102>
     d2c:	482c      	ldr	r0, [pc, #176]	; (de0 <_sercom_get_default_pad+0x138>)
     d2e:	e03c      	b.n	daa <_sercom_get_default_pad+0x102>
     d30:	2901      	cmp	r1, #1
     d32:	d035      	beq.n	da0 <_sercom_get_default_pad+0xf8>
     d34:	2900      	cmp	r1, #0
     d36:	d005      	beq.n	d44 <_sercom_get_default_pad+0x9c>
     d38:	2902      	cmp	r1, #2
     d3a:	d005      	beq.n	d48 <_sercom_get_default_pad+0xa0>
	}

	Assert(false);
	return 0;
     d3c:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d3e:	2903      	cmp	r1, #3
     d40:	d133      	bne.n	daa <_sercom_get_default_pad+0x102>
     d42:	e003      	b.n	d4c <_sercom_get_default_pad+0xa4>
     d44:	4827      	ldr	r0, [pc, #156]	; (de4 <_sercom_get_default_pad+0x13c>)
     d46:	e030      	b.n	daa <_sercom_get_default_pad+0x102>
     d48:	4827      	ldr	r0, [pc, #156]	; (de8 <_sercom_get_default_pad+0x140>)
     d4a:	e02e      	b.n	daa <_sercom_get_default_pad+0x102>
     d4c:	4827      	ldr	r0, [pc, #156]	; (dec <_sercom_get_default_pad+0x144>)
     d4e:	e02c      	b.n	daa <_sercom_get_default_pad+0x102>
     d50:	2901      	cmp	r1, #1
     d52:	d027      	beq.n	da4 <_sercom_get_default_pad+0xfc>
     d54:	2900      	cmp	r1, #0
     d56:	d005      	beq.n	d64 <_sercom_get_default_pad+0xbc>
     d58:	2902      	cmp	r1, #2
     d5a:	d005      	beq.n	d68 <_sercom_get_default_pad+0xc0>
	}

	Assert(false);
	return 0;
     d5c:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d5e:	2903      	cmp	r1, #3
     d60:	d123      	bne.n	daa <_sercom_get_default_pad+0x102>
     d62:	e003      	b.n	d6c <_sercom_get_default_pad+0xc4>
     d64:	4822      	ldr	r0, [pc, #136]	; (df0 <_sercom_get_default_pad+0x148>)
     d66:	e020      	b.n	daa <_sercom_get_default_pad+0x102>
     d68:	4822      	ldr	r0, [pc, #136]	; (df4 <_sercom_get_default_pad+0x14c>)
     d6a:	e01e      	b.n	daa <_sercom_get_default_pad+0x102>
     d6c:	4822      	ldr	r0, [pc, #136]	; (df8 <_sercom_get_default_pad+0x150>)
     d6e:	e01c      	b.n	daa <_sercom_get_default_pad+0x102>
     d70:	2901      	cmp	r1, #1
     d72:	d019      	beq.n	da8 <_sercom_get_default_pad+0x100>
     d74:	2900      	cmp	r1, #0
     d76:	d005      	beq.n	d84 <_sercom_get_default_pad+0xdc>
     d78:	2902      	cmp	r1, #2
     d7a:	d005      	beq.n	d88 <_sercom_get_default_pad+0xe0>
	}

	Assert(false);
	return 0;
     d7c:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d7e:	2903      	cmp	r1, #3
     d80:	d113      	bne.n	daa <_sercom_get_default_pad+0x102>
     d82:	e003      	b.n	d8c <_sercom_get_default_pad+0xe4>
     d84:	481d      	ldr	r0, [pc, #116]	; (dfc <_sercom_get_default_pad+0x154>)
     d86:	e010      	b.n	daa <_sercom_get_default_pad+0x102>
     d88:	481d      	ldr	r0, [pc, #116]	; (e00 <_sercom_get_default_pad+0x158>)
     d8a:	e00e      	b.n	daa <_sercom_get_default_pad+0x102>
     d8c:	481d      	ldr	r0, [pc, #116]	; (e04 <_sercom_get_default_pad+0x15c>)
     d8e:	e00c      	b.n	daa <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     d90:	2000      	movs	r0, #0
     d92:	e00a      	b.n	daa <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d94:	481c      	ldr	r0, [pc, #112]	; (e08 <_sercom_get_default_pad+0x160>)
     d96:	e008      	b.n	daa <_sercom_get_default_pad+0x102>
     d98:	481c      	ldr	r0, [pc, #112]	; (e0c <_sercom_get_default_pad+0x164>)
     d9a:	e006      	b.n	daa <_sercom_get_default_pad+0x102>
     d9c:	481c      	ldr	r0, [pc, #112]	; (e10 <_sercom_get_default_pad+0x168>)
     d9e:	e004      	b.n	daa <_sercom_get_default_pad+0x102>
     da0:	481c      	ldr	r0, [pc, #112]	; (e14 <_sercom_get_default_pad+0x16c>)
     da2:	e002      	b.n	daa <_sercom_get_default_pad+0x102>
     da4:	481c      	ldr	r0, [pc, #112]	; (e18 <_sercom_get_default_pad+0x170>)
     da6:	e000      	b.n	daa <_sercom_get_default_pad+0x102>
     da8:	481c      	ldr	r0, [pc, #112]	; (e1c <_sercom_get_default_pad+0x174>)
	}

	Assert(false);
	return 0;
}
     daa:	4770      	bx	lr
     dac:	42001000 	.word	0x42001000
     db0:	42000800 	.word	0x42000800
     db4:	42000c00 	.word	0x42000c00
     db8:	42001800 	.word	0x42001800
     dbc:	42001c00 	.word	0x42001c00
     dc0:	42001400 	.word	0x42001400
     dc4:	00040003 	.word	0x00040003
     dc8:	00060003 	.word	0x00060003
     dcc:	00070003 	.word	0x00070003
     dd0:	001e0003 	.word	0x001e0003
     dd4:	001f0003 	.word	0x001f0003
     dd8:	00080003 	.word	0x00080003
     ddc:	000a0003 	.word	0x000a0003
     de0:	000b0003 	.word	0x000b0003
     de4:	00100003 	.word	0x00100003
     de8:	00120003 	.word	0x00120003
     dec:	00130003 	.word	0x00130003
     df0:	000c0003 	.word	0x000c0003
     df4:	000e0003 	.word	0x000e0003
     df8:	000f0003 	.word	0x000f0003
     dfc:	00160003 	.word	0x00160003
     e00:	00180003 	.word	0x00180003
     e04:	00190003 	.word	0x00190003
     e08:	00050003 	.word	0x00050003
     e0c:	00010003 	.word	0x00010003
     e10:	00090003 	.word	0x00090003
     e14:	00110003 	.word	0x00110003
     e18:	000d0003 	.word	0x000d0003
     e1c:	00170003 	.word	0x00170003

00000e20 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     e20:	4770      	bx	lr
     e22:	46c0      	nop			; (mov r8, r8)

00000e24 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     e24:	b570      	push	{r4, r5, r6, lr}
     e26:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     e28:	4a0b      	ldr	r2, [pc, #44]	; (e58 <_sercom_get_sercom_inst_index+0x34>)
     e2a:	466b      	mov	r3, sp
     e2c:	ca70      	ldmia	r2!, {r4, r5, r6}
     e2e:	c370      	stmia	r3!, {r4, r5, r6}
     e30:	ca32      	ldmia	r2!, {r1, r4, r5}
     e32:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     e34:	9e00      	ldr	r6, [sp, #0]
     e36:	4286      	cmp	r6, r0
     e38:	d005      	beq.n	e46 <_sercom_get_sercom_inst_index+0x22>
     e3a:	aa01      	add	r2, sp, #4
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e3c:	2301      	movs	r3, #1
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     e3e:	ca02      	ldmia	r2!, {r1}
     e40:	4281      	cmp	r1, r0
     e42:	d103      	bne.n	e4c <_sercom_get_sercom_inst_index+0x28>
     e44:	e000      	b.n	e48 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e46:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     e48:	b2d8      	uxtb	r0, r3
     e4a:	e003      	b.n	e54 <_sercom_get_sercom_inst_index+0x30>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e4c:	3301      	adds	r3, #1
     e4e:	2b06      	cmp	r3, #6
     e50:	d1f5      	bne.n	e3e <_sercom_get_sercom_inst_index+0x1a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     e52:	2000      	movs	r0, #0
}
     e54:	b006      	add	sp, #24
     e56:	bd70      	pop	{r4, r5, r6, pc}
     e58:	000099bc 	.word	0x000099bc

00000e5c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     e5e:	4b0a      	ldr	r3, [pc, #40]	; (e88 <_sercom_set_handler+0x2c>)
     e60:	781b      	ldrb	r3, [r3, #0]
     e62:	2b00      	cmp	r3, #0
     e64:	d10c      	bne.n	e80 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e66:	4f09      	ldr	r7, [pc, #36]	; (e8c <_sercom_set_handler+0x30>)
     e68:	4e09      	ldr	r6, [pc, #36]	; (e90 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     e6a:	4d0a      	ldr	r5, [pc, #40]	; (e94 <_sercom_set_handler+0x38>)
     e6c:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e6e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     e70:	195a      	adds	r2, r3, r5
     e72:	6014      	str	r4, [r2, #0]
     e74:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e76:	2b18      	cmp	r3, #24
     e78:	d1f9      	bne.n	e6e <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     e7a:	2201      	movs	r2, #1
     e7c:	4b02      	ldr	r3, [pc, #8]	; (e88 <_sercom_set_handler+0x2c>)
     e7e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     e80:	0080      	lsls	r0, r0, #2
     e82:	4b02      	ldr	r3, [pc, #8]	; (e8c <_sercom_set_handler+0x30>)
     e84:	50c1      	str	r1, [r0, r3]
}
     e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e88:	20000af8 	.word	0x20000af8
     e8c:	20000afc 	.word	0x20000afc
     e90:	00000e21 	.word	0x00000e21
     e94:	20000bec 	.word	0x20000bec

00000e98 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     e98:	b510      	push	{r4, lr}
     e9a:	b082      	sub	sp, #8
     e9c:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     e9e:	4668      	mov	r0, sp
     ea0:	4905      	ldr	r1, [pc, #20]	; (eb8 <_sercom_get_interrupt_vector+0x20>)
     ea2:	3118      	adds	r1, #24
     ea4:	2206      	movs	r2, #6
     ea6:	4b05      	ldr	r3, [pc, #20]	; (ebc <_sercom_get_interrupt_vector+0x24>)
     ea8:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     eaa:	1c20      	adds	r0, r4, #0
     eac:	4b04      	ldr	r3, [pc, #16]	; (ec0 <_sercom_get_interrupt_vector+0x28>)
     eae:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     eb0:	466b      	mov	r3, sp
     eb2:	5618      	ldrsb	r0, [r3, r0]
}
     eb4:	b002      	add	sp, #8
     eb6:	bd10      	pop	{r4, pc}
     eb8:	000099bc 	.word	0x000099bc
     ebc:	00003759 	.word	0x00003759
     ec0:	00000e25 	.word	0x00000e25

00000ec4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     ec4:	b508      	push	{r3, lr}
     ec6:	4b02      	ldr	r3, [pc, #8]	; (ed0 <SERCOM0_Handler+0xc>)
     ec8:	681b      	ldr	r3, [r3, #0]
     eca:	2000      	movs	r0, #0
     ecc:	4798      	blx	r3
     ece:	bd08      	pop	{r3, pc}
     ed0:	20000afc 	.word	0x20000afc

00000ed4 <SERCOM1_Handler>:
     ed4:	b508      	push	{r3, lr}
     ed6:	4b02      	ldr	r3, [pc, #8]	; (ee0 <SERCOM1_Handler+0xc>)
     ed8:	685b      	ldr	r3, [r3, #4]
     eda:	2001      	movs	r0, #1
     edc:	4798      	blx	r3
     ede:	bd08      	pop	{r3, pc}
     ee0:	20000afc 	.word	0x20000afc

00000ee4 <SERCOM2_Handler>:
     ee4:	b508      	push	{r3, lr}
     ee6:	4b02      	ldr	r3, [pc, #8]	; (ef0 <SERCOM2_Handler+0xc>)
     ee8:	689b      	ldr	r3, [r3, #8]
     eea:	2002      	movs	r0, #2
     eec:	4798      	blx	r3
     eee:	bd08      	pop	{r3, pc}
     ef0:	20000afc 	.word	0x20000afc

00000ef4 <SERCOM3_Handler>:
     ef4:	b508      	push	{r3, lr}
     ef6:	4b02      	ldr	r3, [pc, #8]	; (f00 <SERCOM3_Handler+0xc>)
     ef8:	68db      	ldr	r3, [r3, #12]
     efa:	2003      	movs	r0, #3
     efc:	4798      	blx	r3
     efe:	bd08      	pop	{r3, pc}
     f00:	20000afc 	.word	0x20000afc

00000f04 <SERCOM4_Handler>:
     f04:	b508      	push	{r3, lr}
     f06:	4b02      	ldr	r3, [pc, #8]	; (f10 <SERCOM4_Handler+0xc>)
     f08:	691b      	ldr	r3, [r3, #16]
     f0a:	2004      	movs	r0, #4
     f0c:	4798      	blx	r3
     f0e:	bd08      	pop	{r3, pc}
     f10:	20000afc 	.word	0x20000afc

00000f14 <SERCOM5_Handler>:
     f14:	b508      	push	{r3, lr}
     f16:	4b02      	ldr	r3, [pc, #8]	; (f20 <SERCOM5_Handler+0xc>)
     f18:	695b      	ldr	r3, [r3, #20]
     f1a:	2005      	movs	r0, #5
     f1c:	4798      	blx	r3
     f1e:	bd08      	pop	{r3, pc}
     f20:	20000afc 	.word	0x20000afc

00000f24 <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f24:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     f26:	2202      	movs	r2, #2
     f28:	739a      	strb	r2, [r3, #14]
}
     f2a:	4770      	bx	lr

00000f2c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f2e:	4657      	mov	r7, sl
     f30:	464e      	mov	r6, r9
     f32:	4645      	mov	r5, r8
     f34:	b4e0      	push	{r5, r6, r7}
     f36:	b088      	sub	sp, #32
     f38:	1c05      	adds	r5, r0, #0
     f3a:	1c0c      	adds	r4, r1, #0
     f3c:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     f3e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     f40:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     f42:	201c      	movs	r0, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     f44:	0799      	lsls	r1, r3, #30
     f46:	d500      	bpl.n	f4a <spi_init+0x1e>
     f48:	e0cd      	b.n	10e6 <spi_init+0x1ba>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     f4a:	6823      	ldr	r3, [r4, #0]
		return STATUS_BUSY;
     f4c:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     f4e:	07da      	lsls	r2, r3, #31
     f50:	d500      	bpl.n	f54 <spi_init+0x28>
     f52:	e0c8      	b.n	10e6 <spi_init+0x1ba>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f54:	1c20      	adds	r0, r4, #0
     f56:	4b67      	ldr	r3, [pc, #412]	; (10f4 <spi_init+0x1c8>)
     f58:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     f5a:	4b67      	ldr	r3, [pc, #412]	; (10f8 <spi_init+0x1cc>)
     f5c:	6a19      	ldr	r1, [r3, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     f5e:	1c82      	adds	r2, r0, #2
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     f60:	2701      	movs	r7, #1
     f62:	4097      	lsls	r7, r2
     f64:	1c3a      	adds	r2, r7, #0
     f66:	430a      	orrs	r2, r1
     f68:	621a      	str	r2, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     f6a:	a907      	add	r1, sp, #28
     f6c:	2720      	movs	r7, #32
     f6e:	5df3      	ldrb	r3, [r6, r7]
     f70:	700b      	strb	r3, [r1, #0]
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f72:	300d      	adds	r0, #13

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f74:	b2c0      	uxtb	r0, r0
     f76:	4680      	mov	r8, r0
     f78:	4b60      	ldr	r3, [pc, #384]	; (10fc <spi_init+0x1d0>)
     f7a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     f7c:	4640      	mov	r0, r8
     f7e:	4b60      	ldr	r3, [pc, #384]	; (1100 <spi_init+0x1d4>)
     f80:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     f82:	5df0      	ldrb	r0, [r6, r7]
     f84:	2100      	movs	r1, #0
     f86:	4b5f      	ldr	r3, [pc, #380]	; (1104 <spi_init+0x1d8>)
     f88:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     f8a:	7833      	ldrb	r3, [r6, #0]
     f8c:	2b01      	cmp	r3, #1
     f8e:	d103      	bne.n	f98 <spi_init+0x6c>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
     f90:	6822      	ldr	r2, [r4, #0]
     f92:	230c      	movs	r3, #12
     f94:	4313      	orrs	r3, r2
     f96:	6023      	str	r3, [r4, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     f98:	7833      	ldrb	r3, [r6, #0]
     f9a:	2b00      	cmp	r3, #0
     f9c:	d16f      	bne.n	107e <spi_init+0x152>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_SLAVE;
     f9e:	6822      	ldr	r2, [r4, #0]
     fa0:	2308      	movs	r3, #8
     fa2:	4313      	orrs	r3, r2
     fa4:	6023      	str	r3, [r4, #0]
     fa6:	e06a      	b.n	107e <spi_init+0x152>
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     fa8:	4653      	mov	r3, sl
     faa:	3304      	adds	r3, #4
     fac:	469a      	mov	sl, r3
     fae:	3b04      	subs	r3, #4
     fb0:	cb01      	ldmia	r3!, {r0}

		if (current_pinmux == PINMUX_DEFAULT) {
     fb2:	2800      	cmp	r0, #0
     fb4:	d103      	bne.n	fbe <spi_init+0x92>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     fb6:	4648      	mov	r0, r9
     fb8:	1c39      	adds	r1, r7, #0
     fba:	4a53      	ldr	r2, [pc, #332]	; (1108 <spi_init+0x1dc>)
     fbc:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     fbe:	1c43      	adds	r3, r0, #1
     fc0:	d005      	beq.n	fce <spi_init+0xa2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     fc2:	7020      	strb	r0, [r4, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     fc4:	0c00      	lsrs	r0, r0, #16
     fc6:	b2c0      	uxtb	r0, r0
     fc8:	1c21      	adds	r1, r4, #0
     fca:	4a50      	ldr	r2, [pc, #320]	; (110c <spi_init+0x1e0>)
     fcc:	4790      	blx	r2
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     fce:	1c7b      	adds	r3, r7, #1
     fd0:	b2df      	uxtb	r7, r3
     fd2:	2f04      	cmp	r7, #4
     fd4:	d1e8      	bne.n	fa8 <spi_init+0x7c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     fd6:	7833      	ldrb	r3, [r6, #0]
     fd8:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     fda:	7c33      	ldrb	r3, [r6, #16]
     fdc:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     fde:	7cb3      	ldrb	r3, [r6, #18]
     fe0:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     fe2:	2200      	movs	r2, #0
     fe4:	466b      	mov	r3, sp
     fe6:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     fe8:	7833      	ldrb	r3, [r6, #0]
     fea:	2b01      	cmp	r3, #1
     fec:	d115      	bne.n	101a <spi_init+0xee>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     fee:	6828      	ldr	r0, [r5, #0]
     ff0:	4b40      	ldr	r3, [pc, #256]	; (10f4 <spi_init+0x1c8>)
     ff2:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ff4:	300d      	adds	r0, #13
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     ff6:	b2c0      	uxtb	r0, r0
     ff8:	4b45      	ldr	r3, [pc, #276]	; (1110 <spi_init+0x1e4>)
     ffa:	4798      	blx	r3
     ffc:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     ffe:	6970      	ldr	r0, [r6, #20]
    1000:	466a      	mov	r2, sp
    1002:	3206      	adds	r2, #6
    1004:	4b43      	ldr	r3, [pc, #268]	; (1114 <spi_init+0x1e8>)
    1006:	4798      	blx	r3
    1008:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    100a:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    100c:	2b00      	cmp	r3, #0
    100e:	d16a      	bne.n	10e6 <spi_init+0x1ba>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    1010:	466b      	mov	r3, sp
    1012:	3306      	adds	r3, #6
    1014:	781b      	ldrb	r3, [r3, #0]
    1016:	4648      	mov	r0, r9
    1018:	7283      	strb	r3, [r0, #10]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    101a:	7833      	ldrb	r3, [r6, #0]
    101c:	2b00      	cmp	r3, #0
    101e:	d110      	bne.n	1042 <spi_init+0x116>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    1020:	6971      	ldr	r1, [r6, #20]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    1022:	8b33      	ldrh	r3, [r6, #24]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    1024:	464a      	mov	r2, r9
    1026:	6950      	ldr	r0, [r2, #20]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1028:	7ef4      	ldrb	r4, [r6, #27]
    102a:	0424      	lsls	r4, r4, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    102c:	7eb2      	ldrb	r2, [r6, #26]
    102e:	4322      	orrs	r2, r4

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    1030:	4302      	orrs	r2, r0
    1032:	4648      	mov	r0, r9
    1034:	6142      	str	r2, [r0, #20]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    1036:	7f32      	ldrb	r2, [r6, #28]
    1038:	2a00      	cmp	r2, #0
    103a:	d004      	beq.n	1046 <spi_init+0x11a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    103c:	2240      	movs	r2, #64	; 0x40
    103e:	4313      	orrs	r3, r2
    1040:	e001      	b.n	1046 <spi_init+0x11a>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    1042:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    1044:	2100      	movs	r1, #0
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    1046:	68b2      	ldr	r2, [r6, #8]
    1048:	6870      	ldr	r0, [r6, #4]
    104a:	4302      	orrs	r2, r0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    104c:	68f0      	ldr	r0, [r6, #12]
    104e:	4302      	orrs	r2, r0

	/* Set mux setting */
	ctrla |= config->mux_setting;
    1050:	430a      	orrs	r2, r1

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1052:	7c31      	ldrb	r1, [r6, #16]
    1054:	430b      	orrs	r3, r1

	if (config->run_in_standby) {
    1056:	7c71      	ldrb	r1, [r6, #17]
    1058:	2900      	cmp	r1, #0
    105a:	d001      	beq.n	1060 <spi_init+0x134>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    105c:	2180      	movs	r1, #128	; 0x80
    105e:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    1060:	7cb1      	ldrb	r1, [r6, #18]
    1062:	2900      	cmp	r1, #0
    1064:	d002      	beq.n	106c <spi_init+0x140>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1066:	2180      	movs	r1, #128	; 0x80
    1068:	0289      	lsls	r1, r1, #10
    106a:	430b      	orrs	r3, r1
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    106c:	4648      	mov	r0, r9
    106e:	6801      	ldr	r1, [r0, #0]
    1070:	430a      	orrs	r2, r1
    1072:	6002      	str	r2, [r0, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1074:	6842      	ldr	r2, [r0, #4]
    1076:	4313      	orrs	r3, r2
    1078:	6043      	str	r3, [r0, #4]

	return STATUS_OK;
    107a:	2000      	movs	r0, #0
    107c:	e033      	b.n	10e6 <spi_init+0x1ba>
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    107e:	2300      	movs	r3, #0
    1080:	60eb      	str	r3, [r5, #12]
    1082:	612b      	str	r3, [r5, #16]
    1084:	616b      	str	r3, [r5, #20]
    1086:	61ab      	str	r3, [r5, #24]
    1088:	61eb      	str	r3, [r5, #28]
	}
	module->tx_buffer_ptr              = NULL;
    108a:	626b      	str	r3, [r5, #36]	; 0x24
	module->rx_buffer_ptr              = NULL;
    108c:	622b      	str	r3, [r5, #32]
	module->remaining_tx_buffer_length = 0x0000;
    108e:	2400      	movs	r4, #0
    1090:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
    1092:	852b      	strh	r3, [r5, #40]	; 0x28
	module->registered_callback        = 0x00;
    1094:	232e      	movs	r3, #46	; 0x2e
    1096:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    1098:	232f      	movs	r3, #47	; 0x2f
    109a:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    109c:	2330      	movs	r3, #48	; 0x30
    109e:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    10a0:	2303      	movs	r3, #3
    10a2:	722b      	strb	r3, [r5, #8]
	module->locked                     = false;
    10a4:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    10a6:	6828      	ldr	r0, [r5, #0]
    10a8:	4b12      	ldr	r3, [pc, #72]	; (10f4 <spi_init+0x1c8>)
    10aa:	4798      	blx	r3
    10ac:	1c07      	adds	r7, r0, #0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    10ae:	491a      	ldr	r1, [pc, #104]	; (1118 <spi_init+0x1ec>)
    10b0:	4b1a      	ldr	r3, [pc, #104]	; (111c <spi_init+0x1f0>)
    10b2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    10b4:	00bf      	lsls	r7, r7, #2
    10b6:	4b1a      	ldr	r3, [pc, #104]	; (1120 <spi_init+0x1f4>)
    10b8:	50fd      	str	r5, [r7, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    10ba:	6829      	ldr	r1, [r5, #0]
    10bc:	4689      	mov	r9, r1
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    10be:	ab02      	add	r3, sp, #8
    10c0:	2280      	movs	r2, #128	; 0x80
    10c2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    10c4:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    10c6:	2201      	movs	r2, #1
    10c8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    10ca:	70dc      	strb	r4, [r3, #3]

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    10cc:	6a72      	ldr	r2, [r6, #36]	; 0x24
    10ce:	9203      	str	r2, [sp, #12]
    10d0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    10d2:	9304      	str	r3, [sp, #16]
    10d4:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    10d6:	9005      	str	r0, [sp, #20]
    10d8:	6b31      	ldr	r1, [r6, #48]	; 0x30
    10da:	9106      	str	r1, [sp, #24]
    10dc:	aa03      	add	r2, sp, #12
    10de:	4692      	mov	sl, r2
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    10e0:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    10e2:	ac02      	add	r4, sp, #8
    10e4:	e760      	b.n	fa8 <spi_init+0x7c>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    10e6:	b008      	add	sp, #32
    10e8:	bc1c      	pop	{r2, r3, r4}
    10ea:	4690      	mov	r8, r2
    10ec:	4699      	mov	r9, r3
    10ee:	46a2      	mov	sl, r4
    10f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	00000e25 	.word	0x00000e25
    10f8:	40000400 	.word	0x40000400
    10fc:	000027a9 	.word	0x000027a9
    1100:	0000271d 	.word	0x0000271d
    1104:	00000c59 	.word	0x00000c59
    1108:	00000ca9 	.word	0x00000ca9
    110c:	00002881 	.word	0x00002881
    1110:	000027c5 	.word	0x000027c5
    1114:	00000b61 	.word	0x00000b61
    1118:	00001445 	.word	0x00001445
    111c:	00000e5d 	.word	0x00000e5d
    1120:	20000bec 	.word	0x20000bec

00001124 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1124:	b530      	push	{r4, r5, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1126:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1128:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    112a:	2c01      	cmp	r4, #1
    112c:	d169      	bne.n	1202 <spi_select_slave+0xde>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
#  endif
	{
		if (select) {
    112e:	2a00      	cmp	r2, #0
    1130:	d058      	beq.n	11e4 <spi_select_slave+0xc0>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    1132:	784b      	ldrb	r3, [r1, #1]
    1134:	2b00      	cmp	r3, #0
    1136:	d045      	beq.n	11c4 <spi_select_slave+0xa0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1138:	6802      	ldr	r2, [r0, #0]
    113a:	7b93      	ldrb	r3, [r2, #14]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    113c:	07dc      	lsls	r4, r3, #31
    113e:	d40f      	bmi.n	1160 <spi_select_slave+0x3c>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    1140:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1142:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1144:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1146:	2900      	cmp	r1, #0
    1148:	d103      	bne.n	1152 <spi_select_slave+0x2e>
		return &(ports[port_index]->Group[group_index]);
    114a:	095a      	lsrs	r2, r3, #5
    114c:	01d2      	lsls	r2, r2, #7
    114e:	4d2e      	ldr	r5, [pc, #184]	; (1208 <spi_select_slave+0xe4>)
    1150:	1952      	adds	r2, r2, r5
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1152:	211f      	movs	r1, #31
    1154:	400b      	ands	r3, r1
    1156:	2101      	movs	r1, #1
    1158:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    115a:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    115c:	2305      	movs	r3, #5
    115e:	e050      	b.n	1202 <spi_select_slave+0xde>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1160:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1162:	09da      	lsrs	r2, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1164:	2400      	movs	r4, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1166:	2a00      	cmp	r2, #0
    1168:	d103      	bne.n	1172 <spi_select_slave+0x4e>
		return &(ports[port_index]->Group[group_index]);
    116a:	095c      	lsrs	r4, r3, #5
    116c:	01e4      	lsls	r4, r4, #7
    116e:	4a26      	ldr	r2, [pc, #152]	; (1208 <spi_select_slave+0xe4>)
    1170:	18a4      	adds	r4, r4, r2
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1172:	221f      	movs	r2, #31
    1174:	4013      	ands	r3, r2
    1176:	2201      	movs	r2, #1
    1178:	1c15      	adds	r5, r2, #0
    117a:	409d      	lsls	r5, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    117c:	6165      	str	r5, [r4, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
    117e:	788c      	ldrb	r4, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1180:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1182:	7b99      	ldrb	r1, [r3, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1184:	420a      	tst	r2, r1
    1186:	d000      	beq.n	118a <spi_select_slave+0x66>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1188:	831c      	strh	r4, [r3, #24]

				if (!(module->receiver_enabled)) {
    118a:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    118c:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    118e:	2a00      	cmp	r2, #0
    1190:	d137      	bne.n	1202 <spi_select_slave+0xde>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1192:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1194:	2104      	movs	r1, #4
    1196:	7b93      	ldrb	r3, [r2, #14]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    1198:	4219      	tst	r1, r3
    119a:	d0fc      	beq.n	1196 <spi_select_slave+0x72>
    119c:	7b91      	ldrb	r1, [r2, #14]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    119e:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    11a0:	074c      	lsls	r4, r1, #29
    11a2:	d52e      	bpl.n	1202 <spi_select_slave+0xde>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    11a4:	8a13      	ldrh	r3, [r2, #16]
    11a6:	075d      	lsls	r5, r3, #29
    11a8:	d503      	bpl.n	11b2 <spi_select_slave+0x8e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    11aa:	8a11      	ldrh	r1, [r2, #16]
    11ac:	2304      	movs	r3, #4
    11ae:	430b      	orrs	r3, r1
    11b0:	8213      	strh	r3, [r2, #16]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    11b2:	7983      	ldrb	r3, [r0, #6]
    11b4:	2b01      	cmp	r3, #1
    11b6:	d102      	bne.n	11be <spi_select_slave+0x9a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    11b8:	8b13      	ldrh	r3, [r2, #24]
    11ba:	2300      	movs	r3, #0
    11bc:	e021      	b.n	1202 <spi_select_slave+0xde>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    11be:	8b13      	ldrh	r3, [r2, #24]
    11c0:	2300      	movs	r3, #0
    11c2:	e01e      	b.n	1202 <spi_select_slave+0xde>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    11c4:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11c6:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    11c8:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11ca:	2900      	cmp	r1, #0
    11cc:	d103      	bne.n	11d6 <spi_select_slave+0xb2>
		return &(ports[port_index]->Group[group_index]);
    11ce:	095a      	lsrs	r2, r3, #5
    11d0:	01d2      	lsls	r2, r2, #7
    11d2:	490d      	ldr	r1, [pc, #52]	; (1208 <spi_select_slave+0xe4>)
    11d4:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    11d6:	211f      	movs	r1, #31
    11d8:	400b      	ands	r3, r1
    11da:	2101      	movs	r1, #1
    11dc:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    11de:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    11e0:	2300      	movs	r3, #0
    11e2:	e00e      	b.n	1202 <spi_select_slave+0xde>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    11e4:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11e6:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    11e8:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11ea:	2900      	cmp	r1, #0
    11ec:	d103      	bne.n	11f6 <spi_select_slave+0xd2>
		return &(ports[port_index]->Group[group_index]);
    11ee:	095a      	lsrs	r2, r3, #5
    11f0:	01d2      	lsls	r2, r2, #7
    11f2:	4c05      	ldr	r4, [pc, #20]	; (1208 <spi_select_slave+0xe4>)
    11f4:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    11f6:	211f      	movs	r1, #31
    11f8:	400b      	ands	r3, r1
    11fa:	2101      	movs	r1, #1
    11fc:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    11fe:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    1200:	2300      	movs	r3, #0
}
    1202:	1c18      	adds	r0, r3, #0
    1204:	bd30      	pop	{r4, r5, pc}
    1206:	46c0      	nop			; (mov r8, r8)
    1208:	41004400 	.word	0x41004400

0000120c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    120c:	b5f0      	push	{r4, r5, r6, r7, lr}
    120e:	465f      	mov	r7, fp
    1210:	4656      	mov	r6, sl
    1212:	464d      	mov	r5, r9
    1214:	4644      	mov	r4, r8
    1216:	b4f0      	push	{r4, r5, r6, r7}
    1218:	b085      	sub	sp, #20
    121a:	1c04      	adds	r4, r0, #0
    121c:	4688      	mov	r8, r1
    121e:	1c15      	adds	r5, r2, #0
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1220:	2330      	movs	r3, #48	; 0x30
    1222:	5cc3      	ldrb	r3, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1224:	2005      	movs	r0, #5
{
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1226:	2b05      	cmp	r3, #5
    1228:	d100      	bne.n	122c <spi_write_buffer_wait+0x20>
    122a:	e0fb      	b.n	1424 <spi_write_buffer_wait+0x218>
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    122c:	2017      	movs	r0, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    122e:	2a00      	cmp	r2, #0
    1230:	d100      	bne.n	1234 <spi_write_buffer_wait+0x28>
    1232:	e0f7      	b.n	1424 <spi_write_buffer_wait+0x218>
		return STATUS_ERR_INVALID_ARG;
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1234:	7963      	ldrb	r3, [r4, #5]
    1236:	2b00      	cmp	r3, #0
    1238:	d106      	bne.n	1248 <spi_write_buffer_wait+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    123a:	6820      	ldr	r0, [r4, #0]
    123c:	7b83      	ldrb	r3, [r0, #14]
    123e:	0799      	lsls	r1, r3, #30
    1240:	d502      	bpl.n	1248 <spi_write_buffer_wait+0x3c>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    1242:	1c20      	adds	r0, r4, #0
    1244:	4b7b      	ldr	r3, [pc, #492]	; (1434 <spi_write_buffer_wait+0x228>)
    1246:	4798      	blx	r3
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
    1248:	9502      	str	r5, [sp, #8]
    124a:	2000      	movs	r0, #0

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    124c:	4a7a      	ldr	r2, [pc, #488]	; (1438 <spi_write_buffer_wait+0x22c>)
    124e:	4692      	mov	sl, r2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1250:	2301      	movs	r3, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1252:	2602      	movs	r6, #2
    1254:	46b3      	mov	fp, r6
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1256:	2704      	movs	r7, #4
    1258:	4642      	mov	r2, r8
    125a:	9203      	str	r2, [sp, #12]
    125c:	e094      	b.n	1388 <spi_write_buffer_wait+0x17c>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    125e:	7962      	ldrb	r2, [r4, #5]
    1260:	2a00      	cmp	r2, #0
    1262:	d001      	beq.n	1268 <spi_write_buffer_wait+0x5c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1264:	6821      	ldr	r1, [r4, #0]
    1266:	e017      	b.n	1298 <spi_write_buffer_wait+0x8c>
    1268:	6826      	ldr	r6, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    126a:	7bb2      	ldrb	r2, [r6, #14]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_write(module)) {
    126c:	4213      	tst	r3, r2
    126e:	d106      	bne.n	127e <spi_write_buffer_wait+0x72>
    1270:	4a72      	ldr	r2, [pc, #456]	; (143c <spi_write_buffer_wait+0x230>)
    1272:	7bb1      	ldrb	r1, [r6, #14]
    1274:	420b      	tst	r3, r1
    1276:	d102      	bne.n	127e <spi_write_buffer_wait+0x72>
    1278:	3a01      	subs	r2, #1
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    127a:	2a00      	cmp	r2, #0
    127c:	d1f9      	bne.n	1272 <spi_write_buffer_wait+0x66>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    127e:	7bb2      	ldrb	r2, [r6, #14]
				if (spi_is_ready_to_write(module)) {
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    1280:	4659      	mov	r1, fp
    1282:	4211      	tst	r1, r2
    1284:	d004      	beq.n	1290 <spi_write_buffer_wait+0x84>
				_spi_clear_tx_complete_flag(module);
    1286:	1c20      	adds	r0, r4, #0
    1288:	4b6a      	ldr	r3, [pc, #424]	; (1434 <spi_write_buffer_wait+0x228>)
    128a:	4798      	blx	r3
				return STATUS_ABORTED;
    128c:	2004      	movs	r0, #4
    128e:	e0c9      	b.n	1424 <spi_write_buffer_wait+0x218>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1290:	7bb2      	ldrb	r2, [r6, #14]
			}

			if (!spi_is_ready_to_write(module)) {
    1292:	4213      	tst	r3, r2
    1294:	d1e6      	bne.n	1264 <spi_write_buffer_wait+0x58>
    1296:	e0bc      	b.n	1412 <spi_write_buffer_wait+0x206>
    1298:	7b8a      	ldrb	r2, [r1, #14]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    129a:	4213      	tst	r3, r2
    129c:	d0fc      	beq.n	1298 <spi_write_buffer_wait+0x8c>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    129e:	4662      	mov	r2, ip
    12a0:	5c16      	ldrb	r6, [r2, r0]
    12a2:	1c42      	adds	r2, r0, #1
    12a4:	b292      	uxth	r2, r2
    12a6:	4690      	mov	r8, r2

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12a8:	79a2      	ldrb	r2, [r4, #6]
    12aa:	2a01      	cmp	r2, #1
    12ac:	d001      	beq.n	12b2 <spi_write_buffer_wait+0xa6>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    12ae:	4640      	mov	r0, r8
    12b0:	e006      	b.n	12c0 <spi_write_buffer_wait+0xb4>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    12b2:	4662      	mov	r2, ip
    12b4:	4442      	add	r2, r8
    12b6:	7812      	ldrb	r2, [r2, #0]
    12b8:	0212      	lsls	r2, r2, #8
    12ba:	4316      	orrs	r6, r2
    12bc:	3002      	adds	r0, #2
    12be:	b280      	uxth	r0, r0
    12c0:	7b8a      	ldrb	r2, [r1, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    12c2:	4213      	tst	r3, r2
    12c4:	d002      	beq.n	12cc <spi_write_buffer_wait+0xc0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    12c6:	05f6      	lsls	r6, r6, #23
    12c8:	0df6      	lsrs	r6, r6, #23
    12ca:	830e      	strh	r6, [r1, #24]
    12cc:	1e6a      	subs	r2, r5, #1
    12ce:	b291      	uxth	r1, r2
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    12d0:	79e2      	ldrb	r2, [r4, #7]
    12d2:	2a00      	cmp	r2, #0
    12d4:	d05d      	beq.n	1392 <spi_write_buffer_wait+0x186>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    12d6:	7962      	ldrb	r2, [r4, #5]
    12d8:	2a00      	cmp	r2, #0
    12da:	d13c      	bne.n	1356 <spi_write_buffer_wait+0x14a>
    12dc:	4a58      	ldr	r2, [pc, #352]	; (1440 <spi_write_buffer_wait+0x234>)
    12de:	9e03      	ldr	r6, [sp, #12]
    12e0:	46b4      	mov	ip, r6
    12e2:	9500      	str	r5, [sp, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    12e4:	6821      	ldr	r1, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    12e6:	7b8e      	ldrb	r6, [r1, #14]
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
    12e8:	4233      	tst	r3, r6
    12ea:	d020      	beq.n	132e <spi_write_buffer_wait+0x122>
						data_to_send = tx_data[tx_pos++];
    12ec:	4665      	mov	r5, ip
    12ee:	5c2d      	ldrb	r5, [r5, r0]
    12f0:	9501      	str	r5, [sp, #4]
    12f2:	1c46      	adds	r6, r0, #1
    12f4:	b2b5      	uxth	r5, r6
    12f6:	46a8      	mov	r8, r5
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12f8:	79a6      	ldrb	r6, [r4, #6]
    12fa:	2e01      	cmp	r6, #1
    12fc:	d003      	beq.n	1306 <spi_write_buffer_wait+0xfa>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
    12fe:	9801      	ldr	r0, [sp, #4]
    1300:	4681      	mov	r9, r0
    1302:	1c28      	adds	r0, r5, #0
    1304:	e008      	b.n	1318 <spi_write_buffer_wait+0x10c>
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
							data_to_send |= (tx_data[tx_pos++] << 8);
    1306:	4665      	mov	r5, ip
    1308:	4445      	add	r5, r8
    130a:	782d      	ldrb	r5, [r5, #0]
    130c:	022d      	lsls	r5, r5, #8
    130e:	9e01      	ldr	r6, [sp, #4]
    1310:	4335      	orrs	r5, r6
    1312:	46a9      	mov	r9, r5
    1314:	3002      	adds	r0, #2
    1316:	b280      	uxth	r0, r0
    1318:	7b8e      	ldrb	r6, [r1, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    131a:	4233      	tst	r3, r6
    131c:	d003      	beq.n	1326 <spi_write_buffer_wait+0x11a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    131e:	464d      	mov	r5, r9
    1320:	05ed      	lsls	r5, r5, #23
    1322:	0dee      	lsrs	r6, r5, #23
    1324:	830e      	strh	r6, [r1, #24]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
						length--;
    1326:	9d00      	ldr	r5, [sp, #0]
    1328:	3d01      	subs	r5, #1
    132a:	b2ad      	uxth	r5, r5
    132c:	9500      	str	r5, [sp, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    132e:	6821      	ldr	r1, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1330:	7b8e      	ldrb	r6, [r1, #14]
					}
					if (spi_is_ready_to_read(module)) {
    1332:	4237      	tst	r7, r6
    1334:	d102      	bne.n	133c <spi_write_buffer_wait+0x130>
    1336:	3a01      	subs	r2, #1

		if (module->receiver_enabled) {
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1338:	2a00      	cmp	r2, #0
    133a:	d1d3      	bne.n	12e4 <spi_write_buffer_wait+0xd8>
    133c:	9d00      	ldr	r5, [sp, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    133e:	7b8a      	ldrb	r2, [r1, #14]
						break;
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    1340:	465e      	mov	r6, fp
    1342:	4216      	tst	r6, r2
    1344:	d004      	beq.n	1350 <spi_write_buffer_wait+0x144>
					_spi_clear_tx_complete_flag(module);
    1346:	1c20      	adds	r0, r4, #0
    1348:	4b3a      	ldr	r3, [pc, #232]	; (1434 <spi_write_buffer_wait+0x228>)
    134a:	4798      	blx	r3
					return STATUS_ABORTED;
    134c:	2004      	movs	r0, #4
    134e:	e069      	b.n	1424 <spi_write_buffer_wait+0x218>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1350:	7b8a      	ldrb	r2, [r1, #14]
				}

				if (!spi_is_ready_to_read(module)) {
    1352:	4217      	tst	r7, r2
    1354:	d05f      	beq.n	1416 <spi_write_buffer_wait+0x20a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1356:	6821      	ldr	r1, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1358:	7b8a      	ldrb	r2, [r1, #14]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    135a:	4217      	tst	r7, r2
    135c:	d0fc      	beq.n	1358 <spi_write_buffer_wait+0x14c>
    135e:	7b8a      	ldrb	r2, [r1, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1360:	4217      	tst	r7, r2
    1362:	d00d      	beq.n	1380 <spi_write_buffer_wait+0x174>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1364:	8a0a      	ldrh	r2, [r1, #16]
    1366:	4217      	tst	r7, r2
    1368:	d004      	beq.n	1374 <spi_write_buffer_wait+0x168>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    136a:	8a0a      	ldrh	r2, [r1, #16]
    136c:	2604      	movs	r6, #4
    136e:	4332      	orrs	r2, r6
    1370:	b292      	uxth	r2, r2
    1372:	820a      	strh	r2, [r1, #16]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1374:	79a2      	ldrb	r2, [r4, #6]
    1376:	2a01      	cmp	r2, #1
    1378:	d101      	bne.n	137e <spi_write_buffer_wait+0x172>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    137a:	8b0a      	ldrh	r2, [r1, #24]
    137c:	e000      	b.n	1380 <spi_write_buffer_wait+0x174>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    137e:	8b0a      	ldrh	r2, [r1, #24]
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
    1380:	9a02      	ldr	r2, [sp, #8]
    1382:	3a01      	subs	r2, #1
    1384:	b292      	uxth	r2, r2
    1386:	9202      	str	r2, [sp, #8]
    1388:	3d01      	subs	r5, #1
    138a:	b2ad      	uxth	r5, r5
    138c:	9903      	ldr	r1, [sp, #12]
    138e:	468c      	mov	ip, r1
    1390:	e000      	b.n	1394 <spi_write_buffer_wait+0x188>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    1392:	1c0d      	adds	r5, r1, #0

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    1394:	4555      	cmp	r5, sl
    1396:	d000      	beq.n	139a <spi_write_buffer_wait+0x18e>
    1398:	e761      	b.n	125e <spi_write_buffer_wait+0x52>
    139a:	9a02      	ldr	r2, [sp, #8]
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    139c:	7963      	ldrb	r3, [r4, #5]
    139e:	2b01      	cmp	r3, #1
    13a0:	d106      	bne.n	13b0 <spi_write_buffer_wait+0x1a4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13a2:	6821      	ldr	r1, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    13a4:	2202      	movs	r2, #2
    13a6:	7b8b      	ldrb	r3, [r1, #14]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    13a8:	421a      	tst	r2, r3
    13aa:	d0fc      	beq.n	13a6 <spi_write_buffer_wait+0x19a>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    13ac:	2000      	movs	r0, #0
    13ae:	e039      	b.n	1424 <spi_write_buffer_wait+0x218>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    13b0:	2b00      	cmp	r3, #0
    13b2:	d132      	bne.n	141a <spi_write_buffer_wait+0x20e>
		if (module->receiver_enabled) {
    13b4:	79e3      	ldrb	r3, [r4, #7]
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    13b6:	2000      	movs	r0, #0
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
    13b8:	2b00      	cmp	r3, #0
    13ba:	d033      	beq.n	1424 <spi_write_buffer_wait+0x218>
			while (flush_length) {
    13bc:	2a00      	cmp	r2, #0
    13be:	d11e      	bne.n	13fe <spi_write_buffer_wait+0x1f2>
    13c0:	e030      	b.n	1424 <spi_write_buffer_wait+0x218>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13c2:	7b8a      	ldrb	r2, [r1, #14]
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
    13c4:	4210      	tst	r0, r2
    13c6:	d102      	bne.n	13ce <spi_write_buffer_wait+0x1c2>
    13c8:	3b01      	subs	r3, #1
#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    13ca:	2b00      	cmp	r3, #0
    13cc:	d1f9      	bne.n	13c2 <spi_write_buffer_wait+0x1b6>
    13ce:	7b8b      	ldrb	r3, [r1, #14]
					if (spi_is_ready_to_read(module)) {
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
    13d0:	4218      	tst	r0, r3
    13d2:	d024      	beq.n	141e <spi_write_buffer_wait+0x212>
    13d4:	7b8b      	ldrb	r3, [r1, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    13d6:	4218      	tst	r0, r3
    13d8:	d00c      	beq.n	13f4 <spi_write_buffer_wait+0x1e8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    13da:	8a0b      	ldrh	r3, [r1, #16]
    13dc:	4218      	tst	r0, r3
    13de:	d003      	beq.n	13e8 <spi_write_buffer_wait+0x1dc>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    13e0:	8a0b      	ldrh	r3, [r1, #16]
    13e2:	4333      	orrs	r3, r6
    13e4:	b29b      	uxth	r3, r3
    13e6:	820b      	strh	r3, [r1, #16]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13e8:	79a3      	ldrb	r3, [r4, #6]
    13ea:	2b01      	cmp	r3, #1
    13ec:	d101      	bne.n	13f2 <spi_write_buffer_wait+0x1e6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    13ee:	8b0b      	ldrh	r3, [r1, #24]
    13f0:	e000      	b.n	13f4 <spi_write_buffer_wait+0x1e8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    13f2:	8b0b      	ldrh	r3, [r1, #24]
					return STATUS_ERR_TIMEOUT;
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
				flush_length--;
    13f4:	3f01      	subs	r7, #1
    13f6:	b2bf      	uxth	r7, r7
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
    13f8:	2f00      	cmp	r7, #0
    13fa:	d104      	bne.n	1406 <spi_write_buffer_wait+0x1fa>
    13fc:	e011      	b.n	1422 <spi_write_buffer_wait+0x216>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13fe:	2004      	movs	r0, #4
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
    1400:	4d0e      	ldr	r5, [pc, #56]	; (143c <spi_write_buffer_wait+0x230>)

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1402:	2604      	movs	r6, #4
    1404:	9f02      	ldr	r7, [sp, #8]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1406:	6821      	ldr	r1, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1408:	7b8b      	ldrb	r3, [r1, #14]
    140a:	4218      	tst	r0, r3
    140c:	d1df      	bne.n	13ce <spi_write_buffer_wait+0x1c2>
    140e:	1c2b      	adds	r3, r5, #0
    1410:	e7d7      	b.n	13c2 <spi_write_buffer_wait+0x1b6>
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1412:	2012      	movs	r0, #18
    1414:	e006      	b.n	1424 <spi_write_buffer_wait+0x218>
					return STATUS_ABORTED;
				}

				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    1416:	2012      	movs	r0, #18
    1418:	e004      	b.n	1424 <spi_write_buffer_wait+0x218>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    141a:	2000      	movs	r0, #0
    141c:	e002      	b.n	1424 <spi_write_buffer_wait+0x218>
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    141e:	2012      	movs	r0, #18
    1420:	e000      	b.n	1424 <spi_write_buffer_wait+0x218>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    1422:	2000      	movs	r0, #0
}
    1424:	b005      	add	sp, #20
    1426:	bc3c      	pop	{r2, r3, r4, r5}
    1428:	4690      	mov	r8, r2
    142a:	4699      	mov	r9, r3
    142c:	46a2      	mov	sl, r4
    142e:	46ab      	mov	fp, r5
    1430:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	00000f25 	.word	0x00000f25
    1438:	0000ffff 	.word	0x0000ffff
    143c:	00002710 	.word	0x00002710
    1440:	00002711 	.word	0x00002711

00001444 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1446:	0080      	lsls	r0, r0, #2
    1448:	4b66      	ldr	r3, [pc, #408]	; (15e4 <_spi_interrupt_handler+0x1a0>)
    144a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    144c:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    144e:	232e      	movs	r3, #46	; 0x2e

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    1450:	5ce3      	ldrb	r3, [r4, r3]
    1452:	222f      	movs	r2, #47	; 0x2f
    1454:	5ca2      	ldrb	r2, [r4, r2]
    1456:	1c17      	adds	r7, r2, #0
    1458:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    145a:	7bae      	ldrb	r6, [r5, #14]
	interrupt_status &= spi_hw->INTENSET.reg;
    145c:	7b6b      	ldrb	r3, [r5, #13]
    145e:	401e      	ands	r6, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1460:	07f1      	lsls	r1, r6, #31
    1462:	d546      	bpl.n	14f2 <_spi_interrupt_handler+0xae>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1464:	7963      	ldrb	r3, [r4, #5]
    1466:	2b01      	cmp	r3, #1
    1468:	d115      	bne.n	1496 <_spi_interrupt_handler+0x52>
			(module->dir == SPI_DIRECTION_READ)) {
    146a:	7a23      	ldrb	r3, [r4, #8]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    146c:	2b00      	cmp	r3, #0
    146e:	d10e      	bne.n	148e <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    1470:	4b5d      	ldr	r3, [pc, #372]	; (15e8 <_spi_interrupt_handler+0x1a4>)
    1472:	881b      	ldrh	r3, [r3, #0]
    1474:	832b      	strh	r3, [r5, #24]

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1476:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    1478:	3b01      	subs	r3, #1
    147a:	b29b      	uxth	r3, r3
    147c:	8563      	strh	r3, [r4, #42]	; 0x2a
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
    147e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    1480:	2b00      	cmp	r3, #0
    1482:	d101      	bne.n	1488 <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1484:	2301      	movs	r3, #1
    1486:	732b      	strb	r3, [r5, #12]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1488:	7963      	ldrb	r3, [r4, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    148a:	2b01      	cmp	r3, #1
    148c:	d103      	bne.n	1496 <_spi_interrupt_handler+0x52>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    148e:	7a23      	ldrb	r3, [r4, #8]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1490:	2b00      	cmp	r3, #0
    1492:	d105      	bne.n	14a0 <_spi_interrupt_handler+0x5c>
    1494:	e02d      	b.n	14f2 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1496:	2b00      	cmp	r3, #0
    1498:	d12b      	bne.n	14f2 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    149a:	7a23      	ldrb	r3, [r4, #8]
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    149c:	2b00      	cmp	r3, #0
    149e:	d028      	beq.n	14f2 <_spi_interrupt_handler+0xae>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    14a0:	6822      	ldr	r2, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    14a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    14a4:	7819      	ldrb	r1, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    14a6:	1c58      	adds	r0, r3, #1
    14a8:	6260      	str	r0, [r4, #36]	; 0x24

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14aa:	79a0      	ldrb	r0, [r4, #6]
    14ac:	2801      	cmp	r0, #1
    14ae:	d104      	bne.n	14ba <_spi_interrupt_handler+0x76>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    14b0:	7858      	ldrb	r0, [r3, #1]
    14b2:	0200      	lsls	r0, r0, #8
    14b4:	4301      	orrs	r1, r0
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    14b6:	3302      	adds	r3, #2
    14b8:	6263      	str	r3, [r4, #36]	; 0x24
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    14ba:	05cb      	lsls	r3, r1, #23
    14bc:	0ddb      	lsrs	r3, r3, #23
    14be:	8313      	strh	r3, [r2, #24]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    14c0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    14c2:	3b01      	subs	r3, #1
    14c4:	b29b      	uxth	r3, r3
    14c6:	85a3      	strh	r3, [r4, #44]	; 0x2c
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    14c8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    14ca:	2b00      	cmp	r3, #0
    14cc:	d111      	bne.n	14f2 <_spi_interrupt_handler+0xae>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    14ce:	2301      	movs	r3, #1
    14d0:	732b      	strb	r3, [r5, #12]

				if (module->dir == SPI_DIRECTION_WRITE &&
    14d2:	7a23      	ldrb	r3, [r4, #8]
    14d4:	2b01      	cmp	r3, #1
    14d6:	d10c      	bne.n	14f2 <_spi_interrupt_handler+0xae>
    14d8:	79e3      	ldrb	r3, [r4, #7]
    14da:	2b00      	cmp	r3, #0
    14dc:	d109      	bne.n	14f2 <_spi_interrupt_handler+0xae>
						!(module->receiver_enabled)) {
					/* Buffer sent with receiver disabled */
					module->dir = SPI_DIRECTION_IDLE;
    14de:	2303      	movs	r3, #3
    14e0:	7223      	strb	r3, [r4, #8]
					module->status = STATUS_OK;
    14e2:	2200      	movs	r2, #0
    14e4:	2330      	movs	r3, #48	; 0x30
    14e6:	54e2      	strb	r2, [r4, r3]
					/* Run callback if registered and enabled */
					if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    14e8:	07fa      	lsls	r2, r7, #31
    14ea:	d502      	bpl.n	14f2 <_spi_interrupt_handler+0xae>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
									(module);
    14ec:	1c20      	adds	r0, r4, #0
    14ee:	68e3      	ldr	r3, [r4, #12]
    14f0:	4798      	blx	r3
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    14f2:	0771      	lsls	r1, r6, #29
    14f4:	d55f      	bpl.n	15b6 <_spi_interrupt_handler+0x172>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    14f6:	8a2b      	ldrh	r3, [r5, #16]
    14f8:	075a      	lsls	r2, r3, #29
    14fa:	d514      	bpl.n	1526 <_spi_interrupt_handler+0xe2>
			if (module->dir != SPI_DIRECTION_WRITE) {
    14fc:	7a23      	ldrb	r3, [r4, #8]
    14fe:	2b01      	cmp	r3, #1
    1500:	d00b      	beq.n	151a <_spi_interrupt_handler+0xd6>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1502:	221e      	movs	r2, #30
    1504:	2330      	movs	r3, #48	; 0x30
    1506:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1508:	2303      	movs	r3, #3
    150a:	7223      	strb	r3, [r4, #8]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    150c:	2305      	movs	r3, #5
    150e:	732b      	strb	r3, [r5, #12]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1510:	073b      	lsls	r3, r7, #28
    1512:	d502      	bpl.n	151a <_spi_interrupt_handler+0xd6>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1514:	1c20      	adds	r0, r4, #0
    1516:	69a1      	ldr	r1, [r4, #24]
    1518:	4788      	blx	r1
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    151a:	8b2b      	ldrh	r3, [r5, #24]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    151c:	8a2a      	ldrh	r2, [r5, #16]
    151e:	2304      	movs	r3, #4
    1520:	4313      	orrs	r3, r2
    1522:	822b      	strh	r3, [r5, #16]
    1524:	e047      	b.n	15b6 <_spi_interrupt_handler+0x172>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    1526:	7a23      	ldrb	r3, [r4, #8]
    1528:	2b01      	cmp	r3, #1
    152a:	d115      	bne.n	1558 <_spi_interrupt_handler+0x114>
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    152c:	6822      	ldr	r2, [r4, #0]
    152e:	8b13      	ldrh	r3, [r2, #24]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1530:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    1532:	3b01      	subs	r3, #1
    1534:	b29b      	uxth	r3, r3
    1536:	8563      	strh	r3, [r4, #42]	; 0x2a
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
    1538:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    153a:	2b00      	cmp	r3, #0
    153c:	d13b      	bne.n	15b6 <_spi_interrupt_handler+0x172>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    153e:	2304      	movs	r3, #4
    1540:	732b      	strb	r3, [r5, #12]
					module->status = STATUS_OK;
    1542:	2200      	movs	r2, #0
    1544:	2330      	movs	r3, #48	; 0x30
    1546:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1548:	2303      	movs	r3, #3
    154a:	7223      	strb	r3, [r4, #8]
					/* Run callback if registered and enabled */
					if (callback_mask &
    154c:	07fb      	lsls	r3, r7, #31
    154e:	d532      	bpl.n	15b6 <_spi_interrupt_handler+0x172>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1550:	1c20      	adds	r0, r4, #0
    1552:	68e1      	ldr	r1, [r4, #12]
    1554:	4788      	blx	r1
    1556:	e02e      	b.n	15b6 <_spi_interrupt_handler+0x172>
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1558:	6823      	ldr	r3, [r4, #0]
    155a:	8b1a      	ldrh	r2, [r3, #24]
    155c:	05d2      	lsls	r2, r2, #23
    155e:	0dd2      	lsrs	r2, r2, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    1560:	b2d3      	uxtb	r3, r2
    1562:	6a21      	ldr	r1, [r4, #32]
    1564:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    1566:	6a23      	ldr	r3, [r4, #32]
    1568:	1c59      	adds	r1, r3, #1
    156a:	6221      	str	r1, [r4, #32]

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    156c:	79a1      	ldrb	r1, [r4, #6]
    156e:	2901      	cmp	r1, #1
    1570:	d104      	bne.n	157c <_spi_interrupt_handler+0x138>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1572:	0a12      	lsrs	r2, r2, #8
    1574:	705a      	strb	r2, [r3, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    1576:	6a23      	ldr	r3, [r4, #32]
    1578:	3301      	adds	r3, #1
    157a:	6223      	str	r3, [r4, #32]
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    157c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    157e:	3b01      	subs	r3, #1
    1580:	b29b      	uxth	r3, r3
    1582:	8523      	strh	r3, [r4, #40]	; 0x28
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    1584:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1586:	2b00      	cmp	r3, #0
    1588:	d115      	bne.n	15b6 <_spi_interrupt_handler+0x172>
					module->status = STATUS_OK;
    158a:	2200      	movs	r2, #0
    158c:	2330      	movs	r3, #48	; 0x30
    158e:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1590:	2304      	movs	r3, #4
    1592:	732b      	strb	r3, [r5, #12]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1594:	7a23      	ldrb	r3, [r4, #8]
    1596:	2b02      	cmp	r3, #2
    1598:	d105      	bne.n	15a6 <_spi_interrupt_handler+0x162>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    159a:	077a      	lsls	r2, r7, #29
    159c:	d50b      	bpl.n	15b6 <_spi_interrupt_handler+0x172>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    159e:	1c20      	adds	r0, r4, #0
    15a0:	6963      	ldr	r3, [r4, #20]
    15a2:	4798      	blx	r3
    15a4:	e007      	b.n	15b6 <_spi_interrupt_handler+0x172>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    15a6:	7a23      	ldrb	r3, [r4, #8]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d104      	bne.n	15b6 <_spi_interrupt_handler+0x172>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    15ac:	07b9      	lsls	r1, r7, #30
    15ae:	d502      	bpl.n	15b6 <_spi_interrupt_handler+0x172>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    15b0:	1c20      	adds	r0, r4, #0
    15b2:	6922      	ldr	r2, [r4, #16]
    15b4:	4790      	blx	r2
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    15b6:	07b3      	lsls	r3, r6, #30
    15b8:	d513      	bpl.n	15e2 <_spi_interrupt_handler+0x19e>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    15ba:	7963      	ldrb	r3, [r4, #5]
    15bc:	2b00      	cmp	r3, #0
    15be:	d110      	bne.n	15e2 <_spi_interrupt_handler+0x19e>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    15c0:	2307      	movs	r3, #7
    15c2:	732b      	strb	r3, [r5, #12]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    15c4:	2302      	movs	r3, #2
    15c6:	73ab      	strb	r3, [r5, #14]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    15c8:	2303      	movs	r3, #3
    15ca:	7223      	strb	r3, [r4, #8]
			module->remaining_tx_buffer_length = 0;
    15cc:	2300      	movs	r3, #0
    15ce:	85a3      	strh	r3, [r4, #44]	; 0x2c
			module->remaining_rx_buffer_length = 0;
    15d0:	8523      	strh	r3, [r4, #40]	; 0x28
			module->status = STATUS_OK;
    15d2:	2330      	movs	r3, #48	; 0x30
    15d4:	2200      	movs	r2, #0
    15d6:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    15d8:	06f9      	lsls	r1, r7, #27
    15da:	d502      	bpl.n	15e2 <_spi_interrupt_handler+0x19e>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
					(module);
    15dc:	69e3      	ldr	r3, [r4, #28]
    15de:	1c20      	adds	r0, r4, #0
    15e0:	4798      	blx	r3
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    15e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15e4:	20000bec 	.word	0x20000bec
    15e8:	20000c04 	.word	0x20000c04

000015ec <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    15ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ee:	465f      	mov	r7, fp
    15f0:	4656      	mov	r6, sl
    15f2:	464d      	mov	r5, r9
    15f4:	4644      	mov	r4, r8
    15f6:	b4f0      	push	{r4, r5, r6, r7}
    15f8:	b08d      	sub	sp, #52	; 0x34
    15fa:	1c05      	adds	r5, r0, #0
    15fc:	1c0c      	adds	r4, r1, #0
    15fe:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1600:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1602:	1c08      	adds	r0, r1, #0
    1604:	4b80      	ldr	r3, [pc, #512]	; (1808 <usart_init+0x21c>)
    1606:	4798      	blx	r3
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1608:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    160a:	2305      	movs	r3, #5

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    160c:	07ca      	lsls	r2, r1, #31
    160e:	d500      	bpl.n	1612 <usart_init+0x26>
    1610:	e0f1      	b.n	17f6 <usart_init+0x20a>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1612:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    1614:	231c      	movs	r3, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1616:	0797      	lsls	r7, r2, #30
    1618:	d500      	bpl.n	161c <usart_init+0x30>
    161a:	e0ec      	b.n	17f6 <usart_init+0x20a>
    161c:	4b7b      	ldr	r3, [pc, #492]	; (180c <usart_init+0x220>)
    161e:	6a19      	ldr	r1, [r3, #32]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1620:	1c82      	adds	r2, r0, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1622:	2701      	movs	r7, #1
    1624:	4097      	lsls	r7, r2
    1626:	1c3a      	adds	r2, r7, #0
    1628:	430a      	orrs	r2, r1
    162a:	621a      	str	r2, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    162c:	a90b      	add	r1, sp, #44	; 0x2c
    162e:	7f73      	ldrb	r3, [r6, #29]
    1630:	700b      	strb	r3, [r1, #0]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1632:	300d      	adds	r0, #13

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1634:	b2c7      	uxtb	r7, r0
    1636:	1c38      	adds	r0, r7, #0
    1638:	4b75      	ldr	r3, [pc, #468]	; (1810 <usart_init+0x224>)
    163a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    163c:	1c38      	adds	r0, r7, #0
    163e:	4b75      	ldr	r3, [pc, #468]	; (1814 <usart_init+0x228>)
    1640:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1642:	7f70      	ldrb	r0, [r6, #29]
    1644:	2100      	movs	r1, #0
    1646:	4b74      	ldr	r3, [pc, #464]	; (1818 <usart_init+0x22c>)
    1648:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    164a:	7af3      	ldrb	r3, [r6, #11]
    164c:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    164e:	7d33      	ldrb	r3, [r6, #20]
    1650:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1652:	7d73      	ldrb	r3, [r6, #21]
    1654:	71eb      	strb	r3, [r5, #7]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1656:	682f      	ldr	r7, [r5, #0]
    1658:	9703      	str	r7, [sp, #12]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    165a:	1c38      	adds	r0, r7, #0
    165c:	4b6a      	ldr	r3, [pc, #424]	; (1808 <usart_init+0x21c>)
    165e:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1660:	300d      	adds	r0, #13

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
    1662:	2200      	movs	r2, #0
    1664:	466b      	mov	r3, sp
    1666:	82da      	strh	r2, [r3, #22]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1668:	6831      	ldr	r1, [r6, #0]
    166a:	4689      	mov	r9, r1
		(uint32_t)config->mux_setting |
    166c:	68f2      	ldr	r2, [r6, #12]
    166e:	4692      	mov	sl, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1670:	7db3      	ldrb	r3, [r6, #22]
    1672:	4698      	mov	r8, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    1674:	6873      	ldr	r3, [r6, #4]
    1676:	2b00      	cmp	r3, #0
    1678:	d014      	beq.n	16a4 <usart_init+0xb8>
    167a:	2280      	movs	r2, #128	; 0x80
    167c:	0552      	lsls	r2, r2, #21
    167e:	4293      	cmp	r3, r2
    1680:	d12e      	bne.n	16e0 <usart_init+0xf4>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1682:	7df3      	ldrb	r3, [r6, #23]
    1684:	2b00      	cmp	r3, #0
    1686:	d001      	beq.n	168c <usart_init+0xa0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1688:	682a      	ldr	r2, [r5, #0]
    168a:	e02e      	b.n	16ea <usart_init+0xfe>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    168c:	6937      	ldr	r7, [r6, #16]
    168e:	b2c0      	uxtb	r0, r0
    1690:	4b62      	ldr	r3, [pc, #392]	; (181c <usart_init+0x230>)
    1692:	4798      	blx	r3
    1694:	1c01      	adds	r1, r0, #0
    1696:	1c38      	adds	r0, r7, #0
    1698:	466a      	mov	r2, sp
    169a:	3216      	adds	r2, #22
    169c:	4b60      	ldr	r3, [pc, #384]	; (1820 <usart_init+0x234>)
    169e:	4798      	blx	r3
    16a0:	1c03      	adds	r3, r0, #0
    16a2:	e01e      	b.n	16e2 <usart_init+0xf6>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    16a4:	7df3      	ldrb	r3, [r6, #23]
    16a6:	2b00      	cmp	r3, #0
    16a8:	d00a      	beq.n	16c0 <usart_init+0xd4>
				status_code =
    16aa:	2310      	movs	r3, #16
    16ac:	9300      	str	r3, [sp, #0]
    16ae:	6930      	ldr	r0, [r6, #16]
    16b0:	69b1      	ldr	r1, [r6, #24]
    16b2:	466a      	mov	r2, sp
    16b4:	3216      	adds	r2, #22
    16b6:	2300      	movs	r3, #0
    16b8:	4f5a      	ldr	r7, [pc, #360]	; (1824 <usart_init+0x238>)
    16ba:	47b8      	blx	r7
    16bc:	1c03      	adds	r3, r0, #0
    16be:	e010      	b.n	16e2 <usart_init+0xf6>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    16c0:	6931      	ldr	r1, [r6, #16]
    16c2:	468b      	mov	fp, r1
    16c4:	b2c0      	uxtb	r0, r0
    16c6:	4b55      	ldr	r3, [pc, #340]	; (181c <usart_init+0x230>)
    16c8:	4798      	blx	r3
    16ca:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    16cc:	2310      	movs	r3, #16
    16ce:	9300      	str	r3, [sp, #0]
    16d0:	4658      	mov	r0, fp
    16d2:	466a      	mov	r2, sp
    16d4:	3216      	adds	r2, #22
    16d6:	2300      	movs	r3, #0
    16d8:	4f52      	ldr	r7, [pc, #328]	; (1824 <usart_init+0x238>)
    16da:	47b8      	blx	r7
    16dc:	1c03      	adds	r3, r0, #0
    16de:	e000      	b.n	16e2 <usart_init+0xf6>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    16e0:	2300      	movs	r3, #0

			break;
	}

	/* Check if calculating the baud rate failed */
	if (status_code != STATUS_OK) {
    16e2:	2b00      	cmp	r3, #0
    16e4:	d000      	beq.n	16e8 <usart_init+0xfc>
    16e6:	e086      	b.n	17f6 <usart_init+0x20a>
    16e8:	e7ce      	b.n	1688 <usart_init+0x9c>

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    16ea:	8a13      	ldrh	r3, [r2, #16]
    16ec:	0bdb      	lsrs	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    16ee:	03db      	lsls	r3, r3, #15
    16f0:	b29b      	uxth	r3, r3
    16f2:	2b00      	cmp	r3, #0
    16f4:	d1f9      	bne.n	16ea <usart_init+0xfe>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    16f6:	466b      	mov	r3, sp
    16f8:	3316      	adds	r3, #22
    16fa:	881b      	ldrh	r3, [r3, #0]
    16fc:	9f03      	ldr	r7, [sp, #12]
    16fe:	817b      	strh	r3, [r7, #10]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1700:	4652      	mov	r2, sl
    1702:	4649      	mov	r1, r9
    1704:	430a      	orrs	r2, r1
    1706:	6873      	ldr	r3, [r6, #4]
    1708:	431a      	orrs	r2, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    170a:	4647      	mov	r7, r8
    170c:	077b      	lsls	r3, r7, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    170e:	431a      	orrs	r2, r3

	if (config->use_external_clock == false) {
    1710:	7df3      	ldrb	r3, [r6, #23]
    1712:	2b00      	cmp	r3, #0
    1714:	d101      	bne.n	171a <usart_init+0x12e>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1716:	2304      	movs	r3, #4
    1718:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    171a:	7d70      	ldrb	r0, [r6, #21]
    171c:	0400      	lsls	r0, r0, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    171e:	7d33      	ldrb	r3, [r6, #20]
    1720:	045b      	lsls	r3, r3, #17
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1722:	4318      	orrs	r0, r3
    1724:	7af1      	ldrb	r1, [r6, #11]
    1726:	7ab3      	ldrb	r3, [r6, #10]
    1728:	430b      	orrs	r3, r1
    172a:	4318      	orrs	r0, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    172c:	8933      	ldrh	r3, [r6, #8]
    172e:	2bff      	cmp	r3, #255	; 0xff
    1730:	d003      	beq.n	173a <usart_init+0x14e>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1732:	2180      	movs	r1, #128	; 0x80
    1734:	0449      	lsls	r1, r1, #17
    1736:	430a      	orrs	r2, r1
#endif
		ctrlb |= config->parity;
    1738:	4318      	orrs	r0, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set run mode during device sleep */
	if (config->run_in_standby) {
    173a:	7f33      	ldrb	r3, [r6, #28]
    173c:	2b00      	cmp	r3, #0
    173e:	d001      	beq.n	1744 <usart_init+0x158>
		/* Enable in sleep mode */
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1740:	2380      	movs	r3, #128	; 0x80
    1742:	431a      	orrs	r2, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1744:	6829      	ldr	r1, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1746:	8a0b      	ldrh	r3, [r1, #16]
    1748:	0bdb      	lsrs	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    174a:	03db      	lsls	r3, r3, #15
    174c:	b29b      	uxth	r3, r3
    174e:	2b00      	cmp	r3, #0
    1750:	d1f9      	bne.n	1746 <usart_init+0x15a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1752:	9f03      	ldr	r7, [sp, #12]
    1754:	6078      	str	r0, [r7, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1756:	6829      	ldr	r1, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1758:	8a0b      	ldrh	r3, [r1, #16]
    175a:	0bdb      	lsrs	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    175c:	03db      	lsls	r3, r3, #15
    175e:	b29b      	uxth	r3, r3
    1760:	2b00      	cmp	r3, #0
    1762:	d1f9      	bne.n	1758 <usart_init+0x16c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1764:	9f03      	ldr	r7, [sp, #12]
    1766:	603a      	str	r2, [r7, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1768:	ab0a      	add	r3, sp, #40	; 0x28
    176a:	2280      	movs	r2, #128	; 0x80
    176c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    176e:	2200      	movs	r2, #0
    1770:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1772:	2101      	movs	r1, #1
    1774:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1776:	70da      	strb	r2, [r3, #3]

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    1778:	6a31      	ldr	r1, [r6, #32]
    177a:	9106      	str	r1, [sp, #24]
    177c:	6a72      	ldr	r2, [r6, #36]	; 0x24
    177e:	9207      	str	r2, [sp, #28]
    1780:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1782:	9308      	str	r3, [sp, #32]
    1784:	6af6      	ldr	r6, [r6, #44]	; 0x2c
    1786:	9609      	str	r6, [sp, #36]	; 0x24
    1788:	af06      	add	r7, sp, #24
    178a:	46b9      	mov	r9, r7
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    178c:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    178e:	ae0a      	add	r6, sp, #40	; 0x28
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1790:	4649      	mov	r1, r9
    1792:	3104      	adds	r1, #4
    1794:	4689      	mov	r9, r1
    1796:	3904      	subs	r1, #4
    1798:	c901      	ldmia	r1!, {r0}

		if (current_pinmux == PINMUX_DEFAULT) {
    179a:	2800      	cmp	r0, #0
    179c:	d103      	bne.n	17a6 <usart_init+0x1ba>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    179e:	1c20      	adds	r0, r4, #0
    17a0:	1c39      	adds	r1, r7, #0
    17a2:	4a21      	ldr	r2, [pc, #132]	; (1828 <usart_init+0x23c>)
    17a4:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    17a6:	1c43      	adds	r3, r0, #1
    17a8:	d005      	beq.n	17b6 <usart_init+0x1ca>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    17aa:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    17ac:	0c00      	lsrs	r0, r0, #16
    17ae:	b2c0      	uxtb	r0, r0
    17b0:	1c31      	adds	r1, r6, #0
    17b2:	4a1e      	ldr	r2, [pc, #120]	; (182c <usart_init+0x240>)
    17b4:	4790      	blx	r2
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    17b6:	1c7b      	adds	r3, r7, #1
    17b8:	b2df      	uxtb	r7, r3
    17ba:	2f04      	cmp	r7, #4
    17bc:	d1e8      	bne.n	1790 <usart_init+0x1a4>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    17be:	2300      	movs	r3, #0
    17c0:	60ab      	str	r3, [r5, #8]
    17c2:	60eb      	str	r3, [r5, #12]
    17c4:	612b      	str	r3, [r5, #16]
	}

	module->tx_buffer_ptr              = NULL;
    17c6:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
    17c8:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
    17ca:	2200      	movs	r2, #0
    17cc:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
    17ce:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
    17d0:	2320      	movs	r3, #32
    17d2:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    17d4:	2321      	movs	r3, #33	; 0x21
    17d6:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    17d8:	2322      	movs	r3, #34	; 0x22
    17da:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    17dc:	2323      	movs	r3, #35	; 0x23
    17de:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    17e0:	6828      	ldr	r0, [r5, #0]
    17e2:	4b09      	ldr	r3, [pc, #36]	; (1808 <usart_init+0x21c>)
    17e4:	4798      	blx	r3
    17e6:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    17e8:	4911      	ldr	r1, [pc, #68]	; (1830 <usart_init+0x244>)
    17ea:	4b12      	ldr	r3, [pc, #72]	; (1834 <usart_init+0x248>)
    17ec:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    17ee:	00a4      	lsls	r4, r4, #2
    17f0:	4b11      	ldr	r3, [pc, #68]	; (1838 <usart_init+0x24c>)
    17f2:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    17f4:	2300      	movs	r3, #0
}
    17f6:	1c18      	adds	r0, r3, #0
    17f8:	b00d      	add	sp, #52	; 0x34
    17fa:	bc3c      	pop	{r2, r3, r4, r5}
    17fc:	4690      	mov	r8, r2
    17fe:	4699      	mov	r9, r3
    1800:	46a2      	mov	sl, r4
    1802:	46ab      	mov	fp, r5
    1804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1806:	46c0      	nop			; (mov r8, r8)
    1808:	00000e25 	.word	0x00000e25
    180c:	40000400 	.word	0x40000400
    1810:	000027a9 	.word	0x000027a9
    1814:	0000271d 	.word	0x0000271d
    1818:	00000c59 	.word	0x00000c59
    181c:	000027c5 	.word	0x000027c5
    1820:	00000b61 	.word	0x00000b61
    1824:	00000b91 	.word	0x00000b91
    1828:	00000ca9 	.word	0x00000ca9
    182c:	00002881 	.word	0x00002881
    1830:	000018cd 	.word	0x000018cd
    1834:	00000e5d 	.word	0x00000e5d
    1838:	20000bec 	.word	0x20000bec

0000183c <_usart_write_buffer>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    183c:	6803      	ldr	r3, [r0, #0]

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    183e:	83c2      	strh	r2, [r0, #30]
	module->tx_buffer_ptr              = tx_data;
    1840:	6181      	str	r1, [r0, #24]
	module->tx_status                  = STATUS_BUSY;
    1842:	2105      	movs	r1, #5
    1844:	2223      	movs	r2, #35	; 0x23
    1846:	5481      	strb	r1, [r0, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1848:	2201      	movs	r2, #1
    184a:	735a      	strb	r2, [r3, #13]
}
    184c:	4770      	bx	lr
    184e:	46c0      	nop			; (mov r8, r8)

00001850 <_usart_read_buffer>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1850:	6803      	ldr	r3, [r0, #0]

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    1852:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr              = rx_data;
    1854:	6141      	str	r1, [r0, #20]
	module->rx_status                  = STATUS_BUSY;
    1856:	2105      	movs	r1, #5
    1858:	2222      	movs	r2, #34	; 0x22
    185a:	5481      	strb	r1, [r0, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    185c:	2204      	movs	r2, #4
    185e:	735a      	strb	r2, [r3, #13]
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif
}
    1860:	4770      	bx	lr
    1862:	46c0      	nop			; (mov r8, r8)

00001864 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1864:	1c93      	adds	r3, r2, #2
    1866:	009b      	lsls	r3, r3, #2
    1868:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    186a:	2301      	movs	r3, #1
    186c:	4093      	lsls	r3, r2
    186e:	1c1a      	adds	r2, r3, #0
    1870:	2320      	movs	r3, #32
    1872:	5cc1      	ldrb	r1, [r0, r3]
    1874:	430a      	orrs	r2, r1
    1876:	54c2      	strb	r2, [r0, r3]
}
    1878:	4770      	bx	lr
    187a:	46c0      	nop			; (mov r8, r8)

0000187c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    187c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    187e:	2317      	movs	r3, #23
		uint16_t length)
{
	/* Sanity check arguments */
	Assert(module);

	if (length == 0) {
    1880:	2a00      	cmp	r2, #0
    1882:	d00a      	beq.n	189a <usart_write_buffer_job+0x1e>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    1884:	8bc4      	ldrh	r4, [r0, #30]
		return STATUS_BUSY;
    1886:	2305      	movs	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    1888:	2c00      	cmp	r4, #0
    188a:	d106      	bne.n	189a <usart_write_buffer_job+0x1e>
		return STATUS_BUSY;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    188c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    188e:	231c      	movs	r3, #28
	if (module->remaining_tx_buffer_length > 0) {
		return STATUS_BUSY;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    1890:	2c00      	cmp	r4, #0
    1892:	d002      	beq.n	189a <usart_write_buffer_job+0x1e>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	_usart_write_buffer(module, tx_data, length);
    1894:	4b02      	ldr	r3, [pc, #8]	; (18a0 <usart_write_buffer_job+0x24>)
    1896:	4798      	blx	r3

	return STATUS_OK;
    1898:	2300      	movs	r3, #0
}
    189a:	1c18      	adds	r0, r3, #0
    189c:	bd10      	pop	{r4, pc}
    189e:	46c0      	nop			; (mov r8, r8)
    18a0:	0000183d 	.word	0x0000183d

000018a4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    18a4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    18a6:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    18a8:	2a00      	cmp	r2, #0
    18aa:	d00a      	beq.n	18c2 <usart_read_buffer_job+0x1e>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    18ac:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    18ae:	231c      	movs	r3, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    18b0:	2c00      	cmp	r4, #0
    18b2:	d006      	beq.n	18c2 <usart_read_buffer_job+0x1e>
		return STATUS_ERR_DENIED;
	}

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    18b4:	8b84      	ldrh	r4, [r0, #28]
		return STATUS_BUSY;
    18b6:	2305      	movs	r3, #5
	if (!(module->receiver_enabled)) {
		return STATUS_ERR_DENIED;
	}

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    18b8:	2c00      	cmp	r4, #0
    18ba:	d102      	bne.n	18c2 <usart_read_buffer_job+0x1e>
		return STATUS_BUSY;
	}

	/* Issue internal asynchronous read */
	_usart_read_buffer(module, rx_data, length);
    18bc:	4b02      	ldr	r3, [pc, #8]	; (18c8 <usart_read_buffer_job+0x24>)
    18be:	4798      	blx	r3

	return STATUS_OK;
    18c0:	2300      	movs	r3, #0
}
    18c2:	1c18      	adds	r0, r3, #0
    18c4:	bd10      	pop	{r4, pc}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	00001851 	.word	0x00001851

000018cc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    18cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    18ce:	0080      	lsls	r0, r0, #2
    18d0:	4b48      	ldr	r3, [pc, #288]	; (19f4 <_usart_interrupt_handler+0x128>)
    18d2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    18d4:	682c      	ldr	r4, [r5, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    18d6:	8a23      	ldrh	r3, [r4, #16]
    18d8:	0bdb      	lsrs	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    18da:	03db      	lsls	r3, r3, #15
    18dc:	b29b      	uxth	r3, r3
    18de:	2b00      	cmp	r3, #0
    18e0:	d1f9      	bne.n	18d6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    18e2:	7ba6      	ldrb	r6, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
    18e4:	7b63      	ldrb	r3, [r4, #13]
    18e6:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    18e8:	2321      	movs	r3, #33	; 0x21
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    18ea:	5ceb      	ldrb	r3, [r5, r3]
    18ec:	2220      	movs	r2, #32
    18ee:	5caa      	ldrb	r2, [r5, r2]
    18f0:	1c17      	adds	r7, r2, #0
    18f2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    18f4:	07f1      	lsls	r1, r6, #31
    18f6:	d520      	bpl.n	193a <_usart_interrupt_handler+0x6e>
		if (module->remaining_tx_buffer_length) {
    18f8:	8beb      	ldrh	r3, [r5, #30]
    18fa:	2b00      	cmp	r3, #0
    18fc:	d01b      	beq.n	1936 <_usart_interrupt_handler+0x6a>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    18fe:	69ab      	ldr	r3, [r5, #24]
    1900:	781a      	ldrb	r2, [r3, #0]
    1902:	1c11      	adds	r1, r2, #0
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1904:	1c5a      	adds	r2, r3, #1
    1906:	61aa      	str	r2, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1908:	796a      	ldrb	r2, [r5, #5]
    190a:	2a01      	cmp	r2, #1
    190c:	d001      	beq.n	1912 <_usart_interrupt_handler+0x46>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    190e:	1c0a      	adds	r2, r1, #0
    1910:	e003      	b.n	191a <_usart_interrupt_handler+0x4e>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send = (*(module->tx_buffer_ptr) << 8);
    1912:	785a      	ldrb	r2, [r3, #1]
    1914:	0212      	lsls	r2, r2, #8
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1916:	3302      	adds	r3, #2
    1918:	61ab      	str	r3, [r5, #24]
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    191a:	05d3      	lsls	r3, r2, #23
    191c:	0ddb      	lsrs	r3, r3, #23
    191e:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
    1920:	8beb      	ldrh	r3, [r5, #30]
    1922:	3b01      	subs	r3, #1
    1924:	b29b      	uxth	r3, r3
    1926:	83eb      	strh	r3, [r5, #30]
    1928:	2b00      	cmp	r3, #0
    192a:	d106      	bne.n	193a <_usart_interrupt_handler+0x6e>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    192c:	2301      	movs	r3, #1
    192e:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1930:	2302      	movs	r3, #2
    1932:	7363      	strb	r3, [r4, #13]
    1934:	e001      	b.n	193a <_usart_interrupt_handler+0x6e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1936:	2301      	movs	r3, #1
    1938:	7323      	strb	r3, [r4, #12]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    193a:	07b2      	lsls	r2, r6, #30
    193c:	d509      	bpl.n	1952 <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    193e:	2302      	movs	r3, #2
    1940:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
    1942:	2200      	movs	r2, #0
    1944:	2323      	movs	r3, #35	; 0x23
    1946:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1948:	07fb      	lsls	r3, r7, #31
    194a:	d502      	bpl.n	1952 <_usart_interrupt_handler+0x86>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    194c:	1c28      	adds	r0, r5, #0
    194e:	68a9      	ldr	r1, [r5, #8]
    1950:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1952:	0772      	lsls	r2, r6, #29
    1954:	d54c      	bpl.n	19f0 <_usart_interrupt_handler+0x124>

		if (module->remaining_rx_buffer_length) {
    1956:	8bab      	ldrh	r3, [r5, #28]
    1958:	2b00      	cmp	r3, #0
    195a:	d047      	beq.n	19ec <_usart_interrupt_handler+0x120>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    195c:	8a23      	ldrh	r3, [r4, #16]

			/* Check if an error has occurred during the receiving */
			if (error_code) {
    195e:	0759      	lsls	r1, r3, #29
    1960:	d022      	beq.n	19a8 <_usart_interrupt_handler+0xdc>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1962:	079a      	lsls	r2, r3, #30
    1964:	d507      	bpl.n	1976 <_usart_interrupt_handler+0xaa>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1966:	221a      	movs	r2, #26
    1968:	2322      	movs	r3, #34	; 0x22
    196a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    196c:	8a22      	ldrh	r2, [r4, #16]
    196e:	2302      	movs	r3, #2
    1970:	4313      	orrs	r3, r2
    1972:	8223      	strh	r3, [r4, #16]
    1974:	e012      	b.n	199c <_usart_interrupt_handler+0xd0>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1976:	0759      	lsls	r1, r3, #29
    1978:	d507      	bpl.n	198a <_usart_interrupt_handler+0xbe>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    197a:	221e      	movs	r2, #30
    197c:	2322      	movs	r3, #34	; 0x22
    197e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    1980:	8a22      	ldrh	r2, [r4, #16]
    1982:	2304      	movs	r3, #4
    1984:	4313      	orrs	r3, r2
    1986:	8223      	strh	r3, [r4, #16]
    1988:	e008      	b.n	199c <_usart_interrupt_handler+0xd0>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    198a:	07da      	lsls	r2, r3, #31
    198c:	d506      	bpl.n	199c <_usart_interrupt_handler+0xd0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    198e:	2213      	movs	r2, #19
    1990:	2322      	movs	r3, #34	; 0x22
    1992:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1994:	8a22      	ldrh	r2, [r4, #16]
    1996:	2301      	movs	r3, #1
    1998:	4313      	orrs	r3, r2
    199a:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    199c:	077b      	lsls	r3, r7, #29
    199e:	d527      	bpl.n	19f0 <_usart_interrupt_handler+0x124>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    19a0:	692b      	ldr	r3, [r5, #16]
    19a2:	1c28      	adds	r0, r5, #0
    19a4:	4798      	blx	r3
    19a6:	e023      	b.n	19f0 <_usart_interrupt_handler+0x124>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    19a8:	8b22      	ldrh	r2, [r4, #24]
    19aa:	05d2      	lsls	r2, r2, #23
    19ac:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    19ae:	b2d3      	uxtb	r3, r2
    19b0:	6969      	ldr	r1, [r5, #20]
    19b2:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    19b4:	696b      	ldr	r3, [r5, #20]
    19b6:	1c59      	adds	r1, r3, #1
    19b8:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    19ba:	7969      	ldrb	r1, [r5, #5]
    19bc:	2901      	cmp	r1, #1
    19be:	d104      	bne.n	19ca <_usart_interrupt_handler+0xfe>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    19c0:	0a12      	lsrs	r2, r2, #8
    19c2:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    19c4:	696b      	ldr	r3, [r5, #20]
    19c6:	3301      	adds	r3, #1
    19c8:	616b      	str	r3, [r5, #20]
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    19ca:	8bab      	ldrh	r3, [r5, #28]
    19cc:	3b01      	subs	r3, #1
    19ce:	b29b      	uxth	r3, r3
    19d0:	83ab      	strh	r3, [r5, #28]
    19d2:	2b00      	cmp	r3, #0
    19d4:	d10c      	bne.n	19f0 <_usart_interrupt_handler+0x124>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    19d6:	2304      	movs	r3, #4
    19d8:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
    19da:	2200      	movs	r2, #0
    19dc:	2322      	movs	r3, #34	; 0x22
    19de:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    19e0:	07ba      	lsls	r2, r7, #30
    19e2:	d505      	bpl.n	19f0 <_usart_interrupt_handler+0x124>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    19e4:	68eb      	ldr	r3, [r5, #12]
    19e6:	1c28      	adds	r0, r5, #0
    19e8:	4798      	blx	r3
    19ea:	e001      	b.n	19f0 <_usart_interrupt_handler+0x124>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    19ec:	2304      	movs	r3, #4
    19ee:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    19f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	20000bec 	.word	0x20000bec

000019f8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    19f8:	b570      	push	{r4, r5, r6, lr}
    19fa:	b088      	sub	sp, #32
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    19fc:	4a0c      	ldr	r2, [pc, #48]	; (1a30 <_tc_get_inst_index+0x38>)
    19fe:	466b      	mov	r3, sp
    1a00:	ca70      	ldmia	r2!, {r4, r5, r6}
    1a02:	c370      	stmia	r3!, {r4, r5, r6}
    1a04:	ca32      	ldmia	r2!, {r1, r4, r5}
    1a06:	c332      	stmia	r3!, {r1, r4, r5}
    1a08:	ca42      	ldmia	r2!, {r1, r6}
    1a0a:	c342      	stmia	r3!, {r1, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1a0c:	9b00      	ldr	r3, [sp, #0]
    1a0e:	4283      	cmp	r3, r0
    1a10:	d005      	beq.n	1a1e <_tc_get_inst_index+0x26>
    1a12:	aa01      	add	r2, sp, #4
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1a14:	2301      	movs	r3, #1
		if (hw == tc_modules[i]) {
    1a16:	ca02      	ldmia	r2!, {r1}
    1a18:	4281      	cmp	r1, r0
    1a1a:	d103      	bne.n	1a24 <_tc_get_inst_index+0x2c>
    1a1c:	e000      	b.n	1a20 <_tc_get_inst_index+0x28>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1a1e:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    1a20:	b2d8      	uxtb	r0, r3
    1a22:	e003      	b.n	1a2c <_tc_get_inst_index+0x34>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1a24:	3301      	adds	r3, #1
    1a26:	2b08      	cmp	r3, #8
    1a28:	d1f5      	bne.n	1a16 <_tc_get_inst_index+0x1e>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1a2a:	2000      	movs	r0, #0
}
    1a2c:	b008      	add	sp, #32
    1a2e:	bd70      	pop	{r4, r5, r6, pc}
    1a30:	000099dc 	.word	0x000099dc

00001a34 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a36:	464f      	mov	r7, r9
    1a38:	4646      	mov	r6, r8
    1a3a:	b4c0      	push	{r6, r7}
    1a3c:	b089      	sub	sp, #36	; 0x24
    1a3e:	1c04      	adds	r4, r0, #0
    1a40:	1c0d      	adds	r5, r1, #0
    1a42:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1a44:	1c08      	adds	r0, r1, #0
    1a46:	4b92      	ldr	r3, [pc, #584]	; (1c90 <tc_init+0x25c>)
    1a48:	4798      	blx	r3
    1a4a:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1a4c:	4f91      	ldr	r7, [pc, #580]	; (1c94 <tc_init+0x260>)
    1a4e:	1c39      	adds	r1, r7, #0
    1a50:	3120      	adds	r1, #32
    1a52:	a806      	add	r0, sp, #24
    1a54:	2208      	movs	r2, #8
    1a56:	4e90      	ldr	r6, [pc, #576]	; (1c98 <tc_init+0x264>)
    1a58:	47b0      	blx	r6
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1a5a:	1c39      	adds	r1, r7, #0
    1a5c:	3128      	adds	r1, #40	; 0x28
    1a5e:	a802      	add	r0, sp, #8
    1a60:	2210      	movs	r2, #16
    1a62:	47b0      	blx	r6
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1a64:	2300      	movs	r3, #0
    1a66:	60a3      	str	r3, [r4, #8]
    1a68:	60e3      	str	r3, [r4, #12]
    1a6a:	6123      	str	r3, [r4, #16]
    1a6c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1a6e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1a70:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1a72:	4648      	mov	r0, r9
    1a74:	0082      	lsls	r2, r0, #2
    1a76:	4b89      	ldr	r3, [pc, #548]	; (1c9c <tc_init+0x268>)
    1a78:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1a7a:	6025      	str	r5, [r4, #0]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1a7c:	4641      	mov	r1, r8
    1a7e:	788b      	ldrb	r3, [r1, #2]
    1a80:	2b08      	cmp	r3, #8
    1a82:	d104      	bne.n	1a8e <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1a84:	2017      	movs	r0, #23

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1a86:	464a      	mov	r2, r9
    1a88:	07d2      	lsls	r2, r2, #31
    1a8a:	d500      	bpl.n	1a8e <tc_init+0x5a>
    1a8c:	e0fb      	b.n	1c86 <tc_init+0x252>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1a8e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1a90:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1a92:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1a94:	07d9      	lsls	r1, r3, #31
    1a96:	d500      	bpl.n	1a9a <tc_init+0x66>
    1a98:	e0f5      	b.n	1c86 <tc_init+0x252>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1a9a:	7beb      	ldrb	r3, [r5, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1a9c:	201c      	movs	r0, #28
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1a9e:	06da      	lsls	r2, r3, #27
    1aa0:	d500      	bpl.n	1aa4 <tc_init+0x70>
    1aa2:	e0f0      	b.n	1c86 <tc_init+0x252>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1aa4:	882b      	ldrh	r3, [r5, #0]
    1aa6:	0799      	lsls	r1, r3, #30
    1aa8:	d500      	bpl.n	1aac <tc_init+0x78>
    1aaa:	e0ec      	b.n	1c86 <tc_init+0x252>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1aac:	4642      	mov	r2, r8
    1aae:	7c13      	ldrb	r3, [r2, #16]
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d00c      	beq.n	1ace <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1ab4:	a901      	add	r1, sp, #4
    1ab6:	2301      	movs	r3, #1
    1ab8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1aba:	2200      	movs	r2, #0
    1abc:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1abe:	4640      	mov	r0, r8
    1ac0:	7e00      	ldrb	r0, [r0, #24]
    1ac2:	7008      	strb	r0, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1ac4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1ac6:	4642      	mov	r2, r8
    1ac8:	7d10      	ldrb	r0, [r2, #20]
    1aca:	4b75      	ldr	r3, [pc, #468]	; (1ca0 <tc_init+0x26c>)
    1acc:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1ace:	4640      	mov	r0, r8
    1ad0:	7f03      	ldrb	r3, [r0, #28]
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	d00e      	beq.n	1af4 <tc_init+0xc0>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1ad6:	a901      	add	r1, sp, #4
    1ad8:	2301      	movs	r3, #1
    1ada:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1adc:	2200      	movs	r2, #0
    1ade:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1ae0:	2224      	movs	r2, #36	; 0x24
    1ae2:	4442      	add	r2, r8
    1ae4:	7812      	ldrb	r2, [r2, #0]
    1ae6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1ae8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1aea:	2320      	movs	r3, #32
    1aec:	4443      	add	r3, r8
    1aee:	7818      	ldrb	r0, [r3, #0]
    1af0:	4b6b      	ldr	r3, [pc, #428]	; (1ca0 <tc_init+0x26c>)
    1af2:	4798      	blx	r3
    1af4:	4b6b      	ldr	r3, [pc, #428]	; (1ca4 <tc_init+0x270>)
    1af6:	6a1a      	ldr	r2, [r3, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1af8:	4649      	mov	r1, r9
    1afa:	0048      	lsls	r0, r1, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1afc:	a902      	add	r1, sp, #8
    1afe:	5a41      	ldrh	r1, [r0, r1]
    1b00:	430a      	orrs	r2, r1
    1b02:	621a      	str	r2, [r3, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32 bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1b04:	4642      	mov	r2, r8
    1b06:	7893      	ldrb	r3, [r2, #2]
    1b08:	2b08      	cmp	r3, #8
    1b0a:	d108      	bne.n	1b1e <tc_init+0xea>
    1b0c:	4b65      	ldr	r3, [pc, #404]	; (1ca4 <tc_init+0x270>)
    1b0e:	6a1a      	ldr	r2, [r3, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1b10:	4648      	mov	r0, r9
    1b12:	3001      	adds	r0, #1
    1b14:	0040      	lsls	r0, r0, #1

	/* Enable the slave counter if counter_size is 32 bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1b16:	a902      	add	r1, sp, #8
    1b18:	5a41      	ldrh	r1, [r0, r1]
    1b1a:	430a      	orrs	r2, r1
    1b1c:	621a      	str	r2, [r3, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1b1e:	4640      	mov	r0, r8
    1b20:	7803      	ldrb	r3, [r0, #0]
    1b22:	4669      	mov	r1, sp
    1b24:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1b26:	ab06      	add	r3, sp, #24
    1b28:	464a      	mov	r2, r9
    1b2a:	5c9e      	ldrb	r6, [r3, r2]
    1b2c:	1c30      	adds	r0, r6, #0
    1b2e:	4b5e      	ldr	r3, [pc, #376]	; (1ca8 <tc_init+0x274>)
    1b30:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1b32:	1c30      	adds	r0, r6, #0
    1b34:	4b5d      	ldr	r3, [pc, #372]	; (1cac <tc_init+0x278>)
    1b36:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    1b38:	4643      	mov	r3, r8
    1b3a:	8898      	ldrh	r0, [r3, #4]
    1b3c:	891b      	ldrh	r3, [r3, #8]
    1b3e:	4318      	orrs	r0, r3
    1b40:	4641      	mov	r1, r8
    1b42:	798a      	ldrb	r2, [r1, #6]
    1b44:	788b      	ldrb	r3, [r1, #2]
    1b46:	4313      	orrs	r3, r2
    1b48:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1b4a:	784b      	ldrb	r3, [r1, #1]
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d002      	beq.n	1b56 <tc_init+0x122>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1b50:	2380      	movs	r3, #128	; 0x80
    1b52:	011b      	lsls	r3, r3, #4
    1b54:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b56:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b58:	227f      	movs	r2, #127	; 0x7f
    1b5a:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1b5c:	4393      	bics	r3, r2
    1b5e:	d1fc      	bne.n	1b5a <tc_init+0x126>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1b60:	8028      	strh	r0, [r5, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1b62:	4642      	mov	r2, r8
    1b64:	7b50      	ldrb	r0, [r2, #13]
	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    1b66:	1e43      	subs	r3, r0, #1
    1b68:	4198      	sbcs	r0, r3
    1b6a:	0080      	lsls	r0, r0, #2
	/* Set ctrlb register */
	if (config->oneshot) {
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
	}

	if (config->count_direction) {
    1b6c:	7b93      	ldrb	r3, [r2, #14]
    1b6e:	2b00      	cmp	r3, #0
    1b70:	d001      	beq.n	1b76 <tc_init+0x142>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1b72:	2301      	movs	r3, #1
    1b74:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b76:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b78:	227f      	movs	r2, #127	; 0x7f
    1b7a:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1b7c:	4393      	bics	r3, r2
    1b7e:	d1fc      	bne.n	1b7a <tc_init+0x146>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1b80:	23ff      	movs	r3, #255	; 0xff
    1b82:	712b      	strb	r3, [r5, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1b84:	2800      	cmp	r0, #0
    1b86:	d005      	beq.n	1b94 <tc_init+0x160>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b88:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b8a:	227f      	movs	r2, #127	; 0x7f
    1b8c:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    1b8e:	4393      	bics	r3, r2
    1b90:	d1fc      	bne.n	1b8c <tc_init+0x158>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1b92:	7168      	strb	r0, [r5, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    1b94:	4643      	mov	r3, r8
    1b96:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1b98:	7adb      	ldrb	r3, [r3, #11]
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d001      	beq.n	1ba2 <tc_init+0x16e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1b9e:	2310      	movs	r3, #16
    1ba0:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1ba2:	4641      	mov	r1, r8
    1ba4:	7b0b      	ldrb	r3, [r1, #12]
    1ba6:	2b00      	cmp	r3, #0
    1ba8:	d001      	beq.n	1bae <tc_init+0x17a>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1baa:	2320      	movs	r3, #32
    1bac:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bae:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1bb0:	227f      	movs	r2, #127	; 0x7f
    1bb2:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1bb4:	4393      	bics	r3, r2
    1bb6:	d1fc      	bne.n	1bb2 <tc_init+0x17e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1bb8:	71a8      	strb	r0, [r5, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bba:	6822      	ldr	r2, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1bbc:	217f      	movs	r1, #127	; 0x7f
    1bbe:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1bc0:	438b      	bics	r3, r1
    1bc2:	d1fc      	bne.n	1bbe <tc_init+0x18a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1bc4:	7923      	ldrb	r3, [r4, #4]
    1bc6:	b2d9      	uxtb	r1, r3
    1bc8:	2904      	cmp	r1, #4
    1bca:	d004      	beq.n	1bd6 <tc_init+0x1a2>
    1bcc:	2908      	cmp	r1, #8
    1bce:	d040      	beq.n	1c52 <tc_init+0x21e>
    1bd0:	2900      	cmp	r1, #0
    1bd2:	d025      	beq.n	1c20 <tc_init+0x1ec>
    1bd4:	e056      	b.n	1c84 <tc_init+0x250>
    1bd6:	217f      	movs	r1, #127	; 0x7f
    1bd8:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    1bda:	438b      	bics	r3, r1
    1bdc:	d1fc      	bne.n	1bd8 <tc_init+0x1a4>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    1bde:	2328      	movs	r3, #40	; 0x28
    1be0:	4642      	mov	r2, r8
    1be2:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    1be4:	742b      	strb	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1be6:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1be8:	227f      	movs	r2, #127	; 0x7f
    1bea:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    1bec:	4393      	bics	r3, r2
    1bee:	d1fc      	bne.n	1bea <tc_init+0x1b6>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    1bf0:	2329      	movs	r3, #41	; 0x29
    1bf2:	4640      	mov	r0, r8
    1bf4:	5cc3      	ldrb	r3, [r0, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    1bf6:	752b      	strb	r3, [r5, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bf8:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1bfa:	227f      	movs	r2, #127	; 0x7f
    1bfc:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    1bfe:	4393      	bics	r3, r2
    1c00:	d1fc      	bne.n	1bfc <tc_init+0x1c8>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg = 
					config->counter_8_bit.compare_capture_channel[0];
    1c02:	232a      	movs	r3, #42	; 0x2a
    1c04:	4641      	mov	r1, r8
    1c06:	5ccb      	ldrb	r3, [r1, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg = 
    1c08:	762b      	strb	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c0a:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c0c:	227f      	movs	r2, #127	; 0x7f
    1c0e:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1c10:	4393      	bics	r3, r2
    1c12:	d1fc      	bne.n	1c0e <tc_init+0x1da>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg = 
					config->counter_8_bit.compare_capture_channel[1];
    1c14:	232b      	movs	r3, #43	; 0x2b
    1c16:	4642      	mov	r2, r8
    1c18:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg = 
    1c1a:	766b      	strb	r3, [r5, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    1c1c:	2000      	movs	r0, #0
    1c1e:	e032      	b.n	1c86 <tc_init+0x252>
    1c20:	217f      	movs	r1, #127	; 0x7f
    1c22:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    1c24:	438b      	bics	r3, r1
    1c26:	d1fc      	bne.n	1c22 <tc_init+0x1ee>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    1c28:	4640      	mov	r0, r8
    1c2a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    1c2c:	822b      	strh	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c2e:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c30:	227f      	movs	r2, #127	; 0x7f
    1c32:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1c34:	4393      	bics	r3, r2
    1c36:	d1fc      	bne.n	1c32 <tc_init+0x1fe>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg = 
					config->counter_16_bit.compare_capture_channel[0];
    1c38:	4641      	mov	r1, r8
    1c3a:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg = 
    1c3c:	832b      	strh	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c3e:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c40:	227f      	movs	r2, #127	; 0x7f
    1c42:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1c44:	4393      	bics	r3, r2
    1c46:	d1fc      	bne.n	1c42 <tc_init+0x20e>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg = 
					config->counter_16_bit.compare_capture_channel[1];
    1c48:	4642      	mov	r2, r8
    1c4a:	8d93      	ldrh	r3, [r2, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg = 
    1c4c:	836b      	strh	r3, [r5, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    1c4e:	2000      	movs	r0, #0
    1c50:	e019      	b.n	1c86 <tc_init+0x252>
    1c52:	217f      	movs	r1, #127	; 0x7f
    1c54:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1c56:	438b      	bics	r3, r1
    1c58:	d1fc      	bne.n	1c54 <tc_init+0x220>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1c5a:	4643      	mov	r3, r8
    1c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c5e:	612b      	str	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c60:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c62:	227f      	movs	r2, #127	; 0x7f
    1c64:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1c66:	4393      	bics	r3, r2
    1c68:	d1fc      	bne.n	1c64 <tc_init+0x230>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg = 
    1c6a:	4640      	mov	r0, r8
    1c6c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1c6e:	61a8      	str	r0, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c70:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c72:	227f      	movs	r2, #127	; 0x7f
    1c74:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1c76:	4393      	bics	r3, r2
    1c78:	d1fc      	bne.n	1c74 <tc_init+0x240>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg = 
					config->counter_32_bit.compare_capture_channel[1];
    1c7a:	4641      	mov	r1, r8
    1c7c:	6b0b      	ldr	r3, [r1, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg = 
    1c7e:	61eb      	str	r3, [r5, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    1c80:	2000      	movs	r0, #0
    1c82:	e000      	b.n	1c86 <tc_init+0x252>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1c84:	2017      	movs	r0, #23
}
    1c86:	b009      	add	sp, #36	; 0x24
    1c88:	bc0c      	pop	{r2, r3}
    1c8a:	4690      	mov	r8, r2
    1c8c:	4699      	mov	r9, r3
    1c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c90:	000019f9 	.word	0x000019f9
    1c94:	000099dc 	.word	0x000099dc
    1c98:	00003759 	.word	0x00003759
    1c9c:	20000c08 	.word	0x20000c08
    1ca0:	00002881 	.word	0x00002881
    1ca4:	40000400 	.word	0x40000400
    1ca8:	000027a9 	.word	0x000027a9
    1cac:	0000271d 	.word	0x0000271d

00001cb0 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1cb0:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1cb2:	6804      	ldr	r4, [r0, #0]
    1cb4:	257f      	movs	r5, #127	; 0x7f
    1cb6:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1cb8:	43ab      	bics	r3, r5
    1cba:	d1fc      	bne.n	1cb6 <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1cbc:	7903      	ldrb	r3, [r0, #4]
    1cbe:	b2d8      	uxtb	r0, r3
    1cc0:	2804      	cmp	r0, #4
    1cc2:	d004      	beq.n	1cce <tc_set_compare_value+0x1e>
    1cc4:	2808      	cmp	r0, #8
    1cc6:	d013      	beq.n	1cf0 <tc_set_compare_value+0x40>
    1cc8:	2800      	cmp	r0, #0
    1cca:	d008      	beq.n	1cde <tc_set_compare_value+0x2e>
    1ccc:	e018      	b.n	1d00 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1cce:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    1cd0:	2901      	cmp	r1, #1
    1cd2:	d816      	bhi.n	1d02 <tc_set_compare_value+0x52>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    1cd4:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    1cd6:	1861      	adds	r1, r4, r1
    1cd8:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    1cda:	2000      	movs	r0, #0
    1cdc:	e011      	b.n	1d02 <tc_set_compare_value+0x52>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1cde:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    1ce0:	2901      	cmp	r1, #1
    1ce2:	d80e      	bhi.n	1d02 <tc_set_compare_value+0x52>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    1ce4:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    1ce6:	310c      	adds	r1, #12
    1ce8:	0049      	lsls	r1, r1, #1
    1cea:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    1cec:	2000      	movs	r0, #0
    1cee:	e008      	b.n	1d02 <tc_set_compare_value+0x52>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1cf0:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    1cf2:	2901      	cmp	r1, #1
    1cf4:	d805      	bhi.n	1d02 <tc_set_compare_value+0x52>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    1cf6:	3106      	adds	r1, #6
    1cf8:	0089      	lsls	r1, r1, #2
    1cfa:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    1cfc:	2000      	movs	r0, #0
    1cfe:	e000      	b.n	1d02 <tc_set_compare_value+0x52>
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1d00:	2017      	movs	r0, #23
}
    1d02:	bd30      	pop	{r4, r5, pc}

00001d04 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1d04:	1c93      	adds	r3, r2, #2
    1d06:	009b      	lsls	r3, r3, #2
    1d08:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1d0a:	2a02      	cmp	r2, #2
    1d0c:	d104      	bne.n	1d18 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1d0e:	7e02      	ldrb	r2, [r0, #24]
    1d10:	2310      	movs	r3, #16
    1d12:	4313      	orrs	r3, r2
    1d14:	7603      	strb	r3, [r0, #24]
    1d16:	e00c      	b.n	1d32 <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1d18:	2a03      	cmp	r2, #3
    1d1a:	d104      	bne.n	1d26 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1d1c:	7e02      	ldrb	r2, [r0, #24]
    1d1e:	2320      	movs	r3, #32
    1d20:	4313      	orrs	r3, r2
    1d22:	7603      	strb	r3, [r0, #24]
    1d24:	e005      	b.n	1d32 <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1d26:	2301      	movs	r3, #1
    1d28:	4093      	lsls	r3, r2
    1d2a:	1c1a      	adds	r2, r3, #0
    1d2c:	7e03      	ldrb	r3, [r0, #24]
    1d2e:	431a      	orrs	r2, r3
    1d30:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    1d32:	2000      	movs	r0, #0
    1d34:	4770      	bx	lr
    1d36:	46c0      	nop			; (mov r8, r8)

00001d38 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1d38:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1d3a:	0080      	lsls	r0, r0, #2
    1d3c:	4b14      	ldr	r3, [pc, #80]	; (1d90 <_tc_interrupt_handler+0x58>)
    1d3e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1d40:	6822      	ldr	r2, [r4, #0]
    1d42:	7b93      	ldrb	r3, [r2, #14]
    1d44:	7e25      	ldrb	r5, [r4, #24]
    1d46:	401d      	ands	r5, r3
    1d48:	7e63      	ldrb	r3, [r4, #25]
    1d4a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1d4c:	07eb      	lsls	r3, r5, #31
    1d4e:	d505      	bpl.n	1d5c <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1d50:	1c20      	adds	r0, r4, #0
    1d52:	68a2      	ldr	r2, [r4, #8]
    1d54:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1d56:	2301      	movs	r3, #1
    1d58:	6822      	ldr	r2, [r4, #0]
    1d5a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1d5c:	07ab      	lsls	r3, r5, #30
    1d5e:	d505      	bpl.n	1d6c <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1d60:	1c20      	adds	r0, r4, #0
    1d62:	68e2      	ldr	r2, [r4, #12]
    1d64:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1d66:	2302      	movs	r3, #2
    1d68:	6822      	ldr	r2, [r4, #0]
    1d6a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1d6c:	06eb      	lsls	r3, r5, #27
    1d6e:	d505      	bpl.n	1d7c <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1d70:	1c20      	adds	r0, r4, #0
    1d72:	6922      	ldr	r2, [r4, #16]
    1d74:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1d76:	2310      	movs	r3, #16
    1d78:	6822      	ldr	r2, [r4, #0]
    1d7a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1d7c:	06ab      	lsls	r3, r5, #26
    1d7e:	d505      	bpl.n	1d8c <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1d80:	1c20      	adds	r0, r4, #0
    1d82:	6962      	ldr	r2, [r4, #20]
    1d84:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1d86:	6823      	ldr	r3, [r4, #0]
    1d88:	2220      	movs	r2, #32
    1d8a:	739a      	strb	r2, [r3, #14]
	}
}
    1d8c:	bd38      	pop	{r3, r4, r5, pc}
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	20000c08 	.word	0x20000c08

00001d94 <TC7_Handler>:
		void TC##n##_Handler(void) \
		{ \
			_tc_interrupt_handler(m); \
		}

MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1d94:	b508      	push	{r3, lr}
    1d96:	2007      	movs	r0, #7
    1d98:	4b01      	ldr	r3, [pc, #4]	; (1da0 <TC7_Handler+0xc>)
    1d9a:	4798      	blx	r3
    1d9c:	bd08      	pop	{r3, pc}
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	00001d39 	.word	0x00001d39

00001da4 <TC6_Handler>:
    1da4:	b508      	push	{r3, lr}
    1da6:	2006      	movs	r0, #6
    1da8:	4b01      	ldr	r3, [pc, #4]	; (1db0 <TC6_Handler+0xc>)
    1daa:	4798      	blx	r3
    1dac:	bd08      	pop	{r3, pc}
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	00001d39 	.word	0x00001d39

00001db4 <TC5_Handler>:
    1db4:	b508      	push	{r3, lr}
    1db6:	2005      	movs	r0, #5
    1db8:	4b01      	ldr	r3, [pc, #4]	; (1dc0 <TC5_Handler+0xc>)
    1dba:	4798      	blx	r3
    1dbc:	bd08      	pop	{r3, pc}
    1dbe:	46c0      	nop			; (mov r8, r8)
    1dc0:	00001d39 	.word	0x00001d39

00001dc4 <TC4_Handler>:
    1dc4:	b508      	push	{r3, lr}
    1dc6:	2004      	movs	r0, #4
    1dc8:	4b01      	ldr	r3, [pc, #4]	; (1dd0 <TC4_Handler+0xc>)
    1dca:	4798      	blx	r3
    1dcc:	bd08      	pop	{r3, pc}
    1dce:	46c0      	nop			; (mov r8, r8)
    1dd0:	00001d39 	.word	0x00001d39

00001dd4 <TC3_Handler>:
    1dd4:	b508      	push	{r3, lr}
    1dd6:	2003      	movs	r0, #3
    1dd8:	4b01      	ldr	r3, [pc, #4]	; (1de0 <TC3_Handler+0xc>)
    1dda:	4798      	blx	r3
    1ddc:	bd08      	pop	{r3, pc}
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	00001d39 	.word	0x00001d39

00001de4 <TC2_Handler>:
    1de4:	b508      	push	{r3, lr}
    1de6:	2002      	movs	r0, #2
    1de8:	4b01      	ldr	r3, [pc, #4]	; (1df0 <TC2_Handler+0xc>)
    1dea:	4798      	blx	r3
    1dec:	bd08      	pop	{r3, pc}
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	00001d39 	.word	0x00001d39

00001df4 <TC1_Handler>:
    1df4:	b508      	push	{r3, lr}
    1df6:	2001      	movs	r0, #1
    1df8:	4b01      	ldr	r3, [pc, #4]	; (1e00 <TC1_Handler+0xc>)
    1dfa:	4798      	blx	r3
    1dfc:	bd08      	pop	{r3, pc}
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	00001d39 	.word	0x00001d39

00001e04 <TC0_Handler>:
    1e04:	b508      	push	{r3, lr}
    1e06:	2000      	movs	r0, #0
    1e08:	4b01      	ldr	r3, [pc, #4]	; (1e10 <TC0_Handler+0xc>)
    1e0a:	4798      	blx	r3
    1e0c:	bd08      	pop	{r3, pc}
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	00001d39 	.word	0x00001d39

00001e14 <wake_up>:
#include <sleep.h>

uint8_t awake_time;
bool	awake = false;

void wake_up() {
    1e14:	b508      	push	{r3, lr}
	if(!awake) {
    1e16:	4b07      	ldr	r3, [pc, #28]	; (1e34 <wake_up+0x20>)
    1e18:	781b      	ldrb	r3, [r3, #0]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d105      	bne.n	1e2a <wake_up+0x16>
/**
 * \brief Disable the OLED sleep mode
 */
static inline void ssd1306_sleep_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
    1e1e:	20af      	movs	r0, #175	; 0xaf
    1e20:	4b05      	ldr	r3, [pc, #20]	; (1e38 <wake_up+0x24>)
    1e22:	4798      	blx	r3
		ssd1306_sleep_disable();
		awake = true;
    1e24:	2201      	movs	r2, #1
    1e26:	4b03      	ldr	r3, [pc, #12]	; (1e34 <wake_up+0x20>)
    1e28:	701a      	strb	r2, [r3, #0]
	}
	awake_time = 0;
    1e2a:	2200      	movs	r2, #0
    1e2c:	4b03      	ldr	r3, [pc, #12]	; (1e3c <wake_up+0x28>)
    1e2e:	701a      	strb	r2, [r3, #0]
}
    1e30:	bd08      	pop	{r3, pc}
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	20000b14 	.word	0x20000b14
    1e38:	00000161 	.word	0x00000161
    1e3c:	20000c28 	.word	0x20000c28

00001e40 <go_to_sleep>:

void go_to_sleep() {
    1e40:	b508      	push	{r3, lr}
/**
 * \brief Enable the OLED sleep mode
 */
static inline void ssd1306_sleep_enable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF);
    1e42:	20ae      	movs	r0, #174	; 0xae
    1e44:	4b05      	ldr	r3, [pc, #20]	; (1e5c <go_to_sleep+0x1c>)
    1e46:	4798      	blx	r3
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    1e48:	4b05      	ldr	r3, [pc, #20]	; (1e60 <go_to_sleep+0x20>)
    1e4a:	6919      	ldr	r1, [r3, #16]
    1e4c:	2204      	movs	r2, #4
    1e4e:	430a      	orrs	r2, r1
    1e50:	611a      	str	r2, [r3, #16]
	ssd1306_sleep_enable();
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
	awake = false;
    1e52:	2200      	movs	r2, #0
    1e54:	4b03      	ldr	r3, [pc, #12]	; (1e64 <go_to_sleep+0x24>)
    1e56:	701a      	strb	r2, [r3, #0]
}
    1e58:	bd08      	pop	{r3, pc}
    1e5a:	46c0      	nop			; (mov r8, r8)
    1e5c:	00000161 	.word	0x00000161
    1e60:	e000ed00 	.word	0xe000ed00
    1e64:	20000b14 	.word	0x20000b14

00001e68 <check_awake>:

void check_awake() {
    1e68:	b508      	push	{r3, lr}
	if(!awake) {
    1e6a:	4b03      	ldr	r3, [pc, #12]	; (1e78 <check_awake+0x10>)
    1e6c:	781b      	ldrb	r3, [r3, #0]
    1e6e:	2b00      	cmp	r3, #0
    1e70:	d101      	bne.n	1e76 <check_awake+0xe>
		wake_up();
    1e72:	4b02      	ldr	r3, [pc, #8]	; (1e7c <check_awake+0x14>)
    1e74:	4798      	blx	r3
	}
}
    1e76:	bd08      	pop	{r3, pc}
    1e78:	20000b14 	.word	0x20000b14
    1e7c:	00001e15 	.word	0x00001e15

00001e80 <check_asleep>:

void check_asleep() {
    1e80:	b508      	push	{r3, lr}
	awake_time++;
    1e82:	4a05      	ldr	r2, [pc, #20]	; (1e98 <check_asleep+0x18>)
    1e84:	7813      	ldrb	r3, [r2, #0]
    1e86:	3301      	adds	r3, #1
    1e88:	b2db      	uxtb	r3, r3
    1e8a:	7013      	strb	r3, [r2, #0]
	if(awake_time >= SLEEP_TIMEOUT) {
    1e8c:	2b09      	cmp	r3, #9
    1e8e:	d901      	bls.n	1e94 <check_asleep+0x14>
		go_to_sleep();
    1e90:	4b02      	ldr	r3, [pc, #8]	; (1e9c <check_asleep+0x1c>)
    1e92:	4798      	blx	r3
	}
    1e94:	bd08      	pop	{r3, pc}
    1e96:	46c0      	nop			; (mov r8, r8)
    1e98:	20000c28 	.word	0x20000c28
    1e9c:	00001e41 	.word	0x00001e41

00001ea0 <tc_callback_second>:
	check_awake();
	gfx_mono_draw_string("ALARM!     ",0, 16, &sysfont);
}

void tc_callback_second(struct tc_module *const module_inst)
{
    1ea0:	b510      	push	{r4, lr}
    1ea2:	b086      	sub	sp, #24
	static int compare_value = 0;
	
	struct rtc_calendar_time time;
	rtc_calendar_get_time(&rtc_instance, &time);
    1ea4:	ac04      	add	r4, sp, #16
    1ea6:	4810      	ldr	r0, [pc, #64]	; (1ee8 <tc_callback_second+0x48>)
    1ea8:	1c21      	adds	r1, r4, #0
    1eaa:	4b10      	ldr	r3, [pc, #64]	; (1eec <tc_callback_second+0x4c>)
    1eac:	4798      	blx	r3
	
	char display_time[8];
	sprintf(display_time, "%02d:%02d:%02d", time.hour, time.minute, time.second);
    1eae:	78a2      	ldrb	r2, [r4, #2]
    1eb0:	7863      	ldrb	r3, [r4, #1]
    1eb2:	7821      	ldrb	r1, [r4, #0]
    1eb4:	9100      	str	r1, [sp, #0]
    1eb6:	a802      	add	r0, sp, #8
    1eb8:	490d      	ldr	r1, [pc, #52]	; (1ef0 <tc_callback_second+0x50>)
    1eba:	4c0e      	ldr	r4, [pc, #56]	; (1ef4 <tc_callback_second+0x54>)
    1ebc:	47a0      	blx	r4
	gfx_mono_draw_string(display_time,0, 0, &sysfont);
    1ebe:	a802      	add	r0, sp, #8
    1ec0:	2100      	movs	r1, #0
    1ec2:	2200      	movs	r2, #0
    1ec4:	4b0c      	ldr	r3, [pc, #48]	; (1ef8 <tc_callback_second+0x58>)
    1ec6:	4c0d      	ldr	r4, [pc, #52]	; (1efc <tc_callback_second+0x5c>)
    1ec8:	47a0      	blx	r4
	
	compare_value += 0x8000;
    1eca:	4b0d      	ldr	r3, [pc, #52]	; (1f00 <tc_callback_second+0x60>)
    1ecc:	6818      	ldr	r0, [r3, #0]
    1ece:	2180      	movs	r1, #128	; 0x80
    1ed0:	0209      	lsls	r1, r1, #8
    1ed2:	1842      	adds	r2, r0, r1
    1ed4:	601a      	str	r2, [r3, #0]
	tc_set_compare_value(&tc_instance, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value);
    1ed6:	480b      	ldr	r0, [pc, #44]	; (1f04 <tc_callback_second+0x64>)
    1ed8:	2100      	movs	r1, #0
    1eda:	4b0b      	ldr	r3, [pc, #44]	; (1f08 <tc_callback_second+0x68>)
    1edc:	4798      	blx	r3
	
	check_asleep();
    1ede:	4b0b      	ldr	r3, [pc, #44]	; (1f0c <tc_callback_second+0x6c>)
    1ee0:	4798      	blx	r3
}
    1ee2:	b006      	add	sp, #24
    1ee4:	bd10      	pop	{r4, pc}
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	20000c2c 	.word	0x20000c2c
    1eec:	000009e5 	.word	0x000009e5
    1ef0:	00009a14 	.word	0x00009a14
    1ef4:	000037bd 	.word	0x000037bd
    1ef8:	20000008 	.word	0x20000008
    1efc:	000005f9 	.word	0x000005f9
    1f00:	20000b18 	.word	0x20000b18
    1f04:	20000c40 	.word	0x20000c40
    1f08:	00001cb1 	.word	0x00001cb1
    1f0c:	00001e81 	.word	0x00001e81

00001f10 <rtc_match_callback>:
	/* Configure and enable callback */
	rtc_calendar_register_callback(&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
}

void rtc_match_callback(void)
{
    1f10:	b510      	push	{r4, lr}
	check_awake();
    1f12:	4b04      	ldr	r3, [pc, #16]	; (1f24 <rtc_match_callback+0x14>)
    1f14:	4798      	blx	r3
	gfx_mono_draw_string("ALARM!     ",0, 16, &sysfont);
    1f16:	4804      	ldr	r0, [pc, #16]	; (1f28 <rtc_match_callback+0x18>)
    1f18:	2100      	movs	r1, #0
    1f1a:	2210      	movs	r2, #16
    1f1c:	4b03      	ldr	r3, [pc, #12]	; (1f2c <rtc_match_callback+0x1c>)
    1f1e:	4c04      	ldr	r4, [pc, #16]	; (1f30 <rtc_match_callback+0x20>)
    1f20:	47a0      	blx	r4
}
    1f22:	bd10      	pop	{r4, pc}
    1f24:	00001e69 	.word	0x00001e69
    1f28:	00009a24 	.word	0x00009a24
    1f2c:	20000008 	.word	0x20000008
    1f30:	000005f9 	.word	0x000005f9

00001f34 <set_time>:
 */ 

#include <sleep.h>
#include <watch.h>
	
void set_time(uint8_t * buf) {
    1f34:	b500      	push	{lr}
    1f36:	b083      	sub	sp, #12
	struct rtc_calendar_time time;
	
	//if(cmd_buffer_size == 15) {
		time.year   = (buf[1]-48)*1000 + (buf[2]-48) * 100 + (buf[3]-48) * 10 + (buf[4]-48);
    1f38:	7903      	ldrb	r3, [r0, #4]
    1f3a:	4a22      	ldr	r2, [pc, #136]	; (1fc4 <set_time+0x90>)
    1f3c:	189b      	adds	r3, r3, r2
    1f3e:	7841      	ldrb	r1, [r0, #1]
    1f40:	22fa      	movs	r2, #250	; 0xfa
    1f42:	0092      	lsls	r2, r2, #2
    1f44:	434a      	muls	r2, r1
    1f46:	189a      	adds	r2, r3, r2
    1f48:	7883      	ldrb	r3, [r0, #2]
    1f4a:	2164      	movs	r1, #100	; 0x64
    1f4c:	434b      	muls	r3, r1
    1f4e:	18d2      	adds	r2, r2, r3
    1f50:	78c3      	ldrb	r3, [r0, #3]
    1f52:	0099      	lsls	r1, r3, #2
    1f54:	18cb      	adds	r3, r1, r3
    1f56:	005b      	lsls	r3, r3, #1
    1f58:	18d3      	adds	r3, r2, r3
    1f5a:	466a      	mov	r2, sp
    1f5c:	80d3      	strh	r3, [r2, #6]
		time.month  = (buf[5]-48) * 10 + (buf[6]-48);
    1f5e:	7982      	ldrb	r2, [r0, #6]
    1f60:	3a10      	subs	r2, #16
    1f62:	7943      	ldrb	r3, [r0, #5]
    1f64:	0099      	lsls	r1, r3, #2
    1f66:	18cb      	adds	r3, r1, r3
    1f68:	005b      	lsls	r3, r3, #1
    1f6a:	18d3      	adds	r3, r2, r3
    1f6c:	466a      	mov	r2, sp
    1f6e:	7153      	strb	r3, [r2, #5]
		time.day    = (buf[7]-48) * 10 + (buf[8]-48);
    1f70:	7a02      	ldrb	r2, [r0, #8]
    1f72:	3a10      	subs	r2, #16
    1f74:	79c3      	ldrb	r3, [r0, #7]
    1f76:	0099      	lsls	r1, r3, #2
    1f78:	18cb      	adds	r3, r1, r3
    1f7a:	005b      	lsls	r3, r3, #1
    1f7c:	18d3      	adds	r3, r2, r3
    1f7e:	466a      	mov	r2, sp
    1f80:	7113      	strb	r3, [r2, #4]
		time.hour	= (buf[9]-48) * 10 + (buf[10]-48);
    1f82:	7a82      	ldrb	r2, [r0, #10]
    1f84:	3a10      	subs	r2, #16
    1f86:	7a43      	ldrb	r3, [r0, #9]
    1f88:	0099      	lsls	r1, r3, #2
    1f8a:	18cb      	adds	r3, r1, r3
    1f8c:	005b      	lsls	r3, r3, #1
    1f8e:	18d3      	adds	r3, r2, r3
    1f90:	466a      	mov	r2, sp
    1f92:	7093      	strb	r3, [r2, #2]
		time.minute = (buf[11]-48) * 10 + (buf[12]-48);
    1f94:	7b02      	ldrb	r2, [r0, #12]
    1f96:	3a10      	subs	r2, #16
    1f98:	7ac3      	ldrb	r3, [r0, #11]
    1f9a:	0099      	lsls	r1, r3, #2
    1f9c:	18cb      	adds	r3, r1, r3
    1f9e:	005b      	lsls	r3, r3, #1
    1fa0:	18d3      	adds	r3, r2, r3
    1fa2:	466a      	mov	r2, sp
    1fa4:	7053      	strb	r3, [r2, #1]
		time.second	= (buf[13]-48) * 10 + (buf[14]-48);
    1fa6:	7b82      	ldrb	r2, [r0, #14]
    1fa8:	3a10      	subs	r2, #16
    1faa:	7b43      	ldrb	r3, [r0, #13]
    1fac:	0099      	lsls	r1, r3, #2
    1fae:	18cb      	adds	r3, r1, r3
    1fb0:	005b      	lsls	r3, r3, #1
    1fb2:	18d3      	adds	r3, r2, r3
    1fb4:	466a      	mov	r2, sp
    1fb6:	7013      	strb	r3, [r2, #0]
		
		rtc_calendar_set_time(&rtc_instance, &time);
    1fb8:	4803      	ldr	r0, [pc, #12]	; (1fc8 <set_time+0x94>)
    1fba:	4669      	mov	r1, sp
    1fbc:	4b03      	ldr	r3, [pc, #12]	; (1fcc <set_time+0x98>)
    1fbe:	4798      	blx	r3
	//}
}
    1fc0:	b003      	add	sp, #12
    1fc2:	bd00      	pop	{pc}
    1fc4:	00002fb0 	.word	0x00002fb0
    1fc8:	20000c2c 	.word	0x20000c2c
    1fcc:	000009cd 	.word	0x000009cd

00001fd0 <set_alarm>:

void set_alarm(uint8_t * buf) {
    1fd0:	b530      	push	{r4, r5, lr}
    1fd2:	b089      	sub	sp, #36	; 0x24
	struct rtc_calendar_alarm_time alarm;
	
	//if(cmd_buffer_size == 7) {
		alarm.time.hour	  = (buf[1]-48) * 10 + (buf[2]-48);
    1fd4:	ac05      	add	r4, sp, #20
    1fd6:	7882      	ldrb	r2, [r0, #2]
    1fd8:	3a10      	subs	r2, #16
    1fda:	7843      	ldrb	r3, [r0, #1]
    1fdc:	0099      	lsls	r1, r3, #2
    1fde:	18cb      	adds	r3, r1, r3
    1fe0:	005b      	lsls	r3, r3, #1
    1fe2:	18d3      	adds	r3, r2, r3
    1fe4:	70a3      	strb	r3, [r4, #2]
		alarm.time.minute = (buf[3]-48) * 10 + (buf[4]-48);
    1fe6:	7902      	ldrb	r2, [r0, #4]
    1fe8:	3a10      	subs	r2, #16
    1fea:	78c3      	ldrb	r3, [r0, #3]
    1fec:	0099      	lsls	r1, r3, #2
    1fee:	18cb      	adds	r3, r1, r3
    1ff0:	005b      	lsls	r3, r3, #1
    1ff2:	18d3      	adds	r3, r2, r3
    1ff4:	7063      	strb	r3, [r4, #1]
		alarm.time.second  = (buf[5]-48) * 10 + (buf[6]-48);
    1ff6:	7982      	ldrb	r2, [r0, #6]
    1ff8:	3a10      	subs	r2, #16
    1ffa:	7943      	ldrb	r3, [r0, #5]
    1ffc:	0099      	lsls	r1, r3, #2
    1ffe:	18cb      	adds	r3, r1, r3
    2000:	005b      	lsls	r3, r3, #1
    2002:	18d3      	adds	r3, r2, r3
    2004:	7023      	strb	r3, [r4, #0]
		alarm.mask = RTC_CALENDAR_ALARM_MASK_HOUR;
    2006:	2303      	movs	r3, #3
    2008:	7223      	strb	r3, [r4, #8]
		rtc_calendar_set_alarm(&rtc_instance, &alarm, RTC_CALENDAR_ALARM_0);
    200a:	4d0d      	ldr	r5, [pc, #52]	; (2040 <__stack_size__+0x40>)
    200c:	1c28      	adds	r0, r5, #0
    200e:	1c21      	adds	r1, r4, #0
    2010:	2200      	movs	r2, #0
    2012:	4b0c      	ldr	r3, [pc, #48]	; (2044 <__stack_size__+0x44>)
    2014:	4798      	blx	r3
		rtc_calendar_enable_callback(&rtc_instance, RTC_CALENDAR_CALLBACK_ALARM_0);
    2016:	1c28      	adds	r0, r5, #0
    2018:	2100      	movs	r1, #0
    201a:	4b0b      	ldr	r3, [pc, #44]	; (2048 <__stack_size__+0x48>)
    201c:	4798      	blx	r3
		
		char alarmdisplay[10];
		sprintf(alarmdisplay, "A: %02d:%02d:%02d", alarm.time.hour, alarm.time.minute, alarm.time.second);
    201e:	78a2      	ldrb	r2, [r4, #2]
    2020:	7863      	ldrb	r3, [r4, #1]
    2022:	7821      	ldrb	r1, [r4, #0]
    2024:	9100      	str	r1, [sp, #0]
    2026:	a802      	add	r0, sp, #8
    2028:	4908      	ldr	r1, [pc, #32]	; (204c <__stack_size__+0x4c>)
    202a:	4c09      	ldr	r4, [pc, #36]	; (2050 <__stack_size__+0x50>)
    202c:	47a0      	blx	r4
		gfx_mono_draw_string(alarmdisplay,0, 16, &sysfont);
    202e:	a802      	add	r0, sp, #8
    2030:	2100      	movs	r1, #0
    2032:	2210      	movs	r2, #16
    2034:	4b07      	ldr	r3, [pc, #28]	; (2054 <__stack_size__+0x54>)
    2036:	4c08      	ldr	r4, [pc, #32]	; (2058 <__stack_size__+0x58>)
    2038:	47a0      	blx	r4
	//}
}
    203a:	b009      	add	sp, #36	; 0x24
    203c:	bd30      	pop	{r4, r5, pc}
    203e:	46c0      	nop			; (mov r8, r8)
    2040:	20000c2c 	.word	0x20000c2c
    2044:	00000a11 	.word	0x00000a11
    2048:	00000af9 	.word	0x00000af9
    204c:	00009a30 	.word	0x00009a30
    2050:	000037bd 	.word	0x000037bd
    2054:	20000008 	.word	0x20000008
    2058:	000005f9 	.word	0x000005f9

0000205c <configure_rtc_calendar>:

void configure_rtc_calendar(void)
{
    205c:	b510      	push	{r4, lr}
    205e:	b086      	sub	sp, #24
	/* Initialize and set time structure to default. */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    2060:	aa01      	add	r2, sp, #4
    2062:	23a0      	movs	r3, #160	; 0xa0
    2064:	011b      	lsls	r3, r3, #4
    2066:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    2068:	2300      	movs	r3, #0
    206a:	7093      	strb	r3, [r2, #2]
	config->continuously_update = false;
    206c:	70d3      	strb	r3, [r2, #3]
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    206e:	21fa      	movs	r1, #250	; 0xfa
    2070:	00c9      	lsls	r1, r1, #3
    2072:	80d1      	strh	r1, [r2, #6]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    2074:	7213      	strb	r3, [r2, #8]
    2076:	7253      	strb	r3, [r2, #9]
    2078:	7293      	strb	r3, [r2, #10]
    207a:	4668      	mov	r0, sp
    207c:	73c3      	strb	r3, [r0, #15]
    207e:	2301      	movs	r3, #1
    2080:	7313      	strb	r3, [r2, #12]
    2082:	7353      	strb	r3, [r2, #13]
    2084:	81d1      	strh	r1, [r2, #14]
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    2086:	2106      	movs	r1, #6
    2088:	7411      	strb	r1, [r2, #16]
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
	config_rtc_calendar.clock_24h = true;
    208a:	7113      	strb	r3, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    208c:	4c0c      	ldr	r4, [pc, #48]	; (20c0 <configure_rtc_calendar+0x64>)
    208e:	1c20      	adds	r0, r4, #0
    2090:	490c      	ldr	r1, [pc, #48]	; (20c4 <configure_rtc_calendar+0x68>)
    2092:	4b0d      	ldr	r3, [pc, #52]	; (20c8 <configure_rtc_calendar+0x6c>)
    2094:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2096:	6821      	ldr	r1, [r4, #0]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2098:	2208      	movs	r2, #8
    209a:	4b0c      	ldr	r3, [pc, #48]	; (20cc <configure_rtc_calendar+0x70>)
    209c:	601a      	str	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    209e:	1c0a      	adds	r2, r1, #0

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    20a0:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    20a2:	b25b      	sxtb	r3, r3
    20a4:	2b00      	cmp	r3, #0
    20a6:	dbfb      	blt.n	20a0 <configure_rtc_calendar+0x44>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    20a8:	880a      	ldrh	r2, [r1, #0]
    20aa:	2302      	movs	r3, #2
    20ac:	4313      	orrs	r3, r2
    20ae:	800b      	strh	r3, [r1, #0]
	rtc_calendar_enable(&rtc_instance);
	
	/* Configure and enable callback */
	rtc_calendar_register_callback(&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
    20b0:	4803      	ldr	r0, [pc, #12]	; (20c0 <configure_rtc_calendar+0x64>)
    20b2:	4907      	ldr	r1, [pc, #28]	; (20d0 <configure_rtc_calendar+0x74>)
    20b4:	2200      	movs	r2, #0
    20b6:	4b07      	ldr	r3, [pc, #28]	; (20d4 <configure_rtc_calendar+0x78>)
    20b8:	4798      	blx	r3
}
    20ba:	b006      	add	sp, #24
    20bc:	bd10      	pop	{r4, pc}
    20be:	46c0      	nop			; (mov r8, r8)
    20c0:	20000c2c 	.word	0x20000c2c
    20c4:	40001400 	.word	0x40001400
    20c8:	00000a41 	.word	0x00000a41
    20cc:	e000e100 	.word	0xe000e100
    20d0:	00001f11 	.word	0x00001f11
    20d4:	00000ad5 	.word	0x00000ad5

000020d8 <configure_tc>:
	
	check_asleep();
}

void configure_tc(void)
{
    20d8:	b510      	push	{r4, lr}
    20da:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    20dc:	aa01      	add	r2, sp, #4
    20de:	2300      	movs	r3, #0
    20e0:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    20e2:	2100      	movs	r1, #0
    20e4:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    20e6:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    20e8:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    20ea:	7051      	strb	r1, [r2, #1]

	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    20ec:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    20ee:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    20f0:	7311      	strb	r1, [r2, #12]

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    20f2:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    20f4:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    20f6:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    20f8:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    20fa:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    20fc:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    20fe:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2100:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2102:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2104:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size = TC_COUNTER_SIZE_16BIT;
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_FREQ;
	config_tc.counter_16_bit.compare_capture_channel[0] = 0xFFFF;
    2106:	2301      	movs	r3, #1
    2108:	425b      	negs	r3, r3
    210a:	8553      	strh	r3, [r2, #42]	; 0x2a
	
	config_tc.clock_source = GCLK_GENERATOR_1;
    210c:	2301      	movs	r3, #1
    210e:	7013      	strb	r3, [r2, #0]
	tc_init(&tc_instance, EXT1_PWM_MODULE, &config_tc);
    2110:	4c07      	ldr	r4, [pc, #28]	; (2130 <configure_tc+0x58>)
    2112:	1c20      	adds	r0, r4, #0
    2114:	4907      	ldr	r1, [pc, #28]	; (2134 <configure_tc+0x5c>)
    2116:	4b08      	ldr	r3, [pc, #32]	; (2138 <configure_tc+0x60>)
    2118:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    211a:	6822      	ldr	r2, [r4, #0]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    211c:	217f      	movs	r1, #127	; 0x7f
    211e:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    2120:	438b      	bics	r3, r1
    2122:	d1fc      	bne.n	211e <configure_tc+0x46>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2124:	8811      	ldrh	r1, [r2, #0]
    2126:	2302      	movs	r3, #2
    2128:	430b      	orrs	r3, r1
    212a:	8013      	strh	r3, [r2, #0]
	tc_enable(&tc_instance);
}
    212c:	b00e      	add	sp, #56	; 0x38
    212e:	bd10      	pop	{r4, pc}
    2130:	20000c40 	.word	0x20000c40
    2134:	42003800 	.word	0x42003800
    2138:	00001a35 	.word	0x00001a35

0000213c <configure_tc_callbacks>:

void configure_tc_callbacks(void)
{
    213c:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance, tc_callback_second, TC_CALLBACK_CC_CHANNEL0);
    213e:	4c0d      	ldr	r4, [pc, #52]	; (2174 <configure_tc_callbacks+0x38>)
    2140:	1c20      	adds	r0, r4, #0
    2142:	490d      	ldr	r1, [pc, #52]	; (2178 <configure_tc_callbacks+0x3c>)
    2144:	2202      	movs	r2, #2
    2146:	4b0d      	ldr	r3, [pc, #52]	; (217c <configure_tc_callbacks+0x40>)
    2148:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    214a:	6820      	ldr	r0, [r4, #0]
    214c:	4b0c      	ldr	r3, [pc, #48]	; (2180 <configure_tc_callbacks+0x44>)
    214e:	4798      	blx	r3
	static uint8_t tc_interrupt_vectors[TC_INST_NUM] =
		{
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2150:	4b0c      	ldr	r3, [pc, #48]	; (2184 <configure_tc_callbacks+0x48>)
    2152:	5c1b      	ldrb	r3, [r3, r0]
    2154:	221f      	movs	r2, #31
    2156:	401a      	ands	r2, r3
    2158:	2301      	movs	r3, #1
    215a:	4093      	lsls	r3, r2
    215c:	1c1a      	adds	r2, r3, #0
    215e:	4b0a      	ldr	r3, [pc, #40]	; (2188 <configure_tc_callbacks+0x4c>)
    2160:	601a      	str	r2, [r3, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2162:	7e62      	ldrb	r2, [r4, #25]
    2164:	2310      	movs	r3, #16
    2166:	4313      	orrs	r3, r2
    2168:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    216a:	6823      	ldr	r3, [r4, #0]
    216c:	2210      	movs	r2, #16
    216e:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
    2170:	bd10      	pop	{r4, pc}
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	20000c40 	.word	0x20000c40
    2178:	00001ea1 	.word	0x00001ea1
    217c:	00001d05 	.word	0x00001d05
    2180:	000019f9 	.word	0x000019f9
    2184:	00009a44 	.word	0x00009a44
    2188:	e000e100 	.word	0xe000e100

0000218c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    218c:	4b0c      	ldr	r3, [pc, #48]	; (21c0 <cpu_irq_enter_critical+0x34>)
    218e:	681b      	ldr	r3, [r3, #0]
    2190:	2b00      	cmp	r3, #0
    2192:	d110      	bne.n	21b6 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2194:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2198:	2b00      	cmp	r3, #0
    219a:	d109      	bne.n	21b0 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    219c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    219e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    21a2:	2200      	movs	r2, #0
    21a4:	4b07      	ldr	r3, [pc, #28]	; (21c4 <cpu_irq_enter_critical+0x38>)
    21a6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    21a8:	2201      	movs	r2, #1
    21aa:	4b07      	ldr	r3, [pc, #28]	; (21c8 <cpu_irq_enter_critical+0x3c>)
    21ac:	701a      	strb	r2, [r3, #0]
    21ae:	e002      	b.n	21b6 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    21b0:	2200      	movs	r2, #0
    21b2:	4b05      	ldr	r3, [pc, #20]	; (21c8 <cpu_irq_enter_critical+0x3c>)
    21b4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    21b6:	4b02      	ldr	r3, [pc, #8]	; (21c0 <cpu_irq_enter_critical+0x34>)
    21b8:	681a      	ldr	r2, [r3, #0]
    21ba:	3201      	adds	r2, #1
    21bc:	601a      	str	r2, [r3, #0]
}
    21be:	4770      	bx	lr
    21c0:	20000b1c 	.word	0x20000b1c
    21c4:	20000014 	.word	0x20000014
    21c8:	20000b20 	.word	0x20000b20

000021cc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    21cc:	4b08      	ldr	r3, [pc, #32]	; (21f0 <cpu_irq_leave_critical+0x24>)
    21ce:	681a      	ldr	r2, [r3, #0]
    21d0:	3a01      	subs	r2, #1
    21d2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    21d4:	681b      	ldr	r3, [r3, #0]
    21d6:	2b00      	cmp	r3, #0
    21d8:	d109      	bne.n	21ee <cpu_irq_leave_critical+0x22>
    21da:	4b06      	ldr	r3, [pc, #24]	; (21f4 <cpu_irq_leave_critical+0x28>)
    21dc:	781b      	ldrb	r3, [r3, #0]
    21de:	2b00      	cmp	r3, #0
    21e0:	d005      	beq.n	21ee <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    21e2:	2201      	movs	r2, #1
    21e4:	4b04      	ldr	r3, [pc, #16]	; (21f8 <cpu_irq_leave_critical+0x2c>)
    21e6:	701a      	strb	r2, [r3, #0]
    21e8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    21ec:	b662      	cpsie	i
	}
}
    21ee:	4770      	bx	lr
    21f0:	20000b1c 	.word	0x20000b1c
    21f4:	20000b20 	.word	0x20000b20
    21f8:	20000014 	.word	0x20000014

000021fc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    21fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21fe:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2200:	ac01      	add	r4, sp, #4
    2202:	2501      	movs	r5, #1
    2204:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    2206:	2700      	movs	r7, #0
    2208:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    220a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    220c:	200e      	movs	r0, #14
    220e:	1c21      	adds	r1, r4, #0
    2210:	4e06      	ldr	r6, [pc, #24]	; (222c <system_board_init+0x30>)
    2212:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2214:	2280      	movs	r2, #128	; 0x80
    2216:	01d2      	lsls	r2, r2, #7
    2218:	4b05      	ldr	r3, [pc, #20]	; (2230 <system_board_init+0x34>)
    221a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    221c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    221e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    2220:	200f      	movs	r0, #15
    2222:	1c21      	adds	r1, r4, #0
    2224:	47b0      	blx	r6

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
	
#endif
}
    2226:	b003      	add	sp, #12
    2228:	bdf0      	pop	{r4, r5, r6, r7, pc}
    222a:	46c0      	nop			; (mov r8, r8)
    222c:	00002235 	.word	0x00002235
    2230:	41004400 	.word	0x41004400

00002234 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2234:	b500      	push	{lr}
    2236:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2238:	ab01      	add	r3, sp, #4
    223a:	2280      	movs	r2, #128	; 0x80
    223c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    223e:	780a      	ldrb	r2, [r1, #0]
    2240:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2242:	784a      	ldrb	r2, [r1, #1]
    2244:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2246:	788a      	ldrb	r2, [r1, #2]
    2248:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    224a:	1c19      	adds	r1, r3, #0
    224c:	4b01      	ldr	r3, [pc, #4]	; (2254 <port_pin_set_config+0x20>)
    224e:	4798      	blx	r3
}
    2250:	b003      	add	sp, #12
    2252:	bd00      	pop	{pc}
    2254:	00002881 	.word	0x00002881

00002258 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2258:	b508      	push	{r3, lr}
	switch (clock_source) {
    225a:	2807      	cmp	r0, #7
    225c:	d82b      	bhi.n	22b6 <system_clock_source_get_hz+0x5e>
    225e:	0080      	lsls	r0, r0, #2
    2260:	4b17      	ldr	r3, [pc, #92]	; (22c0 <system_clock_source_get_hz+0x68>)
    2262:	581b      	ldr	r3, [r3, r0]
    2264:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    2266:	2080      	movs	r0, #128	; 0x80
    2268:	0200      	lsls	r0, r0, #8
    226a:	e027      	b.n	22bc <system_clock_source_get_hz+0x64>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    226c:	4b15      	ldr	r3, [pc, #84]	; (22c4 <system_clock_source_get_hz+0x6c>)
    226e:	68d8      	ldr	r0, [r3, #12]
    2270:	e024      	b.n	22bc <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2272:	4b15      	ldr	r3, [pc, #84]	; (22c8 <system_clock_source_get_hz+0x70>)
    2274:	6a18      	ldr	r0, [r3, #32]
    2276:	0580      	lsls	r0, r0, #22
    2278:	0f80      	lsrs	r0, r0, #30
    227a:	4b14      	ldr	r3, [pc, #80]	; (22cc <system_clock_source_get_hz+0x74>)
    227c:	40c3      	lsrs	r3, r0
    227e:	1c18      	adds	r0, r3, #0
    2280:	e01c      	b.n	22bc <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    2282:	4b10      	ldr	r3, [pc, #64]	; (22c4 <system_clock_source_get_hz+0x6c>)
    2284:	6918      	ldr	r0, [r3, #16]
    2286:	e019      	b.n	22bc <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2288:	4b0e      	ldr	r3, [pc, #56]	; (22c4 <system_clock_source_get_hz+0x6c>)
    228a:	681b      	ldr	r3, [r3, #0]
			return 0;
    228c:	2000      	movs	r0, #0
		return _system_clock_inst.xosc32k.frequency;

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    228e:	079a      	lsls	r2, r3, #30
    2290:	d514      	bpl.n	22bc <system_clock_source_get_hz+0x64>
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2292:	490d      	ldr	r1, [pc, #52]	; (22c8 <system_clock_source_get_hz+0x70>)
    2294:	2210      	movs	r2, #16
    2296:	68cb      	ldr	r3, [r1, #12]
    2298:	421a      	tst	r2, r3
    229a:	d0fc      	beq.n	2296 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    229c:	4b09      	ldr	r3, [pc, #36]	; (22c4 <system_clock_source_get_hz+0x6c>)
    229e:	681b      	ldr	r3, [r3, #0]
    22a0:	075a      	lsls	r2, r3, #29
    22a2:	d50a      	bpl.n	22ba <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    22a4:	2000      	movs	r0, #0
    22a6:	4b0a      	ldr	r3, [pc, #40]	; (22d0 <system_clock_source_get_hz+0x78>)
    22a8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    22aa:	4b06      	ldr	r3, [pc, #24]	; (22c4 <system_clock_source_get_hz+0x6c>)
    22ac:	689b      	ldr	r3, [r3, #8]
    22ae:	041b      	lsls	r3, r3, #16
    22b0:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    22b2:	4358      	muls	r0, r3
    22b4:	e002      	b.n	22bc <system_clock_source_get_hz+0x64>
		}

		return 48000000UL;

	default:
		return 0;
    22b6:	2000      	movs	r0, #0
    22b8:	e000      	b.n	22bc <system_clock_source_get_hz+0x64>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    22ba:	4806      	ldr	r0, [pc, #24]	; (22d4 <system_clock_source_get_hz+0x7c>)

	default:
		return 0;
	}
}
    22bc:	bd08      	pop	{r3, pc}
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	00009a4c 	.word	0x00009a4c
    22c4:	20000b24 	.word	0x20000b24
    22c8:	40000800 	.word	0x40000800
    22cc:	007a1200 	.word	0x007a1200
    22d0:	000027c5 	.word	0x000027c5
    22d4:	02dc6c00 	.word	0x02dc6c00

000022d8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    22d8:	b530      	push	{r4, r5, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    22da:	4b0c      	ldr	r3, [pc, #48]	; (230c <system_clock_source_osc8m_set_config+0x34>)
    22dc:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    22de:	7802      	ldrb	r2, [r0, #0]
    22e0:	2103      	movs	r1, #3
    22e2:	4011      	ands	r1, r2
    22e4:	0209      	lsls	r1, r1, #8
    22e6:	4a0a      	ldr	r2, [pc, #40]	; (2310 <system_clock_source_osc8m_set_config+0x38>)
    22e8:	4014      	ands	r4, r2
    22ea:	430c      	orrs	r4, r1
	temp.bit.ONDEMAND = config->on_demand;
    22ec:	7881      	ldrb	r1, [r0, #2]
    22ee:	2201      	movs	r2, #1
    22f0:	4011      	ands	r1, r2
    22f2:	01c9      	lsls	r1, r1, #7
    22f4:	2580      	movs	r5, #128	; 0x80
    22f6:	43ac      	bics	r4, r5
    22f8:	430c      	orrs	r4, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    22fa:	7841      	ldrb	r1, [r0, #1]
    22fc:	400a      	ands	r2, r1
    22fe:	0191      	lsls	r1, r2, #6
    2300:	2240      	movs	r2, #64	; 0x40
    2302:	4394      	bics	r4, r2
    2304:	1c22      	adds	r2, r4, #0
    2306:	430a      	orrs	r2, r1

	SYSCTRL->OSC8M = temp;
    2308:	621a      	str	r2, [r3, #32]
}
    230a:	bd30      	pop	{r4, r5, pc}
    230c:	40000800 	.word	0x40000800
    2310:	fffffcff 	.word	0xfffffcff

00002314 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2314:	b510      	push	{r4, lr}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2316:	4b1e      	ldr	r3, [pc, #120]	; (2390 <system_clock_source_xosc32k_set_config+0x7c>)
    2318:	8a9c      	ldrh	r4, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    231a:	7843      	ldrb	r3, [r0, #1]
    231c:	2207      	movs	r2, #7
    231e:	4013      	ands	r3, r2
    2320:	021b      	lsls	r3, r3, #8
    2322:	4a1c      	ldr	r2, [pc, #112]	; (2394 <system_clock_source_xosc32k_set_config+0x80>)
    2324:	4014      	ands	r4, r2
    2326:	431c      	orrs	r4, r3

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2328:	7803      	ldrb	r3, [r0, #0]
    232a:	2b00      	cmp	r3, #0
    232c:	d102      	bne.n	2334 <system_clock_source_xosc32k_set_config+0x20>
		temp.bit.XTALEN = 1;
    232e:	2304      	movs	r3, #4
    2330:	431c      	orrs	r4, r3
    2332:	e001      	b.n	2338 <system_clock_source_xosc32k_set_config+0x24>
	} else {
		temp.bit.XTALEN = 0;
    2334:	2304      	movs	r3, #4
    2336:	439c      	bics	r4, r3
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2338:	7882      	ldrb	r2, [r0, #2]
    233a:	2301      	movs	r3, #1
    233c:	401a      	ands	r2, r3
    233e:	0152      	lsls	r2, r2, #5
    2340:	2120      	movs	r1, #32
    2342:	438c      	bics	r4, r1
    2344:	4314      	orrs	r4, r2
	temp.bit.EN1K = config->enable_1khz_output;
    2346:	78c2      	ldrb	r2, [r0, #3]
    2348:	401a      	ands	r2, r3
    234a:	0112      	lsls	r2, r2, #4
    234c:	2110      	movs	r1, #16
    234e:	438c      	bics	r4, r1
    2350:	4314      	orrs	r4, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2352:	7902      	ldrb	r2, [r0, #4]
    2354:	401a      	ands	r2, r3
    2356:	00d2      	lsls	r2, r2, #3
    2358:	2108      	movs	r1, #8
    235a:	438c      	bics	r4, r1
    235c:	4314      	orrs	r4, r2

	temp.bit.ONDEMAND = config->on_demand;
    235e:	7b42      	ldrb	r2, [r0, #13]
    2360:	401a      	ands	r2, r3
    2362:	01d2      	lsls	r2, r2, #7
    2364:	2180      	movs	r1, #128	; 0x80
    2366:	438c      	bics	r4, r1
    2368:	4314      	orrs	r4, r2
	temp.bit.RUNSTDBY = config->run_in_standby;
    236a:	7b02      	ldrb	r2, [r0, #12]
    236c:	401a      	ands	r2, r3
    236e:	0192      	lsls	r2, r2, #6
    2370:	2140      	movs	r1, #64	; 0x40
    2372:	438c      	bics	r4, r1
    2374:	4314      	orrs	r4, r2
	temp.bit.WRTLOCK  = config->write_once;
    2376:	7b82      	ldrb	r2, [r0, #14]
    2378:	4013      	ands	r3, r2
    237a:	031a      	lsls	r2, r3, #12
    237c:	4906      	ldr	r1, [pc, #24]	; (2398 <system_clock_source_xosc32k_set_config+0x84>)
    237e:	1c23      	adds	r3, r4, #0
    2380:	400b      	ands	r3, r1
    2382:	4313      	orrs	r3, r2

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2384:	6881      	ldr	r1, [r0, #8]
    2386:	4a05      	ldr	r2, [pc, #20]	; (239c <system_clock_source_xosc32k_set_config+0x88>)
    2388:	6111      	str	r1, [r2, #16]

	SYSCTRL->XOSC32K = temp;
    238a:	4a01      	ldr	r2, [pc, #4]	; (2390 <system_clock_source_xosc32k_set_config+0x7c>)
    238c:	8293      	strh	r3, [r2, #20]
}
    238e:	bd10      	pop	{r4, pc}
    2390:	40000800 	.word	0x40000800
    2394:	fffff8ff 	.word	0xfffff8ff
    2398:	ffffefff 	.word	0xffffefff
    239c:	20000b24 	.word	0x20000b24

000023a0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    23a0:	2807      	cmp	r0, #7
    23a2:	d83b      	bhi.n	241c <system_clock_source_enable+0x7c>
    23a4:	0080      	lsls	r0, r0, #2
    23a6:	4b1e      	ldr	r3, [pc, #120]	; (2420 <system_clock_source_enable+0x80>)
    23a8:	581b      	ldr	r3, [r3, r0]
    23aa:	469f      	mov	pc, r3
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    23ac:	2000      	movs	r0, #0
    23ae:	e036      	b.n	241e <system_clock_source_enable+0x7e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    23b0:	4b1c      	ldr	r3, [pc, #112]	; (2424 <system_clock_source_enable+0x84>)
    23b2:	6a19      	ldr	r1, [r3, #32]
    23b4:	2202      	movs	r2, #2
    23b6:	430a      	orrs	r2, r1
    23b8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    23ba:	2000      	movs	r0, #0
    23bc:	e02f      	b.n	241e <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    23be:	4b19      	ldr	r3, [pc, #100]	; (2424 <system_clock_source_enable+0x84>)
    23c0:	6999      	ldr	r1, [r3, #24]
    23c2:	2202      	movs	r2, #2
    23c4:	430a      	orrs	r2, r1
    23c6:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    23c8:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    23ca:	e028      	b.n	241e <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    23cc:	4b15      	ldr	r3, [pc, #84]	; (2424 <system_clock_source_enable+0x84>)
    23ce:	8a19      	ldrh	r1, [r3, #16]
    23d0:	2202      	movs	r2, #2
    23d2:	430a      	orrs	r2, r1
    23d4:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    23d6:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    23d8:	e021      	b.n	241e <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    23da:	4b12      	ldr	r3, [pc, #72]	; (2424 <system_clock_source_enable+0x84>)
    23dc:	8a99      	ldrh	r1, [r3, #20]
    23de:	2202      	movs	r2, #2
    23e0:	430a      	orrs	r2, r1
    23e2:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    23e4:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    23e6:	e01a      	b.n	241e <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    23e8:	4b0f      	ldr	r3, [pc, #60]	; (2428 <system_clock_source_enable+0x88>)
    23ea:	6819      	ldr	r1, [r3, #0]
    23ec:	2202      	movs	r2, #2
    23ee:	430a      	orrs	r2, r1
    23f0:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    23f2:	681a      	ldr	r2, [r3, #0]
    23f4:	4b0d      	ldr	r3, [pc, #52]	; (242c <system_clock_source_enable+0x8c>)
    23f6:	401a      	ands	r2, r3
    23f8:	4b0a      	ldr	r3, [pc, #40]	; (2424 <system_clock_source_enable+0x84>)
    23fa:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    23fc:	1c19      	adds	r1, r3, #0
    23fe:	2210      	movs	r2, #16
    2400:	68cb      	ldr	r3, [r1, #12]
    2402:	421a      	tst	r2, r3
    2404:	d0fc      	beq.n	2400 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2406:	4a08      	ldr	r2, [pc, #32]	; (2428 <system_clock_source_enable+0x88>)
    2408:	6891      	ldr	r1, [r2, #8]
    240a:	4b06      	ldr	r3, [pc, #24]	; (2424 <system_clock_source_enable+0x84>)
    240c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    240e:	6851      	ldr	r1, [r2, #4]
    2410:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2412:	6812      	ldr	r2, [r2, #0]
    2414:	b292      	uxth	r2, r2
    2416:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2418:	2000      	movs	r0, #0
    241a:	e000      	b.n	241e <system_clock_source_enable+0x7e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    241c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    241e:	4770      	bx	lr
    2420:	00009a6c 	.word	0x00009a6c
    2424:	40000800 	.word	0x40000800
    2428:	20000b24 	.word	0x20000b24
    242c:	0000ff7f 	.word	0x0000ff7f

00002430 <system_clock_source_is_ready>:
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
	uint32_t mask;

	switch (clock_source) {
    2430:	2807      	cmp	r0, #7
    2432:	d814      	bhi.n	245e <system_clock_source_is_ready+0x2e>
    2434:	0080      	lsls	r0, r0, #2
    2436:	4b0b      	ldr	r3, [pc, #44]	; (2464 <system_clock_source_is_ready+0x34>)
    2438:	581b      	ldr	r3, [r3, r0]
    243a:	469f      	mov	pc, r3
		mask = SYSCTRL_PCLKSR_DFLLRDY;
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    243c:	2001      	movs	r0, #1
    243e:	e00f      	b.n	2460 <system_clock_source_is_ready+0x30>
	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    2440:	2001      	movs	r0, #1
		break;
    2442:	e006      	b.n	2452 <system_clock_source_is_ready+0x22>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    2444:	2002      	movs	r0, #2
		break;
    2446:	e004      	b.n	2452 <system_clock_source_is_ready+0x22>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		mask = SYSCTRL_PCLKSR_DFLLRDY;
    2448:	2010      	movs	r0, #16
		break;
    244a:	e002      	b.n	2452 <system_clock_source_is_ready+0x22>
{
	uint32_t mask;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    244c:	2008      	movs	r0, #8
    244e:	e000      	b.n	2452 <system_clock_source_is_ready+0x22>
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    2450:	2004      	movs	r0, #4

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) != 0);
    2452:	4b05      	ldr	r3, [pc, #20]	; (2468 <system_clock_source_is_ready+0x38>)
    2454:	68db      	ldr	r3, [r3, #12]
    2456:	4018      	ands	r0, r3
    2458:	1e43      	subs	r3, r0, #1
    245a:	4198      	sbcs	r0, r3
    245c:	e000      	b.n	2460 <system_clock_source_is_ready+0x30>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;

	default:
		return false;
    245e:	2000      	movs	r0, #0
	}

	return ((SYSCTRL->PCLKSR.reg & mask) != 0);
}
    2460:	4770      	bx	lr
    2462:	46c0      	nop			; (mov r8, r8)
    2464:	00009a8c 	.word	0x00009a8c
    2468:	40000800 	.word	0x40000800

0000246c <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    246c:	b5f0      	push	{r4, r5, r6, r7, lr}
    246e:	4647      	mov	r7, r8
    2470:	b480      	push	{r7}
    2472:	b088      	sub	sp, #32
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD12RDY | SYSCTRL_INTFLAG_BOD33RDY |
    2474:	4a33      	ldr	r2, [pc, #204]	; (2544 <system_clock_init+0xd8>)
    2476:	4b34      	ldr	r3, [pc, #208]	; (2548 <system_clock_init+0xdc>)
    2478:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    247a:	4b34      	ldr	r3, [pc, #208]	; (254c <system_clock_init+0xe0>)
    247c:	685a      	ldr	r2, [r3, #4]
    247e:	211e      	movs	r1, #30
    2480:	438a      	bics	r2, r1
    2482:	605a      	str	r2, [r3, #4]
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2484:	a804      	add	r0, sp, #16
    2486:	2300      	movs	r3, #0
    2488:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    248a:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    248c:	2280      	movs	r2, #128	; 0x80
    248e:	0212      	lsls	r2, r2, #8
    2490:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
	config->enable_32khz_output = true;
    2492:	2201      	movs	r2, #1
    2494:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    2496:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    2498:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    249a:	2106      	movs	r1, #6
    249c:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    249e:	70c2      	strb	r2, [r0, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    24a0:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    24a2:	4b2b      	ldr	r3, [pc, #172]	; (2550 <system_clock_init+0xe4>)
    24a4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    24a6:	2005      	movs	r0, #5
    24a8:	4b2a      	ldr	r3, [pc, #168]	; (2554 <system_clock_init+0xe8>)
    24aa:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    24ac:	4c2a      	ldr	r4, [pc, #168]	; (2558 <system_clock_init+0xec>)
    24ae:	2005      	movs	r0, #5
    24b0:	47a0      	blx	r4
    24b2:	2800      	cmp	r0, #0
    24b4:	d0fb      	beq.n	24ae <system_clock_init+0x42>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    24b6:	4b24      	ldr	r3, [pc, #144]	; (2548 <system_clock_init+0xdc>)
    24b8:	8a99      	ldrh	r1, [r3, #20]
    24ba:	2280      	movs	r2, #128	; 0x80
    24bc:	430a      	orrs	r2, r1
    24be:	829a      	strh	r2, [r3, #20]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    24c0:	a803      	add	r0, sp, #12
    24c2:	2400      	movs	r4, #0
    24c4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    24c6:	2701      	movs	r7, #1
    24c8:	7087      	strb	r7, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    24ca:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    24cc:	4b23      	ldr	r3, [pc, #140]	; (255c <system_clock_init+0xf0>)
    24ce:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    24d0:	2006      	movs	r0, #6
    24d2:	4b20      	ldr	r3, [pc, #128]	; (2554 <system_clock_init+0xe8>)
    24d4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    24d6:	4b22      	ldr	r3, [pc, #136]	; (2560 <system_clock_init+0xf4>)
    24d8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    24da:	9701      	str	r7, [sp, #4]
	config->high_when_disabled = false;
    24dc:	466a      	mov	r2, sp
    24de:	7054      	strb	r4, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
	config->run_in_standby     = false;
    24e0:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    24e2:	7254      	strb	r4, [r2, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    24e4:	2305      	movs	r3, #5
    24e6:	4698      	mov	r8, r3
    24e8:	7013      	strb	r3, [r2, #0]
    24ea:	2001      	movs	r0, #1
    24ec:	4669      	mov	r1, sp
    24ee:	4e1d      	ldr	r6, [pc, #116]	; (2564 <system_clock_init+0xf8>)
    24f0:	47b0      	blx	r6
    24f2:	2001      	movs	r0, #1
    24f4:	4d1c      	ldr	r5, [pc, #112]	; (2568 <system_clock_init+0xfc>)
    24f6:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    24f8:	466a      	mov	r2, sp
    24fa:	7054      	strb	r4, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
	config->run_in_standby     = false;
    24fc:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    24fe:	7254      	strb	r4, [r2, #9]
    2500:	4643      	mov	r3, r8
    2502:	7013      	strb	r3, [r2, #0]
    2504:	2320      	movs	r3, #32
    2506:	9301      	str	r3, [sp, #4]
    2508:	2002      	movs	r0, #2
    250a:	4669      	mov	r1, sp
    250c:	47b0      	blx	r6
    250e:	2002      	movs	r0, #2
    2510:	47a8      	blx	r5
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    2512:	4b16      	ldr	r3, [pc, #88]	; (256c <system_clock_init+0x100>)
    2514:	721c      	strb	r4, [r3, #8]
		const bool enable)
{
	if (enable) {
		PM->CTRL.reg |=  PM_CTRL_CFDEN;
	} else {
		PM->CTRL.reg &= ~PM_CTRL_CFDEN;
    2516:	781a      	ldrb	r2, [r3, #0]
    2518:	2104      	movs	r1, #4
    251a:	438a      	bics	r2, r1
    251c:	701a      	strb	r2, [r3, #0]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    251e:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    2520:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2522:	9701      	str	r7, [sp, #4]
	config->high_when_disabled = false;
    2524:	466a      	mov	r2, sp
    2526:	7054      	strb	r4, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2528:	2306      	movs	r3, #6
    252a:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    252c:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    252e:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2530:	2000      	movs	r0, #0
    2532:	4669      	mov	r1, sp
    2534:	47b0      	blx	r6
    2536:	2000      	movs	r0, #0
    2538:	47a8      	blx	r5
#endif
}
    253a:	b008      	add	sp, #32
    253c:	bc04      	pop	{r2}
    253e:	4690      	mov	r8, r2
    2540:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2542:	46c0      	nop			; (mov r8, r8)
    2544:	00003610 	.word	0x00003610
    2548:	40000800 	.word	0x40000800
    254c:	41004000 	.word	0x41004000
    2550:	00002315 	.word	0x00002315
    2554:	000023a1 	.word	0x000023a1
    2558:	00002431 	.word	0x00002431
    255c:	000022d9 	.word	0x000022d9
    2560:	00002571 	.word	0x00002571
    2564:	00002595 	.word	0x00002595
    2568:	0000264d 	.word	0x0000264d
    256c:	40000400 	.word	0x40000400

00002570 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2570:	4b06      	ldr	r3, [pc, #24]	; (258c <system_gclk_init+0x1c>)
    2572:	6999      	ldr	r1, [r3, #24]
    2574:	2208      	movs	r2, #8
    2576:	430a      	orrs	r2, r1
    2578:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    257a:	2201      	movs	r2, #1
    257c:	4b04      	ldr	r3, [pc, #16]	; (2590 <system_gclk_init+0x20>)
    257e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2580:	1c19      	adds	r1, r3, #0
    2582:	780b      	ldrb	r3, [r1, #0]
    2584:	421a      	tst	r2, r3
    2586:	d1fc      	bne.n	2582 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2588:	4770      	bx	lr
    258a:	46c0      	nop			; (mov r8, r8)
    258c:	40000400 	.word	0x40000400
    2590:	40000c00 	.word	0x40000c00

00002594 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2594:	b570      	push	{r4, r5, r6, lr}
    2596:	1c06      	adds	r6, r0, #0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2598:	780c      	ldrb	r4, [r1, #0]
    259a:	0224      	lsls	r4, r4, #8
    259c:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    259e:	784b      	ldrb	r3, [r1, #1]
    25a0:	2b00      	cmp	r3, #0
    25a2:	d002      	beq.n	25aa <system_gclk_gen_set_config+0x16>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    25a4:	2380      	movs	r3, #128	; 0x80
    25a6:	02db      	lsls	r3, r3, #11
    25a8:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    25aa:	7a4b      	ldrb	r3, [r1, #9]
    25ac:	2b00      	cmp	r3, #0
    25ae:	d002      	beq.n	25b6 <system_gclk_gen_set_config+0x22>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    25b0:	2380      	movs	r3, #128	; 0x80
    25b2:	031b      	lsls	r3, r3, #12
    25b4:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    25b6:	684d      	ldr	r5, [r1, #4]
    25b8:	2d01      	cmp	r5, #1
    25ba:	d918      	bls.n	25ee <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    25bc:	1e6b      	subs	r3, r5, #1
    25be:	421d      	tst	r5, r3
    25c0:	d10f      	bne.n	25e2 <system_gclk_gen_set_config+0x4e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    25c2:	2d02      	cmp	r5, #2
    25c4:	d906      	bls.n	25d4 <system_gclk_gen_set_config+0x40>
    25c6:	2302      	movs	r3, #2
    25c8:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    25ca:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    25cc:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    25ce:	429d      	cmp	r5, r3
    25d0:	d8fb      	bhi.n	25ca <system_gclk_gen_set_config+0x36>
    25d2:	e000      	b.n	25d6 <system_gclk_gen_set_config+0x42>
    25d4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    25d6:	0215      	lsls	r5, r2, #8
    25d8:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    25da:	2380      	movs	r3, #128	; 0x80
    25dc:	035b      	lsls	r3, r3, #13
    25de:	431c      	orrs	r4, r3
    25e0:	e006      	b.n	25f0 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    25e2:	022d      	lsls	r5, r5, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    25e4:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    25e6:	2380      	movs	r3, #128	; 0x80
    25e8:	029b      	lsls	r3, r3, #10
    25ea:	431c      	orrs	r4, r3
    25ec:	e000      	b.n	25f0 <system_gclk_gen_set_config+0x5c>
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    25ee:	1c35      	adds	r5, r6, #0
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    25f0:	7a0b      	ldrb	r3, [r1, #8]
    25f2:	2b00      	cmp	r3, #0
    25f4:	d002      	beq.n	25fc <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    25f6:	2380      	movs	r3, #128	; 0x80
    25f8:	039b      	lsls	r3, r3, #14
    25fa:	431c      	orrs	r4, r3
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    25fc:	4a0f      	ldr	r2, [pc, #60]	; (263c <system_gclk_gen_set_config+0xa8>)
    25fe:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2600:	b25b      	sxtb	r3, r3
    2602:	2b00      	cmp	r3, #0
    2604:	dbfb      	blt.n	25fe <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2606:	4b0e      	ldr	r3, [pc, #56]	; (2640 <system_gclk_gen_set_config+0xac>)
    2608:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    260a:	4b0e      	ldr	r3, [pc, #56]	; (2644 <system_gclk_gen_set_config+0xb0>)
    260c:	701e      	strb	r6, [r3, #0]
    260e:	4a0b      	ldr	r2, [pc, #44]	; (263c <system_gclk_gen_set_config+0xa8>)
    2610:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2612:	b25b      	sxtb	r3, r3
    2614:	2b00      	cmp	r3, #0
    2616:	dbfb      	blt.n	2610 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2618:	4b08      	ldr	r3, [pc, #32]	; (263c <system_gclk_gen_set_config+0xa8>)
    261a:	609d      	str	r5, [r3, #8]
    261c:	1c1a      	adds	r2, r3, #0
    261e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2620:	b25b      	sxtb	r3, r3
    2622:	2b00      	cmp	r3, #0
    2624:	dbfb      	blt.n	261e <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2626:	4b05      	ldr	r3, [pc, #20]	; (263c <system_gclk_gen_set_config+0xa8>)
    2628:	6859      	ldr	r1, [r3, #4]
    262a:	2280      	movs	r2, #128	; 0x80
    262c:	0252      	lsls	r2, r2, #9
    262e:	400a      	ands	r2, r1
    2630:	4314      	orrs	r4, r2
    2632:	605c      	str	r4, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2634:	4b04      	ldr	r3, [pc, #16]	; (2648 <system_gclk_gen_set_config+0xb4>)
    2636:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2638:	bd70      	pop	{r4, r5, r6, pc}
    263a:	46c0      	nop			; (mov r8, r8)
    263c:	40000c00 	.word	0x40000c00
    2640:	0000218d 	.word	0x0000218d
    2644:	40000c08 	.word	0x40000c08
    2648:	000021cd 	.word	0x000021cd

0000264c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    264c:	b510      	push	{r4, lr}
    264e:	1c04      	adds	r4, r0, #0
    2650:	4a0b      	ldr	r2, [pc, #44]	; (2680 <system_gclk_gen_enable+0x34>)
    2652:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2654:	b25b      	sxtb	r3, r3
    2656:	2b00      	cmp	r3, #0
    2658:	dbfb      	blt.n	2652 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    265a:	4b0a      	ldr	r3, [pc, #40]	; (2684 <system_gclk_gen_enable+0x38>)
    265c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    265e:	4b0a      	ldr	r3, [pc, #40]	; (2688 <system_gclk_gen_enable+0x3c>)
    2660:	701c      	strb	r4, [r3, #0]
    2662:	4a07      	ldr	r2, [pc, #28]	; (2680 <system_gclk_gen_enable+0x34>)
    2664:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2666:	b25b      	sxtb	r3, r3
    2668:	2b00      	cmp	r3, #0
    266a:	dbfb      	blt.n	2664 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    266c:	4b04      	ldr	r3, [pc, #16]	; (2680 <system_gclk_gen_enable+0x34>)
    266e:	6859      	ldr	r1, [r3, #4]
    2670:	2280      	movs	r2, #128	; 0x80
    2672:	0252      	lsls	r2, r2, #9
    2674:	430a      	orrs	r2, r1
    2676:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2678:	4b04      	ldr	r3, [pc, #16]	; (268c <system_gclk_gen_enable+0x40>)
    267a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    267c:	bd10      	pop	{r4, pc}
    267e:	46c0      	nop			; (mov r8, r8)
    2680:	40000c00 	.word	0x40000c00
    2684:	0000218d 	.word	0x0000218d
    2688:	40000c04 	.word	0x40000c04
    268c:	000021cd 	.word	0x000021cd

00002690 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2690:	b570      	push	{r4, r5, r6, lr}
    2692:	1c04      	adds	r4, r0, #0
    2694:	4a1a      	ldr	r2, [pc, #104]	; (2700 <system_gclk_gen_get_hz+0x70>)
    2696:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2698:	b25b      	sxtb	r3, r3
    269a:	2b00      	cmp	r3, #0
    269c:	dbfb      	blt.n	2696 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    269e:	4b19      	ldr	r3, [pc, #100]	; (2704 <system_gclk_gen_get_hz+0x74>)
    26a0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    26a2:	4b19      	ldr	r3, [pc, #100]	; (2708 <system_gclk_gen_get_hz+0x78>)
    26a4:	701c      	strb	r4, [r3, #0]
    26a6:	4a16      	ldr	r2, [pc, #88]	; (2700 <system_gclk_gen_get_hz+0x70>)
    26a8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    26aa:	b25b      	sxtb	r3, r3
    26ac:	2b00      	cmp	r3, #0
    26ae:	dbfb      	blt.n	26a8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    26b0:	4e13      	ldr	r6, [pc, #76]	; (2700 <system_gclk_gen_get_hz+0x70>)
    26b2:	6870      	ldr	r0, [r6, #4]
    26b4:	04c0      	lsls	r0, r0, #19
    26b6:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    26b8:	4b14      	ldr	r3, [pc, #80]	; (270c <system_gclk_gen_get_hz+0x7c>)
    26ba:	4798      	blx	r3
    26bc:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    26be:	4b12      	ldr	r3, [pc, #72]	; (2708 <system_gclk_gen_get_hz+0x78>)
    26c0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    26c2:	6876      	ldr	r6, [r6, #4]
    26c4:	02f6      	lsls	r6, r6, #11
    26c6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    26c8:	4b11      	ldr	r3, [pc, #68]	; (2710 <system_gclk_gen_get_hz+0x80>)
    26ca:	701c      	strb	r4, [r3, #0]
    26cc:	4a0c      	ldr	r2, [pc, #48]	; (2700 <system_gclk_gen_get_hz+0x70>)
    26ce:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    26d0:	b25b      	sxtb	r3, r3
    26d2:	2b00      	cmp	r3, #0
    26d4:	dbfb      	blt.n	26ce <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    26d6:	4b0a      	ldr	r3, [pc, #40]	; (2700 <system_gclk_gen_get_hz+0x70>)
    26d8:	689c      	ldr	r4, [r3, #8]
    26da:	0224      	lsls	r4, r4, #8
    26dc:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    26de:	4b0d      	ldr	r3, [pc, #52]	; (2714 <system_gclk_gen_get_hz+0x84>)
    26e0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    26e2:	2e00      	cmp	r6, #0
    26e4:	d107      	bne.n	26f6 <system_gclk_gen_get_hz+0x66>
    26e6:	2c01      	cmp	r4, #1
    26e8:	d907      	bls.n	26fa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    26ea:	1c28      	adds	r0, r5, #0
    26ec:	1c21      	adds	r1, r4, #0
    26ee:	4b0a      	ldr	r3, [pc, #40]	; (2718 <system_gclk_gen_get_hz+0x88>)
    26f0:	4798      	blx	r3
    26f2:	1c05      	adds	r5, r0, #0
    26f4:	e001      	b.n	26fa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    26f6:	3401      	adds	r4, #1
    26f8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    26fa:	1c28      	adds	r0, r5, #0
    26fc:	bd70      	pop	{r4, r5, r6, pc}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	40000c00 	.word	0x40000c00
    2704:	0000218d 	.word	0x0000218d
    2708:	40000c04 	.word	0x40000c04
    270c:	00002259 	.word	0x00002259
    2710:	40000c08 	.word	0x40000c08
    2714:	000021cd 	.word	0x000021cd
    2718:	00002d15 	.word	0x00002d15

0000271c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    271c:	b510      	push	{r4, lr}
    271e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2720:	4b06      	ldr	r3, [pc, #24]	; (273c <system_gclk_chan_enable+0x20>)
    2722:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2724:	4b06      	ldr	r3, [pc, #24]	; (2740 <system_gclk_chan_enable+0x24>)
    2726:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2728:	4b06      	ldr	r3, [pc, #24]	; (2744 <system_gclk_chan_enable+0x28>)
    272a:	8859      	ldrh	r1, [r3, #2]
    272c:	2280      	movs	r2, #128	; 0x80
    272e:	01d2      	lsls	r2, r2, #7
    2730:	430a      	orrs	r2, r1
    2732:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2734:	4b04      	ldr	r3, [pc, #16]	; (2748 <system_gclk_chan_enable+0x2c>)
    2736:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2738:	bd10      	pop	{r4, pc}
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	0000218d 	.word	0x0000218d
    2740:	40000c02 	.word	0x40000c02
    2744:	40000c00 	.word	0x40000c00
    2748:	000021cd 	.word	0x000021cd

0000274c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    274c:	b510      	push	{r4, lr}
    274e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2750:	4b0f      	ldr	r3, [pc, #60]	; (2790 <system_gclk_chan_disable+0x44>)
    2752:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2754:	4b0f      	ldr	r3, [pc, #60]	; (2794 <system_gclk_chan_disable+0x48>)
    2756:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2758:	4b0f      	ldr	r3, [pc, #60]	; (2798 <system_gclk_chan_disable+0x4c>)
    275a:	8858      	ldrh	r0, [r3, #2]
    275c:	0500      	lsls	r0, r0, #20
    275e:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2760:	8859      	ldrh	r1, [r3, #2]
    2762:	4a0e      	ldr	r2, [pc, #56]	; (279c <system_gclk_chan_disable+0x50>)
    2764:	400a      	ands	r2, r1
    2766:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2768:	8859      	ldrh	r1, [r3, #2]
    276a:	4a0d      	ldr	r2, [pc, #52]	; (27a0 <system_gclk_chan_disable+0x54>)
    276c:	400a      	ands	r2, r1
    276e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2770:	1c19      	adds	r1, r3, #0
    2772:	2280      	movs	r2, #128	; 0x80
    2774:	01d2      	lsls	r2, r2, #7
    2776:	884b      	ldrh	r3, [r1, #2]
    2778:	4213      	tst	r3, r2
    277a:	d1fc      	bne.n	2776 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    277c:	4b06      	ldr	r3, [pc, #24]	; (2798 <system_gclk_chan_disable+0x4c>)
    277e:	0201      	lsls	r1, r0, #8
    2780:	8858      	ldrh	r0, [r3, #2]
    2782:	4a06      	ldr	r2, [pc, #24]	; (279c <system_gclk_chan_disable+0x50>)
    2784:	4002      	ands	r2, r0
    2786:	430a      	orrs	r2, r1
    2788:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    278a:	4b06      	ldr	r3, [pc, #24]	; (27a4 <system_gclk_chan_disable+0x58>)
    278c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    278e:	bd10      	pop	{r4, pc}
    2790:	0000218d 	.word	0x0000218d
    2794:	40000c02 	.word	0x40000c02
    2798:	40000c00 	.word	0x40000c00
    279c:	fffff0ff 	.word	0xfffff0ff
    27a0:	ffffbfff 	.word	0xffffbfff
    27a4:	000021cd 	.word	0x000021cd

000027a8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    27a8:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    27aa:	780c      	ldrb	r4, [r1, #0]
    27ac:	0224      	lsls	r4, r4, #8
    27ae:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    27b0:	4b02      	ldr	r3, [pc, #8]	; (27bc <system_gclk_chan_set_config+0x14>)
    27b2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    27b4:	b2a4      	uxth	r4, r4
    27b6:	4b02      	ldr	r3, [pc, #8]	; (27c0 <system_gclk_chan_set_config+0x18>)
    27b8:	805c      	strh	r4, [r3, #2]
}
    27ba:	bd10      	pop	{r4, pc}
    27bc:	0000274d 	.word	0x0000274d
    27c0:	40000c00 	.word	0x40000c00

000027c4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    27c4:	b510      	push	{r4, lr}
    27c6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    27c8:	4b06      	ldr	r3, [pc, #24]	; (27e4 <system_gclk_chan_get_hz+0x20>)
    27ca:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    27cc:	4b06      	ldr	r3, [pc, #24]	; (27e8 <system_gclk_chan_get_hz+0x24>)
    27ce:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    27d0:	4b06      	ldr	r3, [pc, #24]	; (27ec <system_gclk_chan_get_hz+0x28>)
    27d2:	885c      	ldrh	r4, [r3, #2]
    27d4:	0524      	lsls	r4, r4, #20
    27d6:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    27d8:	4b05      	ldr	r3, [pc, #20]	; (27f0 <system_gclk_chan_get_hz+0x2c>)
    27da:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    27dc:	1c20      	adds	r0, r4, #0
    27de:	4b05      	ldr	r3, [pc, #20]	; (27f4 <system_gclk_chan_get_hz+0x30>)
    27e0:	4798      	blx	r3
}
    27e2:	bd10      	pop	{r4, pc}
    27e4:	0000218d 	.word	0x0000218d
    27e8:	40000c02 	.word	0x40000c02
    27ec:	40000c00 	.word	0x40000c00
    27f0:	000021cd 	.word	0x000021cd
    27f4:	00002691 	.word	0x00002691

000027f8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    27f8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    27fa:	78d4      	ldrb	r4, [r2, #3]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    27fc:	2300      	movs	r3, #0

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    27fe:	2c00      	cmp	r4, #0
    2800:	d11e      	bne.n	2840 <_system_pinmux_config+0x48>
		/* Enable the pin peripheral mux flag if non-GPIO selected (pin mux will
		 * be written later) and store the new mux mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2802:	7813      	ldrb	r3, [r2, #0]
    2804:	2b80      	cmp	r3, #128	; 0x80
    2806:	d004      	beq.n	2812 <_system_pinmux_config+0x1a>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2808:	061b      	lsls	r3, r3, #24
    280a:	2480      	movs	r4, #128	; 0x80
    280c:	0264      	lsls	r4, r4, #9
    280e:	4323      	orrs	r3, r4
    2810:	e000      	b.n	2814 <_system_pinmux_config+0x1c>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2812:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2814:	7854      	ldrb	r4, [r2, #1]
    2816:	2c00      	cmp	r4, #0
    2818:	d001      	beq.n	281e <_system_pinmux_config+0x26>
    281a:	2c02      	cmp	r4, #2
    281c:	d10a      	bne.n	2834 <_system_pinmux_config+0x3c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    281e:	7894      	ldrb	r4, [r2, #2]
    2820:	2c00      	cmp	r4, #0
    2822:	d103      	bne.n	282c <_system_pinmux_config+0x34>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2824:	2480      	movs	r4, #128	; 0x80
    2826:	02a4      	lsls	r4, r4, #10
    2828:	4323      	orrs	r3, r4
    282a:	e002      	b.n	2832 <_system_pinmux_config+0x3a>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    282c:	24c0      	movs	r4, #192	; 0xc0
    282e:	02e4      	lsls	r4, r4, #11
    2830:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2832:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2834:	7854      	ldrb	r4, [r2, #1]
    2836:	3c01      	subs	r4, #1
    2838:	2c01      	cmp	r4, #1
    283a:	d801      	bhi.n	2840 <_system_pinmux_config+0x48>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    283c:	4c0f      	ldr	r4, [pc, #60]	; (287c <_system_pinmux_config+0x84>)
    283e:	4023      	ands	r3, r4
		}
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2840:	040d      	lsls	r5, r1, #16
    2842:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2844:	24a0      	movs	r4, #160	; 0xa0
    2846:	05e4      	lsls	r4, r4, #23
    2848:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    284a:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    284c:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    284e:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2850:	24d0      	movs	r4, #208	; 0xd0
    2852:	0624      	lsls	r4, r4, #24
    2854:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2856:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2858:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    285a:	78d4      	ldrb	r4, [r2, #3]
    285c:	2c00      	cmp	r4, #0
    285e:	d10c      	bne.n	287a <_system_pinmux_config+0x82>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2860:	035c      	lsls	r4, r3, #13
    2862:	d505      	bpl.n	2870 <_system_pinmux_config+0x78>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2864:	7893      	ldrb	r3, [r2, #2]
    2866:	2b01      	cmp	r3, #1
    2868:	d101      	bne.n	286e <_system_pinmux_config+0x76>
				port->OUTSET.reg = pin_mask;
    286a:	6181      	str	r1, [r0, #24]
    286c:	e000      	b.n	2870 <_system_pinmux_config+0x78>
			} else {
				port->OUTCLR.reg = pin_mask;
    286e:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2870:	7853      	ldrb	r3, [r2, #1]
    2872:	3b01      	subs	r3, #1
    2874:	2b01      	cmp	r3, #1
    2876:	d800      	bhi.n	287a <_system_pinmux_config+0x82>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2878:	6081      	str	r1, [r0, #8]
		}
	}
}
    287a:	bd30      	pop	{r4, r5, pc}
    287c:	fffbffff 	.word	0xfffbffff

00002880 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2880:	b508      	push	{r3, lr}
    2882:	1c03      	adds	r3, r0, #0
    2884:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2886:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2888:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    288a:	2900      	cmp	r1, #0
    288c:	d103      	bne.n	2896 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    288e:	0958      	lsrs	r0, r3, #5
    2890:	01c0      	lsls	r0, r0, #7
    2892:	4904      	ldr	r1, [pc, #16]	; (28a4 <system_pinmux_pin_set_config+0x24>)
    2894:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2896:	211f      	movs	r1, #31
    2898:	400b      	ands	r3, r1
    289a:	2101      	movs	r1, #1
    289c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    289e:	4b02      	ldr	r3, [pc, #8]	; (28a8 <system_pinmux_pin_set_config+0x28>)
    28a0:	4798      	blx	r3
}
    28a2:	bd08      	pop	{r3, pc}
    28a4:	41004400 	.word	0x41004400
    28a8:	000027f9 	.word	0x000027f9

000028ac <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    28ac:	4770      	bx	lr
    28ae:	46c0      	nop			; (mov r8, r8)

000028b0 <HardFault_Handler>:
/**
 * Handler for the CPU Hard Fault interrupt, fired if an illegal access was
 * attempted to a memory address.
 */
void HardFault_Handler(void)
{
    28b0:	e7fe      	b.n	28b0 <HardFault_Handler>
    28b2:	46c0      	nop			; (mov r8, r8)

000028b4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    28b4:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    28b6:	4b04      	ldr	r3, [pc, #16]	; (28c8 <system_init+0x14>)
    28b8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    28ba:	4b04      	ldr	r3, [pc, #16]	; (28cc <system_init+0x18>)
    28bc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    28be:	4b04      	ldr	r3, [pc, #16]	; (28d0 <system_init+0x1c>)
    28c0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    28c2:	4b04      	ldr	r3, [pc, #16]	; (28d4 <system_init+0x20>)
    28c4:	4798      	blx	r3
}
    28c6:	bd08      	pop	{r3, pc}
    28c8:	0000246d 	.word	0x0000246d
    28cc:	000021fd 	.word	0x000021fd
    28d0:	000028ad 	.word	0x000028ad
    28d4:	0000077d 	.word	0x0000077d

000028d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    28d8:	e7fe      	b.n	28d8 <Dummy_Handler>
    28da:	46c0      	nop			; (mov r8, r8)

000028dc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    28dc:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    28de:	4b19      	ldr	r3, [pc, #100]	; (2944 <Reset_Handler+0x68>)
    28e0:	4a19      	ldr	r2, [pc, #100]	; (2948 <Reset_Handler+0x6c>)
    28e2:	429a      	cmp	r2, r3
    28e4:	d003      	beq.n	28ee <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    28e6:	4b19      	ldr	r3, [pc, #100]	; (294c <Reset_Handler+0x70>)
    28e8:	4a16      	ldr	r2, [pc, #88]	; (2944 <Reset_Handler+0x68>)
    28ea:	429a      	cmp	r2, r3
    28ec:	d304      	bcc.n	28f8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    28ee:	4b18      	ldr	r3, [pc, #96]	; (2950 <Reset_Handler+0x74>)
    28f0:	4a18      	ldr	r2, [pc, #96]	; (2954 <Reset_Handler+0x78>)
    28f2:	429a      	cmp	r2, r3
    28f4:	d30f      	bcc.n	2916 <Reset_Handler+0x3a>
    28f6:	e01b      	b.n	2930 <Reset_Handler+0x54>
    28f8:	4a13      	ldr	r2, [pc, #76]	; (2948 <Reset_Handler+0x6c>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    28fa:	4b17      	ldr	r3, [pc, #92]	; (2958 <Reset_Handler+0x7c>)
    28fc:	4913      	ldr	r1, [pc, #76]	; (294c <Reset_Handler+0x70>)
    28fe:	3103      	adds	r1, #3
    2900:	1ac9      	subs	r1, r1, r3
    2902:	0889      	lsrs	r1, r1, #2
    2904:	3101      	adds	r1, #1
    2906:	0089      	lsls	r1, r1, #2
    2908:	3b04      	subs	r3, #4
    290a:	18c9      	adds	r1, r1, r3
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
    290c:	ca01      	ldmia	r2!, {r0}
    290e:	c301      	stmia	r3!, {r0}
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    2910:	428b      	cmp	r3, r1
    2912:	d1fb      	bne.n	290c <Reset_Handler+0x30>
    2914:	e7eb      	b.n	28ee <Reset_Handler+0x12>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    2916:	4b11      	ldr	r3, [pc, #68]	; (295c <Reset_Handler+0x80>)
    2918:	490d      	ldr	r1, [pc, #52]	; (2950 <Reset_Handler+0x74>)
    291a:	3103      	adds	r1, #3
    291c:	1ac9      	subs	r1, r1, r3
    291e:	0889      	lsrs	r1, r1, #2
    2920:	3101      	adds	r1, #1
    2922:	0089      	lsls	r1, r1, #2
    2924:	3b04      	subs	r3, #4
    2926:	18c9      	adds	r1, r1, r3
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    2928:	2200      	movs	r2, #0
    292a:	c304      	stmia	r3!, {r2}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    292c:	428b      	cmp	r3, r1
    292e:	d1fc      	bne.n	292a <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2930:	4b0b      	ldr	r3, [pc, #44]	; (2960 <Reset_Handler+0x84>)
    2932:	217f      	movs	r1, #127	; 0x7f
    2934:	4a0b      	ldr	r2, [pc, #44]	; (2964 <Reset_Handler+0x88>)
    2936:	438a      	bics	r2, r1
    2938:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    293a:	4b0b      	ldr	r3, [pc, #44]	; (2968 <Reset_Handler+0x8c>)
    293c:	4798      	blx	r3

        /* Branch to main function */
        main();
    293e:	4b0b      	ldr	r3, [pc, #44]	; (296c <Reset_Handler+0x90>)
    2940:	4798      	blx	r3
    2942:	e7fe      	b.n	2942 <Reset_Handler+0x66>
    2944:	20000000 	.word	0x20000000
    2948:	00009d7c 	.word	0x00009d7c
    294c:	200008d4 	.word	0x200008d4
    2950:	20000ca8 	.word	0x20000ca8
    2954:	200008d4 	.word	0x200008d4
    2958:	20000004 	.word	0x20000004
    295c:	200008d8 	.word	0x200008d8
    2960:	e000ed00 	.word	0xe000ed00
    2964:	00000000 	.word	0x00000000
    2968:	0000370d 	.word	0x0000370d
    296c:	00002c59 	.word	0x00002c59

00002970 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2970:	4b06      	ldr	r3, [pc, #24]	; (298c <_sbrk+0x1c>)
    2972:	681b      	ldr	r3, [r3, #0]
    2974:	2b00      	cmp	r3, #0
    2976:	d102      	bne.n	297e <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    2978:	4a05      	ldr	r2, [pc, #20]	; (2990 <_sbrk+0x20>)
    297a:	4b04      	ldr	r3, [pc, #16]	; (298c <_sbrk+0x1c>)
    297c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    297e:	4a03      	ldr	r2, [pc, #12]	; (298c <_sbrk+0x1c>)
    2980:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    2982:	1818      	adds	r0, r3, r0
    2984:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    2986:	1c18      	adds	r0, r3, #0
    2988:	4770      	bx	lr
    298a:	46c0      	nop			; (mov r8, r8)
    298c:	20000b38 	.word	0x20000b38
    2990:	20002ca8 	.word	0x20002ca8

00002994 <button_3_pressed>:
void button_2_pressed() {
	wake_up();
	gfx_mono_draw_string("button 2",0, 16, &sysfont);
}

void button_3_pressed() {
    2994:	b510      	push	{r4, lr}
	wake_up();
    2996:	4b04      	ldr	r3, [pc, #16]	; (29a8 <button_3_pressed+0x14>)
    2998:	4798      	blx	r3
	gfx_mono_draw_string("button 3",0, 16, &sysfont);
    299a:	4804      	ldr	r0, [pc, #16]	; (29ac <button_3_pressed+0x18>)
    299c:	2100      	movs	r1, #0
    299e:	2210      	movs	r2, #16
    29a0:	4b03      	ldr	r3, [pc, #12]	; (29b0 <button_3_pressed+0x1c>)
    29a2:	4c04      	ldr	r4, [pc, #16]	; (29b4 <button_3_pressed+0x20>)
    29a4:	47a0      	blx	r4
    29a6:	bd10      	pop	{r4, pc}
    29a8:	00001e15 	.word	0x00001e15
    29ac:	00009adc 	.word	0x00009adc
    29b0:	20000008 	.word	0x20000008
    29b4:	000005f9 	.word	0x000005f9

000029b8 <button_2_pressed>:
void button_1_pressed() {
	wake_up();
	gfx_mono_draw_string("button 1",0, 16, &sysfont);
}

void button_2_pressed() {
    29b8:	b510      	push	{r4, lr}
	wake_up();
    29ba:	4b04      	ldr	r3, [pc, #16]	; (29cc <button_2_pressed+0x14>)
    29bc:	4798      	blx	r3
	gfx_mono_draw_string("button 2",0, 16, &sysfont);
    29be:	4804      	ldr	r0, [pc, #16]	; (29d0 <button_2_pressed+0x18>)
    29c0:	2100      	movs	r1, #0
    29c2:	2210      	movs	r2, #16
    29c4:	4b03      	ldr	r3, [pc, #12]	; (29d4 <button_2_pressed+0x1c>)
    29c6:	4c04      	ldr	r4, [pc, #16]	; (29d8 <button_2_pressed+0x20>)
    29c8:	47a0      	blx	r4
}
    29ca:	bd10      	pop	{r4, pc}
    29cc:	00001e15 	.word	0x00001e15
    29d0:	00009ae8 	.word	0x00009ae8
    29d4:	20000008 	.word	0x20000008
    29d8:	000005f9 	.word	0x000005f9

000029dc <button_1_pressed>:
void button_0_pressed() {
	wake_up();
	gfx_mono_draw_string("button 0",0, 16, &sysfont);
}

void button_1_pressed() {
    29dc:	b510      	push	{r4, lr}
	wake_up();
    29de:	4b04      	ldr	r3, [pc, #16]	; (29f0 <button_1_pressed+0x14>)
    29e0:	4798      	blx	r3
	gfx_mono_draw_string("button 1",0, 16, &sysfont);
    29e2:	4804      	ldr	r0, [pc, #16]	; (29f4 <button_1_pressed+0x18>)
    29e4:	2100      	movs	r1, #0
    29e6:	2210      	movs	r2, #16
    29e8:	4b03      	ldr	r3, [pc, #12]	; (29f8 <button_1_pressed+0x1c>)
    29ea:	4c04      	ldr	r4, [pc, #16]	; (29fc <button_1_pressed+0x20>)
    29ec:	47a0      	blx	r4
}
    29ee:	bd10      	pop	{r4, pc}
    29f0:	00001e15 	.word	0x00001e15
    29f4:	00009af4 	.word	0x00009af4
    29f8:	20000008 	.word	0x20000008
    29fc:	000005f9 	.word	0x000005f9

00002a00 <button_0_pressed>:
		extint_register_callback(button_callback[i], button_eic_line[i], EXTINT_CALLBACK_TYPE_DETECT);
		extint_chan_enable_callback(button_eic_line[i], EXTINT_CALLBACK_TYPE_DETECT);
	}
}

void button_0_pressed() {
    2a00:	b510      	push	{r4, lr}
	wake_up();
    2a02:	4b04      	ldr	r3, [pc, #16]	; (2a14 <button_0_pressed+0x14>)
    2a04:	4798      	blx	r3
	gfx_mono_draw_string("button 0",0, 16, &sysfont);
    2a06:	4804      	ldr	r0, [pc, #16]	; (2a18 <button_0_pressed+0x18>)
    2a08:	2100      	movs	r1, #0
    2a0a:	2210      	movs	r2, #16
    2a0c:	4b03      	ldr	r3, [pc, #12]	; (2a1c <button_0_pressed+0x1c>)
    2a0e:	4c04      	ldr	r4, [pc, #16]	; (2a20 <button_0_pressed+0x20>)
    2a10:	47a0      	blx	r4
}
    2a12:	bd10      	pop	{r4, pc}
    2a14:	00001e15 	.word	0x00001e15
    2a18:	00009b00 	.word	0x00009b00
    2a1c:	20000008 	.word	0x20000008
    2a20:	000005f9 	.word	0x000005f9

00002a24 <configure_buttons>:
#include <asf.h>
#include <buttons.h>
#include <sleep.h>

void configure_buttons(void)
{
    2a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a26:	464f      	mov	r7, r9
    2a28:	4646      	mov	r6, r8
    2a2a:	b4c0      	push	{r6, r7}
    2a2c:	b09d      	sub	sp, #116	; 0x74
	uint32_t			button_eic_pin[4]  = { BUTTON_0_EIC_PIN, BUTTON_1_EIC_PIN, BUTTON_2_EIC_PIN, BUTTON_3_EIC_PIN };
    2a2e:	aa18      	add	r2, sp, #96	; 0x60
    2a30:	4b23      	ldr	r3, [pc, #140]	; (2ac0 <configure_buttons+0x9c>)
    2a32:	1c11      	adds	r1, r2, #0
    2a34:	1c18      	adds	r0, r3, #0
    2a36:	c870      	ldmia	r0!, {r4, r5, r6}
    2a38:	c170      	stmia	r1!, {r4, r5, r6}
    2a3a:	6800      	ldr	r0, [r0, #0]
    2a3c:	6008      	str	r0, [r1, #0]
	uint32_t			button_eic_mux[4]  = { BUTTON_0_EIC_MUX, BUTTON_1_EIC_MUX, BUTTON_2_EIC_MUX, BUTTON_3_EIC_MUX };	
    2a3e:	2200      	movs	r2, #0
    2a40:	9214      	str	r2, [sp, #80]	; 0x50
    2a42:	9215      	str	r2, [sp, #84]	; 0x54
    2a44:	9216      	str	r2, [sp, #88]	; 0x58
    2a46:	9217      	str	r2, [sp, #92]	; 0x5c
	uint32_t			button_eic_line[4] = { BUTTON_0_EIC_LINE, BUTTON_1_EIC_LINE, BUTTON_2_EIC_LINE, BUTTON_3_EIC_LINE };
    2a48:	a910      	add	r1, sp, #64	; 0x40
    2a4a:	1c1a      	adds	r2, r3, #0
    2a4c:	3210      	adds	r2, #16
    2a4e:	1c08      	adds	r0, r1, #0
    2a50:	ca70      	ldmia	r2!, {r4, r5, r6}
    2a52:	c070      	stmia	r0!, {r4, r5, r6}
    2a54:	6812      	ldr	r2, [r2, #0]
    2a56:	6002      	str	r2, [r0, #0]
	extint_callback_t 	button_callback[4] = { button_0_pressed, button_1_pressed, button_2_pressed, button_3_pressed};
    2a58:	aa0c      	add	r2, sp, #48	; 0x30
    2a5a:	3320      	adds	r3, #32
    2a5c:	1c11      	adds	r1, r2, #0
    2a5e:	cb31      	ldmia	r3!, {r0, r4, r5}
    2a60:	c131      	stmia	r1!, {r0, r4, r5}
    2a62:	681b      	ldr	r3, [r3, #0]
    2a64:	600b      	str	r3, [r1, #0]
	
	struct extint_chan_conf config_extint_chan[4];
	
	for(int i = 0; i < 4; i++) {
		extint_chan_get_config_defaults(config_extint_chan + i);
    2a66:	466c      	mov	r4, sp
void configure_buttons(void)
{
	uint32_t			button_eic_pin[4]  = { BUTTON_0_EIC_PIN, BUTTON_1_EIC_PIN, BUTTON_2_EIC_PIN, BUTTON_3_EIC_PIN };
	uint32_t			button_eic_mux[4]  = { BUTTON_0_EIC_MUX, BUTTON_1_EIC_MUX, BUTTON_2_EIC_MUX, BUTTON_3_EIC_MUX };	
	uint32_t			button_eic_line[4] = { BUTTON_0_EIC_LINE, BUTTON_1_EIC_LINE, BUTTON_2_EIC_LINE, BUTTON_3_EIC_LINE };
	extint_callback_t 	button_callback[4] = { button_0_pressed, button_1_pressed, button_2_pressed, button_3_pressed};
    2a68:	2500      	movs	r5, #0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    2a6a:	2700      	movs	r7, #0
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    2a6c:	2601      	movs	r6, #1
    2a6e:	46b1      	mov	r9, r6
    2a70:	2001      	movs	r0, #1
    2a72:	4680      	mov	r8, r0
	config->wake_if_sleeping    = true;
    2a74:	464a      	mov	r2, r9
    2a76:	7262      	strb	r2, [r4, #9]
	config->filter_input_signal = false;
    2a78:	72a7      	strb	r7, [r4, #10]
	
	struct extint_chan_conf config_extint_chan[4];
	
	for(int i = 0; i < 4; i++) {
		extint_chan_get_config_defaults(config_extint_chan + i);
		config_extint_chan[i].gpio_pin = button_eic_pin[i];
    2a7a:	ab18      	add	r3, sp, #96	; 0x60
    2a7c:	58eb      	ldr	r3, [r5, r3]
    2a7e:	6023      	str	r3, [r4, #0]
		config_extint_chan[i].gpio_pin_mux = button_eic_mux[i];
    2a80:	ab14      	add	r3, sp, #80	; 0x50
    2a82:	58eb      	ldr	r3, [r5, r3]
    2a84:	6063      	str	r3, [r4, #4]
		config_extint_chan[i].gpio_pin_pull = EXTINT_PULL_UP;
    2a86:	4643      	mov	r3, r8
    2a88:	7223      	strb	r3, [r4, #8]
		config_extint_chan[i].detection_criteria = EXTINT_DETECT_BOTH;
    2a8a:	2303      	movs	r3, #3
    2a8c:	72e3      	strb	r3, [r4, #11]
		extint_chan_set_config(button_eic_line[i], config_extint_chan + i);
    2a8e:	ab10      	add	r3, sp, #64	; 0x40
    2a90:	5d5e      	ldrb	r6, [r3, r5]
    2a92:	1c30      	adds	r0, r6, #0
    2a94:	1c21      	adds	r1, r4, #0
    2a96:	4b0b      	ldr	r3, [pc, #44]	; (2ac4 <configure_buttons+0xa0>)
    2a98:	4798      	blx	r3
		
		extint_register_callback(button_callback[i], button_eic_line[i], EXTINT_CALLBACK_TYPE_DETECT);
    2a9a:	ab0c      	add	r3, sp, #48	; 0x30
    2a9c:	58e8      	ldr	r0, [r5, r3]
    2a9e:	1c31      	adds	r1, r6, #0
    2aa0:	1c3a      	adds	r2, r7, #0
    2aa2:	4b09      	ldr	r3, [pc, #36]	; (2ac8 <configure_buttons+0xa4>)
    2aa4:	4798      	blx	r3
		extint_chan_enable_callback(button_eic_line[i], EXTINT_CALLBACK_TYPE_DETECT);
    2aa6:	1c30      	adds	r0, r6, #0
    2aa8:	1c39      	adds	r1, r7, #0
    2aaa:	4b08      	ldr	r3, [pc, #32]	; (2acc <configure_buttons+0xa8>)
    2aac:	4798      	blx	r3
    2aae:	340c      	adds	r4, #12
    2ab0:	3504      	adds	r5, #4
	uint32_t			button_eic_line[4] = { BUTTON_0_EIC_LINE, BUTTON_1_EIC_LINE, BUTTON_2_EIC_LINE, BUTTON_3_EIC_LINE };
	extint_callback_t 	button_callback[4] = { button_0_pressed, button_1_pressed, button_2_pressed, button_3_pressed};
	
	struct extint_chan_conf config_extint_chan[4];
	
	for(int i = 0; i < 4; i++) {
    2ab2:	2d10      	cmp	r5, #16
    2ab4:	d1de      	bne.n	2a74 <configure_buttons+0x50>
		extint_chan_set_config(button_eic_line[i], config_extint_chan + i);
		
		extint_register_callback(button_callback[i], button_eic_line[i], EXTINT_CALLBACK_TYPE_DETECT);
		extint_chan_enable_callback(button_eic_line[i], EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    2ab6:	b01d      	add	sp, #116	; 0x74
    2ab8:	bc0c      	pop	{r2, r3}
    2aba:	4690      	mov	r8, r2
    2abc:	4699      	mov	r9, r3
    2abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ac0:	00009aac 	.word	0x00009aac
    2ac4:	000007e9 	.word	0x000007e9
    2ac8:	00000861 	.word	0x00000861
    2acc:	0000088d 	.word	0x0000088d

00002ad0 <usart_write_callback>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    2ad0:	2280      	movs	r2, #128	; 0x80
    2ad2:	01d2      	lsls	r2, r2, #7
    2ad4:	4b01      	ldr	r3, [pc, #4]	; (2adc <usart_write_callback+0xc>)
    2ad6:	61da      	str	r2, [r3, #28]
}

void usart_write_callback(const struct usart_module *const usart_module)
{
	port_pin_toggle_output_level(LED_0_PIN);
}
    2ad8:	4770      	bx	lr
    2ada:	46c0      	nop			; (mov r8, r8)
    2adc:	41004400 	.word	0x41004400

00002ae0 <do_cmd>:
		do_cmd();
		clear_buffer();
	}
}

void do_cmd() {
    2ae0:	b508      	push	{r3, lr}
	switch(cmd_buffer[0]) {
    2ae2:	4b08      	ldr	r3, [pc, #32]	; (2b04 <do_cmd+0x24>)
    2ae4:	781b      	ldrb	r3, [r3, #0]
    2ae6:	b2da      	uxtb	r2, r3
    2ae8:	2a01      	cmp	r2, #1
    2aea:	d002      	beq.n	2af2 <do_cmd+0x12>
    2aec:	2a02      	cmp	r2, #2
    2aee:	d107      	bne.n	2b00 <do_cmd+0x20>
    2af0:	e003      	b.n	2afa <do_cmd+0x1a>
		case CMD_SET_TIME:
			set_time(cmd_buffer);
    2af2:	4804      	ldr	r0, [pc, #16]	; (2b04 <do_cmd+0x24>)
    2af4:	4b04      	ldr	r3, [pc, #16]	; (2b08 <do_cmd+0x28>)
    2af6:	4798      	blx	r3
			break;	
    2af8:	e002      	b.n	2b00 <do_cmd+0x20>
		case CMD_SET_ALARM:
			set_alarm(cmd_buffer);
    2afa:	4802      	ldr	r0, [pc, #8]	; (2b04 <do_cmd+0x24>)
    2afc:	4b03      	ldr	r3, [pc, #12]	; (2b0c <do_cmd+0x2c>)
    2afe:	4798      	blx	r3
			break;
	}
} 
    2b00:	bd08      	pop	{r3, pc}
    2b02:	46c0      	nop			; (mov r8, r8)
    2b04:	20000c84 	.word	0x20000c84
    2b08:	00001f35 	.word	0x00001f35
    2b0c:	00001fd1 	.word	0x00001fd1

00002b10 <clear_buffer>:

void clear_buffer() {
	cmd_buffer_size = 0;
    2b10:	2200      	movs	r2, #0
    2b12:	4b05      	ldr	r3, [pc, #20]	; (2b28 <clear_buffer+0x18>)
    2b14:	701a      	strb	r2, [r3, #0]
    2b16:	4b05      	ldr	r3, [pc, #20]	; (2b2c <clear_buffer+0x1c>)
			set_alarm(cmd_buffer);
			break;
	}
} 

void clear_buffer() {
    2b18:	1c19      	adds	r1, r3, #0
    2b1a:	3120      	adds	r1, #32
	cmd_buffer_size = 0;
	for(uint8_t i = 0; i < CMD_BUFFER_LENGTH; i++) {
		cmd_buffer[i] = 0;
    2b1c:	701a      	strb	r2, [r3, #0]
    2b1e:	3301      	adds	r3, #1
	}
} 

void clear_buffer() {
	cmd_buffer_size = 0;
	for(uint8_t i = 0; i < CMD_BUFFER_LENGTH; i++) {
    2b20:	428b      	cmp	r3, r1
    2b22:	d1fb      	bne.n	2b1c <clear_buffer+0xc>
		cmd_buffer[i] = 0;
	}
}
    2b24:	4770      	bx	lr
    2b26:	46c0      	nop			; (mov r8, r8)
    2b28:	20000c81 	.word	0x20000c81
    2b2c:	20000c84 	.word	0x20000c84

00002b30 <usart_read_callback>:
volatile uint8_t	rx_buffer[MAX_RX_BUFFER_LENGTH];
uint8_t				cmd_buffer[CMD_BUFFER_LENGTH]; 
uint8_t				cmd_buffer_size;

void usart_read_callback(const struct usart_module *const usart_module)
{
    2b30:	b508      	push	{r3, lr}
	check_awake();
    2b32:	4b0b      	ldr	r3, [pc, #44]	; (2b60 <usart_read_callback+0x30>)
    2b34:	4798      	blx	r3
	
	if(cmd_buffer_size < CMD_BUFFER_LENGTH && rx_buffer[0] != 10) {
    2b36:	4b0b      	ldr	r3, [pc, #44]	; (2b64 <usart_read_callback+0x34>)
    2b38:	781b      	ldrb	r3, [r3, #0]
    2b3a:	2b1f      	cmp	r3, #31
    2b3c:	d80b      	bhi.n	2b56 <usart_read_callback+0x26>
    2b3e:	4a0a      	ldr	r2, [pc, #40]	; (2b68 <usart_read_callback+0x38>)
    2b40:	7812      	ldrb	r2, [r2, #0]
    2b42:	2a0a      	cmp	r2, #10
    2b44:	d007      	beq.n	2b56 <usart_read_callback+0x26>
		cmd_buffer[cmd_buffer_size++] = rx_buffer[0];
    2b46:	4a08      	ldr	r2, [pc, #32]	; (2b68 <usart_read_callback+0x38>)
    2b48:	7811      	ldrb	r1, [r2, #0]
    2b4a:	4a08      	ldr	r2, [pc, #32]	; (2b6c <usart_read_callback+0x3c>)
    2b4c:	54d1      	strb	r1, [r2, r3]
    2b4e:	3301      	adds	r3, #1
    2b50:	4a04      	ldr	r2, [pc, #16]	; (2b64 <usart_read_callback+0x34>)
    2b52:	7013      	strb	r3, [r2, #0]
    2b54:	e003      	b.n	2b5e <usart_read_callback+0x2e>
	}
	else {
		do_cmd();
    2b56:	4b06      	ldr	r3, [pc, #24]	; (2b70 <usart_read_callback+0x40>)
    2b58:	4798      	blx	r3
		clear_buffer();
    2b5a:	4b06      	ldr	r3, [pc, #24]	; (2b74 <usart_read_callback+0x44>)
    2b5c:	4798      	blx	r3
	}
}
    2b5e:	bd08      	pop	{r3, pc}
    2b60:	00001e69 	.word	0x00001e69
    2b64:	20000c81 	.word	0x20000c81
    2b68:	20000c80 	.word	0x20000c80
    2b6c:	20000c84 	.word	0x20000c84
    2b70:	00002ae1 	.word	0x00002ae1
    2b74:	00002b11 	.word	0x00002b11

00002b78 <configure_usart>:
{
	port_pin_toggle_output_level(LED_0_PIN);
}

void configure_usart(void)
{
    2b78:	b530      	push	{r4, r5, lr}
    2b7a:	b08d      	sub	sp, #52	; 0x34
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2b7c:	2380      	movs	r3, #128	; 0x80
    2b7e:	05db      	lsls	r3, r3, #23
    2b80:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2b82:	2300      	movs	r3, #0
    2b84:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2b86:	22ff      	movs	r2, #255	; 0xff
    2b88:	4669      	mov	r1, sp
    2b8a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2b8c:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2b8e:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    2b90:	2296      	movs	r2, #150	; 0x96
    2b92:	0192      	lsls	r2, r2, #6
    2b94:	9204      	str	r2, [sp, #16]
	config->receiver_enable  = true;
    2b96:	2201      	movs	r2, #1
    2b98:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    2b9a:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    2b9c:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    2b9e:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    2ba0:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2ba2:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    2ba4:	774b      	strb	r3, [r1, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 9600;
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2ba6:	23c4      	movs	r3, #196	; 0xc4
    2ba8:	039b      	lsls	r3, r3, #14
    2baa:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2bac:	2301      	movs	r3, #1
    2bae:	425b      	negs	r3, r3
    2bb0:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2bb2:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2bb4:	4b13      	ldr	r3, [pc, #76]	; (2c04 <configure_usart+0x8c>)
    2bb6:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2bb8:	4b13      	ldr	r3, [pc, #76]	; (2c08 <configure_usart+0x90>)
    2bba:	930b      	str	r3, [sp, #44]	; 0x2c
	while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
    2bbc:	4d13      	ldr	r5, [pc, #76]	; (2c0c <configure_usart+0x94>)
    2bbe:	4c14      	ldr	r4, [pc, #80]	; (2c10 <configure_usart+0x98>)
    2bc0:	1c28      	adds	r0, r5, #0
    2bc2:	1c21      	adds	r1, r4, #0
    2bc4:	466a      	mov	r2, sp
    2bc6:	4b13      	ldr	r3, [pc, #76]	; (2c14 <configure_usart+0x9c>)
    2bc8:	4798      	blx	r3
    2bca:	2800      	cmp	r0, #0
    2bcc:	d1f8      	bne.n	2bc0 <configure_usart+0x48>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bce:	4d0f      	ldr	r5, [pc, #60]	; (2c0c <configure_usart+0x94>)
    2bd0:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2bd2:	1c20      	adds	r0, r4, #0
    2bd4:	4b10      	ldr	r3, [pc, #64]	; (2c18 <configure_usart+0xa0>)
    2bd6:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2bd8:	231f      	movs	r3, #31
    2bda:	4018      	ands	r0, r3
    2bdc:	2301      	movs	r3, #1
    2bde:	4083      	lsls	r3, r0
    2be0:	1c18      	adds	r0, r3, #0
    2be2:	4b0e      	ldr	r3, [pc, #56]	; (2c1c <configure_usart+0xa4>)
    2be4:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2be6:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    2be8:	8a13      	ldrh	r3, [r2, #16]
    2bea:	0bdb      	lsrs	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2bec:	03db      	lsls	r3, r3, #15
    2bee:	b29b      	uxth	r3, r3
    2bf0:	2b00      	cmp	r3, #0
    2bf2:	d1f9      	bne.n	2be8 <configure_usart+0x70>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2bf4:	6822      	ldr	r2, [r4, #0]
    2bf6:	2302      	movs	r3, #2
    2bf8:	4313      	orrs	r3, r2
    2bfa:	6023      	str	r3, [r4, #0]
	}
	usart_enable(&usart_instance);
	clear_buffer();
    2bfc:	4b08      	ldr	r3, [pc, #32]	; (2c20 <configure_usart+0xa8>)
    2bfe:	4798      	blx	r3
}
    2c00:	b00d      	add	sp, #52	; 0x34
    2c02:	bd30      	pop	{r4, r5, pc}
    2c04:	00180002 	.word	0x00180002
    2c08:	00190002 	.word	0x00190002
    2c0c:	20000c5c 	.word	0x20000c5c
    2c10:	42001400 	.word	0x42001400
    2c14:	000015ed 	.word	0x000015ed
    2c18:	00000e99 	.word	0x00000e99
    2c1c:	e000e100 	.word	0xe000e100
    2c20:	00002b11 	.word	0x00002b11

00002c24 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    2c24:	b538      	push	{r3, r4, r5, lr}
	usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    2c26:	4c08      	ldr	r4, [pc, #32]	; (2c48 <configure_usart_callbacks+0x24>)
    2c28:	1c20      	adds	r0, r4, #0
    2c2a:	4908      	ldr	r1, [pc, #32]	; (2c4c <configure_usart_callbacks+0x28>)
    2c2c:	2200      	movs	r2, #0
    2c2e:	4d08      	ldr	r5, [pc, #32]	; (2c50 <configure_usart_callbacks+0x2c>)
    2c30:	47a8      	blx	r5
	usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    2c32:	1c20      	adds	r0, r4, #0
    2c34:	4907      	ldr	r1, [pc, #28]	; (2c54 <configure_usart_callbacks+0x30>)
    2c36:	2201      	movs	r2, #1
    2c38:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    2c3a:	2321      	movs	r3, #33	; 0x21
    2c3c:	5ce1      	ldrb	r1, [r4, r3]
    2c3e:	2203      	movs	r2, #3
    2c40:	430a      	orrs	r2, r1
    2c42:	54e2      	strb	r2, [r4, r3]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    2c44:	bd38      	pop	{r3, r4, r5, pc}
    2c46:	46c0      	nop			; (mov r8, r8)
    2c48:	20000c5c 	.word	0x20000c5c
    2c4c:	00002ad1 	.word	0x00002ad1
    2c50:	00001865 	.word	0x00001865
    2c54:	00002b31 	.word	0x00002b31

00002c58 <main>:

int main (void)
{
    2c58:	b570      	push	{r4, r5, r6, lr}
    2c5a:	b084      	sub	sp, #16
	system_init();
    2c5c:	4b1c      	ldr	r3, [pc, #112]	; (2cd0 <main+0x78>)
    2c5e:	4798      	blx	r3
	gfx_mono_init();
    2c60:	4b1c      	ldr	r3, [pc, #112]	; (2cd4 <main+0x7c>)
    2c62:	4798      	blx	r3
	
	configure_usart();
    2c64:	4b1c      	ldr	r3, [pc, #112]	; (2cd8 <main+0x80>)
    2c66:	4798      	blx	r3
	configure_usart_callbacks();
    2c68:	4b1c      	ldr	r3, [pc, #112]	; (2cdc <main+0x84>)
    2c6a:	4798      	blx	r3
	
	configure_rtc_calendar();
    2c6c:	4b1c      	ldr	r3, [pc, #112]	; (2ce0 <main+0x88>)
    2c6e:	4798      	blx	r3
 * \param[out] time  Time structure to initialize.
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
	time->second = 0;
    2c70:	a902      	add	r1, sp, #8
    2c72:	2300      	movs	r3, #0
    2c74:	700b      	strb	r3, [r1, #0]
	time->minute = 0;
    2c76:	704b      	strb	r3, [r1, #1]
	time->hour   = 0;
    2c78:	708b      	strb	r3, [r1, #2]
	time->pm     = 0;
    2c7a:	70cb      	strb	r3, [r1, #3]
	time->day 	 = 1;
    2c7c:	2401      	movs	r4, #1
    2c7e:	710c      	strb	r4, [r1, #4]
	time->month  = 1;
    2c80:	714c      	strb	r4, [r1, #5]
	time->year   = 2000;
    2c82:	23fa      	movs	r3, #250	; 0xfa
    2c84:	00db      	lsls	r3, r3, #3
    2c86:	80cb      	strh	r3, [r1, #6]
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
	rtc_calendar_set_time(&rtc_instance, &time);
    2c88:	4816      	ldr	r0, [pc, #88]	; (2ce4 <main+0x8c>)
    2c8a:	4b17      	ldr	r3, [pc, #92]	; (2ce8 <main+0x90>)
    2c8c:	4798      	blx	r3
	
	configure_tc();
    2c8e:	4b17      	ldr	r3, [pc, #92]	; (2cec <main+0x94>)
    2c90:	4798      	blx	r3
	configure_tc_callbacks();
    2c92:	4b17      	ldr	r3, [pc, #92]	; (2cf0 <main+0x98>)
    2c94:	4798      	blx	r3
	
	configure_buttons();
    2c96:	4b17      	ldr	r3, [pc, #92]	; (2cf4 <main+0x9c>)
    2c98:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    2c9a:	4b17      	ldr	r3, [pc, #92]	; (2cf8 <main+0xa0>)
    2c9c:	701c      	strb	r4, [r3, #0]
    2c9e:	f3bf 8f5f 	dmb	sy
    2ca2:	b662      	cpsie	i
	system_interrupt_enable_global();

	wake_up(); 
    2ca4:	4b15      	ldr	r3, [pc, #84]	; (2cfc <main+0xa4>)
    2ca6:	4798      	blx	r3

	uint8_t string[] = "time\n";
    2ca8:	4b15      	ldr	r3, [pc, #84]	; (2d00 <main+0xa8>)
    2caa:	681a      	ldr	r2, [r3, #0]
    2cac:	9200      	str	r2, [sp, #0]
    2cae:	889b      	ldrh	r3, [r3, #4]
    2cb0:	466a      	mov	r2, sp
    2cb2:	8093      	strh	r3, [r2, #4]
	usart_write_buffer_job(&usart_instance, string, sizeof(string));
    2cb4:	4813      	ldr	r0, [pc, #76]	; (2d04 <main+0xac>)
    2cb6:	4669      	mov	r1, sp
    2cb8:	2206      	movs	r2, #6
    2cba:	4b13      	ldr	r3, [pc, #76]	; (2d08 <main+0xb0>)
    2cbc:	4798      	blx	r3
	
	while (true) {
		usart_read_buffer_job(&usart_instance, (uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    2cbe:	4e11      	ldr	r6, [pc, #68]	; (2d04 <main+0xac>)
    2cc0:	4d12      	ldr	r5, [pc, #72]	; (2d0c <main+0xb4>)
    2cc2:	4c13      	ldr	r4, [pc, #76]	; (2d10 <main+0xb8>)
    2cc4:	1c30      	adds	r0, r6, #0
    2cc6:	1c29      	adds	r1, r5, #0
    2cc8:	2201      	movs	r2, #1
    2cca:	47a0      	blx	r4
    2ccc:	e7fa      	b.n	2cc4 <main+0x6c>
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	000028b5 	.word	0x000028b5
    2cd4:	0000069d 	.word	0x0000069d
    2cd8:	00002b79 	.word	0x00002b79
    2cdc:	00002c25 	.word	0x00002c25
    2ce0:	0000205d 	.word	0x0000205d
    2ce4:	20000c2c 	.word	0x20000c2c
    2ce8:	000009cd 	.word	0x000009cd
    2cec:	000020d9 	.word	0x000020d9
    2cf0:	0000213d 	.word	0x0000213d
    2cf4:	00002a25 	.word	0x00002a25
    2cf8:	20000014 	.word	0x20000014
    2cfc:	00001e15 	.word	0x00001e15
    2d00:	00009b0c 	.word	0x00009b0c
    2d04:	20000c5c 	.word	0x20000c5c
    2d08:	0000187d 	.word	0x0000187d
    2d0c:	20000c80 	.word	0x20000c80
    2d10:	000018a5 	.word	0x000018a5

00002d14 <__aeabi_uidiv>:
    2d14:	2900      	cmp	r1, #0
    2d16:	d034      	beq.n	2d82 <.udivsi3_skip_div0_test+0x6a>

00002d18 <.udivsi3_skip_div0_test>:
    2d18:	2301      	movs	r3, #1
    2d1a:	2200      	movs	r2, #0
    2d1c:	b410      	push	{r4}
    2d1e:	4288      	cmp	r0, r1
    2d20:	d32c      	bcc.n	2d7c <.udivsi3_skip_div0_test+0x64>
    2d22:	2401      	movs	r4, #1
    2d24:	0724      	lsls	r4, r4, #28
    2d26:	42a1      	cmp	r1, r4
    2d28:	d204      	bcs.n	2d34 <.udivsi3_skip_div0_test+0x1c>
    2d2a:	4281      	cmp	r1, r0
    2d2c:	d202      	bcs.n	2d34 <.udivsi3_skip_div0_test+0x1c>
    2d2e:	0109      	lsls	r1, r1, #4
    2d30:	011b      	lsls	r3, r3, #4
    2d32:	e7f8      	b.n	2d26 <.udivsi3_skip_div0_test+0xe>
    2d34:	00e4      	lsls	r4, r4, #3
    2d36:	42a1      	cmp	r1, r4
    2d38:	d204      	bcs.n	2d44 <.udivsi3_skip_div0_test+0x2c>
    2d3a:	4281      	cmp	r1, r0
    2d3c:	d202      	bcs.n	2d44 <.udivsi3_skip_div0_test+0x2c>
    2d3e:	0049      	lsls	r1, r1, #1
    2d40:	005b      	lsls	r3, r3, #1
    2d42:	e7f8      	b.n	2d36 <.udivsi3_skip_div0_test+0x1e>
    2d44:	4288      	cmp	r0, r1
    2d46:	d301      	bcc.n	2d4c <.udivsi3_skip_div0_test+0x34>
    2d48:	1a40      	subs	r0, r0, r1
    2d4a:	431a      	orrs	r2, r3
    2d4c:	084c      	lsrs	r4, r1, #1
    2d4e:	42a0      	cmp	r0, r4
    2d50:	d302      	bcc.n	2d58 <.udivsi3_skip_div0_test+0x40>
    2d52:	1b00      	subs	r0, r0, r4
    2d54:	085c      	lsrs	r4, r3, #1
    2d56:	4322      	orrs	r2, r4
    2d58:	088c      	lsrs	r4, r1, #2
    2d5a:	42a0      	cmp	r0, r4
    2d5c:	d302      	bcc.n	2d64 <.udivsi3_skip_div0_test+0x4c>
    2d5e:	1b00      	subs	r0, r0, r4
    2d60:	089c      	lsrs	r4, r3, #2
    2d62:	4322      	orrs	r2, r4
    2d64:	08cc      	lsrs	r4, r1, #3
    2d66:	42a0      	cmp	r0, r4
    2d68:	d302      	bcc.n	2d70 <.udivsi3_skip_div0_test+0x58>
    2d6a:	1b00      	subs	r0, r0, r4
    2d6c:	08dc      	lsrs	r4, r3, #3
    2d6e:	4322      	orrs	r2, r4
    2d70:	2800      	cmp	r0, #0
    2d72:	d003      	beq.n	2d7c <.udivsi3_skip_div0_test+0x64>
    2d74:	091b      	lsrs	r3, r3, #4
    2d76:	d001      	beq.n	2d7c <.udivsi3_skip_div0_test+0x64>
    2d78:	0909      	lsrs	r1, r1, #4
    2d7a:	e7e3      	b.n	2d44 <.udivsi3_skip_div0_test+0x2c>
    2d7c:	1c10      	adds	r0, r2, #0
    2d7e:	bc10      	pop	{r4}
    2d80:	4770      	bx	lr
    2d82:	2800      	cmp	r0, #0
    2d84:	d001      	beq.n	2d8a <.udivsi3_skip_div0_test+0x72>
    2d86:	2000      	movs	r0, #0
    2d88:	43c0      	mvns	r0, r0
    2d8a:	b407      	push	{r0, r1, r2}
    2d8c:	4802      	ldr	r0, [pc, #8]	; (2d98 <.udivsi3_skip_div0_test+0x80>)
    2d8e:	a102      	add	r1, pc, #8	; (adr r1, 2d98 <.udivsi3_skip_div0_test+0x80>)
    2d90:	1840      	adds	r0, r0, r1
    2d92:	9002      	str	r0, [sp, #8]
    2d94:	bd03      	pop	{r0, r1, pc}
    2d96:	46c0      	nop			; (mov r8, r8)
    2d98:	00000019 	.word	0x00000019

00002d9c <__aeabi_uidivmod>:
    2d9c:	2900      	cmp	r1, #0
    2d9e:	d0f0      	beq.n	2d82 <.udivsi3_skip_div0_test+0x6a>
    2da0:	b503      	push	{r0, r1, lr}
    2da2:	f7ff ffb9 	bl	2d18 <.udivsi3_skip_div0_test>
    2da6:	bc0e      	pop	{r1, r2, r3}
    2da8:	4342      	muls	r2, r0
    2daa:	1a89      	subs	r1, r1, r2
    2dac:	4718      	bx	r3
    2dae:	46c0      	nop			; (mov r8, r8)

00002db0 <__aeabi_idiv0>:
    2db0:	4770      	bx	lr
    2db2:	46c0      	nop			; (mov r8, r8)

00002db4 <__aeabi_uldivmod>:
    2db4:	2b00      	cmp	r3, #0
    2db6:	d111      	bne.n	2ddc <__aeabi_uldivmod+0x28>
    2db8:	2a00      	cmp	r2, #0
    2dba:	d10f      	bne.n	2ddc <__aeabi_uldivmod+0x28>
    2dbc:	2900      	cmp	r1, #0
    2dbe:	d100      	bne.n	2dc2 <__aeabi_uldivmod+0xe>
    2dc0:	2800      	cmp	r0, #0
    2dc2:	d002      	beq.n	2dca <__aeabi_uldivmod+0x16>
    2dc4:	2100      	movs	r1, #0
    2dc6:	43c9      	mvns	r1, r1
    2dc8:	1c08      	adds	r0, r1, #0
    2dca:	b407      	push	{r0, r1, r2}
    2dcc:	4802      	ldr	r0, [pc, #8]	; (2dd8 <__aeabi_uldivmod+0x24>)
    2dce:	a102      	add	r1, pc, #8	; (adr r1, 2dd8 <__aeabi_uldivmod+0x24>)
    2dd0:	1840      	adds	r0, r0, r1
    2dd2:	9002      	str	r0, [sp, #8]
    2dd4:	bd03      	pop	{r0, r1, pc}
    2dd6:	46c0      	nop			; (mov r8, r8)
    2dd8:	ffffffd9 	.word	0xffffffd9
    2ddc:	b403      	push	{r0, r1}
    2dde:	4668      	mov	r0, sp
    2de0:	b501      	push	{r0, lr}
    2de2:	9802      	ldr	r0, [sp, #8]
    2de4:	f000 f846 	bl	2e74 <__gnu_uldivmod_helper>
    2de8:	9b01      	ldr	r3, [sp, #4]
    2dea:	469e      	mov	lr, r3
    2dec:	b002      	add	sp, #8
    2dee:	bc0c      	pop	{r2, r3}
    2df0:	4770      	bx	lr
    2df2:	46c0      	nop			; (mov r8, r8)

00002df4 <__aeabi_lmul>:
    2df4:	469c      	mov	ip, r3
    2df6:	0403      	lsls	r3, r0, #16
    2df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dfa:	0c1b      	lsrs	r3, r3, #16
    2dfc:	0417      	lsls	r7, r2, #16
    2dfe:	0c3f      	lsrs	r7, r7, #16
    2e00:	0c15      	lsrs	r5, r2, #16
    2e02:	1c1e      	adds	r6, r3, #0
    2e04:	1c04      	adds	r4, r0, #0
    2e06:	0c00      	lsrs	r0, r0, #16
    2e08:	437e      	muls	r6, r7
    2e0a:	436b      	muls	r3, r5
    2e0c:	4347      	muls	r7, r0
    2e0e:	4345      	muls	r5, r0
    2e10:	18fb      	adds	r3, r7, r3
    2e12:	0c30      	lsrs	r0, r6, #16
    2e14:	1818      	adds	r0, r3, r0
    2e16:	4287      	cmp	r7, r0
    2e18:	d902      	bls.n	2e20 <__aeabi_lmul+0x2c>
    2e1a:	2780      	movs	r7, #128	; 0x80
    2e1c:	027b      	lsls	r3, r7, #9
    2e1e:	18ed      	adds	r5, r5, r3
    2e20:	0c07      	lsrs	r7, r0, #16
    2e22:	19ed      	adds	r5, r5, r7
    2e24:	4667      	mov	r7, ip
    2e26:	437c      	muls	r4, r7
    2e28:	434a      	muls	r2, r1
    2e2a:	0436      	lsls	r6, r6, #16
    2e2c:	0c33      	lsrs	r3, r6, #16
    2e2e:	18a1      	adds	r1, r4, r2
    2e30:	0400      	lsls	r0, r0, #16
    2e32:	1949      	adds	r1, r1, r5
    2e34:	18c0      	adds	r0, r0, r3
    2e36:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002e38 <__gnu_ldivmod_helper>:
    2e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e3a:	464f      	mov	r7, r9
    2e3c:	4646      	mov	r6, r8
    2e3e:	b4c0      	push	{r6, r7}
    2e40:	1c1d      	adds	r5, r3, #0
    2e42:	1c14      	adds	r4, r2, #0
    2e44:	1c06      	adds	r6, r0, #0
    2e46:	1c0f      	adds	r7, r1, #0
    2e48:	f000 f830 	bl	2eac <__divdi3>
    2e4c:	4681      	mov	r9, r0
    2e4e:	4688      	mov	r8, r1
    2e50:	4643      	mov	r3, r8
    2e52:	1c29      	adds	r1, r5, #0
    2e54:	464a      	mov	r2, r9
    2e56:	1c20      	adds	r0, r4, #0
    2e58:	f7ff ffcc 	bl	2df4 <__aeabi_lmul>
    2e5c:	9b08      	ldr	r3, [sp, #32]
    2e5e:	1a36      	subs	r6, r6, r0
    2e60:	418f      	sbcs	r7, r1
    2e62:	601e      	str	r6, [r3, #0]
    2e64:	605f      	str	r7, [r3, #4]
    2e66:	4648      	mov	r0, r9
    2e68:	4641      	mov	r1, r8
    2e6a:	bc0c      	pop	{r2, r3}
    2e6c:	4690      	mov	r8, r2
    2e6e:	4699      	mov	r9, r3
    2e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e72:	46c0      	nop			; (mov r8, r8)

00002e74 <__gnu_uldivmod_helper>:
    2e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e76:	464f      	mov	r7, r9
    2e78:	4646      	mov	r6, r8
    2e7a:	b4c0      	push	{r6, r7}
    2e7c:	1c1d      	adds	r5, r3, #0
    2e7e:	1c14      	adds	r4, r2, #0
    2e80:	1c06      	adds	r6, r0, #0
    2e82:	1c0f      	adds	r7, r1, #0
    2e84:	f000 f9fa 	bl	327c <__udivdi3>
    2e88:	1c2b      	adds	r3, r5, #0
    2e8a:	1c22      	adds	r2, r4, #0
    2e8c:	4681      	mov	r9, r0
    2e8e:	4688      	mov	r8, r1
    2e90:	f7ff ffb0 	bl	2df4 <__aeabi_lmul>
    2e94:	9b08      	ldr	r3, [sp, #32]
    2e96:	1a36      	subs	r6, r6, r0
    2e98:	418f      	sbcs	r7, r1
    2e9a:	601e      	str	r6, [r3, #0]
    2e9c:	605f      	str	r7, [r3, #4]
    2e9e:	4648      	mov	r0, r9
    2ea0:	4641      	mov	r1, r8
    2ea2:	bc0c      	pop	{r2, r3}
    2ea4:	4690      	mov	r8, r2
    2ea6:	4699      	mov	r9, r3
    2ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2eaa:	46c0      	nop			; (mov r8, r8)

00002eac <__divdi3>:
    2eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eae:	464d      	mov	r5, r9
    2eb0:	4644      	mov	r4, r8
    2eb2:	465f      	mov	r7, fp
    2eb4:	4656      	mov	r6, sl
    2eb6:	b4f0      	push	{r4, r5, r6, r7}
    2eb8:	1c1c      	adds	r4, r3, #0
    2eba:	b085      	sub	sp, #20
    2ebc:	2500      	movs	r5, #0
    2ebe:	2900      	cmp	r1, #0
    2ec0:	da00      	bge.n	2ec4 <__divdi3+0x18>
    2ec2:	e0e2      	b.n	308a <__divdi3+0x1de>
    2ec4:	2c00      	cmp	r4, #0
    2ec6:	da00      	bge.n	2eca <__divdi3+0x1e>
    2ec8:	e0d8      	b.n	307c <__divdi3+0x1d0>
    2eca:	4683      	mov	fp, r0
    2ecc:	1c0f      	adds	r7, r1, #0
    2ece:	4692      	mov	sl, r2
    2ed0:	1c1e      	adds	r6, r3, #0
    2ed2:	1c14      	adds	r4, r2, #0
    2ed4:	4680      	mov	r8, r0
    2ed6:	4689      	mov	r9, r1
    2ed8:	2b00      	cmp	r3, #0
    2eda:	d15a      	bne.n	2f92 <__divdi3+0xe6>
    2edc:	428a      	cmp	r2, r1
    2ede:	d96d      	bls.n	2fbc <__divdi3+0x110>
    2ee0:	1c10      	adds	r0, r2, #0
    2ee2:	f000 fb91 	bl	3608 <__clzsi2>
    2ee6:	2800      	cmp	r0, #0
    2ee8:	d00c      	beq.n	2f04 <__divdi3+0x58>
    2eea:	2320      	movs	r3, #32
    2eec:	1a19      	subs	r1, r3, r0
    2eee:	465a      	mov	r2, fp
    2ef0:	1c3e      	adds	r6, r7, #0
    2ef2:	40ca      	lsrs	r2, r1
    2ef4:	4086      	lsls	r6, r0
    2ef6:	1c17      	adds	r7, r2, #0
    2ef8:	4337      	orrs	r7, r6
    2efa:	465e      	mov	r6, fp
    2efc:	4086      	lsls	r6, r0
    2efe:	4084      	lsls	r4, r0
    2f00:	46b9      	mov	r9, r7
    2f02:	46b0      	mov	r8, r6
    2f04:	0c26      	lsrs	r6, r4, #16
    2f06:	0420      	lsls	r0, r4, #16
    2f08:	0c03      	lsrs	r3, r0, #16
    2f0a:	1c31      	adds	r1, r6, #0
    2f0c:	4648      	mov	r0, r9
    2f0e:	469b      	mov	fp, r3
    2f10:	f7ff ff00 	bl	2d14 <__aeabi_uidiv>
    2f14:	4659      	mov	r1, fp
    2f16:	4341      	muls	r1, r0
    2f18:	1c07      	adds	r7, r0, #0
    2f1a:	468a      	mov	sl, r1
    2f1c:	4648      	mov	r0, r9
    2f1e:	1c31      	adds	r1, r6, #0
    2f20:	f7ff ff3c 	bl	2d9c <__aeabi_uidivmod>
    2f24:	4642      	mov	r2, r8
    2f26:	0408      	lsls	r0, r1, #16
    2f28:	0c13      	lsrs	r3, r2, #16
    2f2a:	4318      	orrs	r0, r3
    2f2c:	4582      	cmp	sl, r0
    2f2e:	d909      	bls.n	2f44 <__divdi3+0x98>
    2f30:	1900      	adds	r0, r0, r4
    2f32:	1e79      	subs	r1, r7, #1
    2f34:	4284      	cmp	r4, r0
    2f36:	d900      	bls.n	2f3a <__divdi3+0x8e>
    2f38:	e17e      	b.n	3238 <__divdi3+0x38c>
    2f3a:	4582      	cmp	sl, r0
    2f3c:	d800      	bhi.n	2f40 <__divdi3+0x94>
    2f3e:	e17b      	b.n	3238 <__divdi3+0x38c>
    2f40:	3f02      	subs	r7, #2
    2f42:	1900      	adds	r0, r0, r4
    2f44:	4652      	mov	r2, sl
    2f46:	1a83      	subs	r3, r0, r2
    2f48:	1c18      	adds	r0, r3, #0
    2f4a:	1c31      	adds	r1, r6, #0
    2f4c:	469a      	mov	sl, r3
    2f4e:	f7ff fee1 	bl	2d14 <__aeabi_uidiv>
    2f52:	4659      	mov	r1, fp
    2f54:	4341      	muls	r1, r0
    2f56:	4681      	mov	r9, r0
    2f58:	468b      	mov	fp, r1
    2f5a:	4650      	mov	r0, sl
    2f5c:	1c31      	adds	r1, r6, #0
    2f5e:	f7ff ff1d 	bl	2d9c <__aeabi_uidivmod>
    2f62:	4646      	mov	r6, r8
    2f64:	0432      	lsls	r2, r6, #16
    2f66:	0408      	lsls	r0, r1, #16
    2f68:	0c13      	lsrs	r3, r2, #16
    2f6a:	4318      	orrs	r0, r3
    2f6c:	4583      	cmp	fp, r0
    2f6e:	d90b      	bls.n	2f88 <__divdi3+0xdc>
    2f70:	464e      	mov	r6, r9
    2f72:	1901      	adds	r1, r0, r4
    2f74:	3e01      	subs	r6, #1
    2f76:	428c      	cmp	r4, r1
    2f78:	d900      	bls.n	2f7c <__divdi3+0xd0>
    2f7a:	e15f      	b.n	323c <__divdi3+0x390>
    2f7c:	458b      	cmp	fp, r1
    2f7e:	d800      	bhi.n	2f82 <__divdi3+0xd6>
    2f80:	e15c      	b.n	323c <__divdi3+0x390>
    2f82:	2402      	movs	r4, #2
    2f84:	4260      	negs	r0, r4
    2f86:	4481      	add	r9, r0
    2f88:	0438      	lsls	r0, r7, #16
    2f8a:	464f      	mov	r7, r9
    2f8c:	4338      	orrs	r0, r7
    2f8e:	2600      	movs	r6, #0
    2f90:	e003      	b.n	2f9a <__divdi3+0xee>
    2f92:	428b      	cmp	r3, r1
    2f94:	d965      	bls.n	3062 <__divdi3+0x1b6>
    2f96:	2600      	movs	r6, #0
    2f98:	2000      	movs	r0, #0
    2f9a:	1c02      	adds	r2, r0, #0
    2f9c:	1c33      	adds	r3, r6, #0
    2f9e:	2d00      	cmp	r5, #0
    2fa0:	d003      	beq.n	2faa <__divdi3+0xfe>
    2fa2:	1c31      	adds	r1, r6, #0
    2fa4:	2300      	movs	r3, #0
    2fa6:	4242      	negs	r2, r0
    2fa8:	418b      	sbcs	r3, r1
    2faa:	1c10      	adds	r0, r2, #0
    2fac:	1c19      	adds	r1, r3, #0
    2fae:	b005      	add	sp, #20
    2fb0:	bc3c      	pop	{r2, r3, r4, r5}
    2fb2:	4690      	mov	r8, r2
    2fb4:	4699      	mov	r9, r3
    2fb6:	46a2      	mov	sl, r4
    2fb8:	46ab      	mov	fp, r5
    2fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fbc:	2a00      	cmp	r2, #0
    2fbe:	d104      	bne.n	2fca <__divdi3+0x11e>
    2fc0:	2001      	movs	r0, #1
    2fc2:	2100      	movs	r1, #0
    2fc4:	f7ff fea6 	bl	2d14 <__aeabi_uidiv>
    2fc8:	1c04      	adds	r4, r0, #0
    2fca:	1c20      	adds	r0, r4, #0
    2fcc:	f000 fb1c 	bl	3608 <__clzsi2>
    2fd0:	2800      	cmp	r0, #0
    2fd2:	d162      	bne.n	309a <__divdi3+0x1ee>
    2fd4:	464f      	mov	r7, r9
    2fd6:	0423      	lsls	r3, r4, #16
    2fd8:	1b3e      	subs	r6, r7, r4
    2fda:	0c18      	lsrs	r0, r3, #16
    2fdc:	46b1      	mov	r9, r6
    2fde:	0c27      	lsrs	r7, r4, #16
    2fe0:	9000      	str	r0, [sp, #0]
    2fe2:	2601      	movs	r6, #1
    2fe4:	1c39      	adds	r1, r7, #0
    2fe6:	4648      	mov	r0, r9
    2fe8:	f7ff fe94 	bl	2d14 <__aeabi_uidiv>
    2fec:	9a00      	ldr	r2, [sp, #0]
    2fee:	4682      	mov	sl, r0
    2ff0:	4342      	muls	r2, r0
    2ff2:	1c39      	adds	r1, r7, #0
    2ff4:	4648      	mov	r0, r9
    2ff6:	4693      	mov	fp, r2
    2ff8:	f7ff fed0 	bl	2d9c <__aeabi_uidivmod>
    2ffc:	4643      	mov	r3, r8
    2ffe:	0409      	lsls	r1, r1, #16
    3000:	0c18      	lsrs	r0, r3, #16
    3002:	4301      	orrs	r1, r0
    3004:	458b      	cmp	fp, r1
    3006:	d908      	bls.n	301a <__divdi3+0x16e>
    3008:	4652      	mov	r2, sl
    300a:	1909      	adds	r1, r1, r4
    300c:	3a01      	subs	r2, #1
    300e:	428c      	cmp	r4, r1
    3010:	d802      	bhi.n	3018 <__divdi3+0x16c>
    3012:	458b      	cmp	fp, r1
    3014:	d900      	bls.n	3018 <__divdi3+0x16c>
    3016:	e128      	b.n	326a <__divdi3+0x3be>
    3018:	4692      	mov	sl, r2
    301a:	465a      	mov	r2, fp
    301c:	1a88      	subs	r0, r1, r2
    301e:	1c39      	adds	r1, r7, #0
    3020:	4683      	mov	fp, r0
    3022:	f7ff fe77 	bl	2d14 <__aeabi_uidiv>
    3026:	9900      	ldr	r1, [sp, #0]
    3028:	4681      	mov	r9, r0
    302a:	4341      	muls	r1, r0
    302c:	4658      	mov	r0, fp
    302e:	9100      	str	r1, [sp, #0]
    3030:	1c39      	adds	r1, r7, #0
    3032:	f7ff feb3 	bl	2d9c <__aeabi_uidivmod>
    3036:	4647      	mov	r7, r8
    3038:	043b      	lsls	r3, r7, #16
    303a:	9f00      	ldr	r7, [sp, #0]
    303c:	0408      	lsls	r0, r1, #16
    303e:	0c1a      	lsrs	r2, r3, #16
    3040:	4310      	orrs	r0, r2
    3042:	4287      	cmp	r7, r0
    3044:	d908      	bls.n	3058 <__divdi3+0x1ac>
    3046:	464b      	mov	r3, r9
    3048:	1901      	adds	r1, r0, r4
    304a:	3b01      	subs	r3, #1
    304c:	428c      	cmp	r4, r1
    304e:	d802      	bhi.n	3056 <__divdi3+0x1aa>
    3050:	428f      	cmp	r7, r1
    3052:	d900      	bls.n	3056 <__divdi3+0x1aa>
    3054:	e10e      	b.n	3274 <__divdi3+0x3c8>
    3056:	4699      	mov	r9, r3
    3058:	4652      	mov	r2, sl
    305a:	0410      	lsls	r0, r2, #16
    305c:	464f      	mov	r7, r9
    305e:	4338      	orrs	r0, r7
    3060:	e79b      	b.n	2f9a <__divdi3+0xee>
    3062:	1c18      	adds	r0, r3, #0
    3064:	f000 fad0 	bl	3608 <__clzsi2>
    3068:	1e04      	subs	r4, r0, #0
    306a:	d16e      	bne.n	314a <__divdi3+0x29e>
    306c:	42be      	cmp	r6, r7
    306e:	d302      	bcc.n	3076 <__divdi3+0x1ca>
    3070:	45da      	cmp	sl, fp
    3072:	d900      	bls.n	3076 <__divdi3+0x1ca>
    3074:	e78f      	b.n	2f96 <__divdi3+0xea>
    3076:	2600      	movs	r6, #0
    3078:	2001      	movs	r0, #1
    307a:	e78e      	b.n	2f9a <__divdi3+0xee>
    307c:	1c16      	adds	r6, r2, #0
    307e:	1c1f      	adds	r7, r3, #0
    3080:	43ed      	mvns	r5, r5
    3082:	2300      	movs	r3, #0
    3084:	4272      	negs	r2, r6
    3086:	41bb      	sbcs	r3, r7
    3088:	e71f      	b.n	2eca <__divdi3+0x1e>
    308a:	1c05      	adds	r5, r0, #0
    308c:	1c0e      	adds	r6, r1, #0
    308e:	2100      	movs	r1, #0
    3090:	4268      	negs	r0, r5
    3092:	41b1      	sbcs	r1, r6
    3094:	2501      	movs	r5, #1
    3096:	426d      	negs	r5, r5
    3098:	e714      	b.n	2ec4 <__divdi3+0x18>
    309a:	2120      	movs	r1, #32
    309c:	1a0b      	subs	r3, r1, r0
    309e:	4647      	mov	r7, r8
    30a0:	40df      	lsrs	r7, r3
    30a2:	464e      	mov	r6, r9
    30a4:	464a      	mov	r2, r9
    30a6:	40de      	lsrs	r6, r3
    30a8:	4082      	lsls	r2, r0
    30aa:	4084      	lsls	r4, r0
    30ac:	1c39      	adds	r1, r7, #0
    30ae:	4643      	mov	r3, r8
    30b0:	4083      	lsls	r3, r0
    30b2:	4311      	orrs	r1, r2
    30b4:	0c27      	lsrs	r7, r4, #16
    30b6:	0420      	lsls	r0, r4, #16
    30b8:	0c02      	lsrs	r2, r0, #16
    30ba:	9101      	str	r1, [sp, #4]
    30bc:	1c30      	adds	r0, r6, #0
    30be:	1c39      	adds	r1, r7, #0
    30c0:	4698      	mov	r8, r3
    30c2:	9200      	str	r2, [sp, #0]
    30c4:	f7ff fe26 	bl	2d14 <__aeabi_uidiv>
    30c8:	9900      	ldr	r1, [sp, #0]
    30ca:	4682      	mov	sl, r0
    30cc:	4341      	muls	r1, r0
    30ce:	1c30      	adds	r0, r6, #0
    30d0:	4689      	mov	r9, r1
    30d2:	1c39      	adds	r1, r7, #0
    30d4:	f7ff fe62 	bl	2d9c <__aeabi_uidivmod>
    30d8:	9e01      	ldr	r6, [sp, #4]
    30da:	0409      	lsls	r1, r1, #16
    30dc:	0c33      	lsrs	r3, r6, #16
    30de:	4319      	orrs	r1, r3
    30e0:	4589      	cmp	r9, r1
    30e2:	d90c      	bls.n	30fe <__divdi3+0x252>
    30e4:	4650      	mov	r0, sl
    30e6:	1909      	adds	r1, r1, r4
    30e8:	3801      	subs	r0, #1
    30ea:	428c      	cmp	r4, r1
    30ec:	d900      	bls.n	30f0 <__divdi3+0x244>
    30ee:	e0ba      	b.n	3266 <__divdi3+0x3ba>
    30f0:	4589      	cmp	r9, r1
    30f2:	d800      	bhi.n	30f6 <__divdi3+0x24a>
    30f4:	e0b7      	b.n	3266 <__divdi3+0x3ba>
    30f6:	2202      	movs	r2, #2
    30f8:	4256      	negs	r6, r2
    30fa:	44b2      	add	sl, r6
    30fc:	1909      	adds	r1, r1, r4
    30fe:	464b      	mov	r3, r9
    3100:	1ac8      	subs	r0, r1, r3
    3102:	1c39      	adds	r1, r7, #0
    3104:	4681      	mov	r9, r0
    3106:	f7ff fe05 	bl	2d14 <__aeabi_uidiv>
    310a:	9900      	ldr	r1, [sp, #0]
    310c:	1c06      	adds	r6, r0, #0
    310e:	4341      	muls	r1, r0
    3110:	4648      	mov	r0, r9
    3112:	468b      	mov	fp, r1
    3114:	1c39      	adds	r1, r7, #0
    3116:	f7ff fe41 	bl	2d9c <__aeabi_uidivmod>
    311a:	9a01      	ldr	r2, [sp, #4]
    311c:	0409      	lsls	r1, r1, #16
    311e:	0413      	lsls	r3, r2, #16
    3120:	0c18      	lsrs	r0, r3, #16
    3122:	4301      	orrs	r1, r0
    3124:	458b      	cmp	fp, r1
    3126:	d909      	bls.n	313c <__divdi3+0x290>
    3128:	1909      	adds	r1, r1, r4
    312a:	1e72      	subs	r2, r6, #1
    312c:	428c      	cmp	r4, r1
    312e:	d900      	bls.n	3132 <__divdi3+0x286>
    3130:	e095      	b.n	325e <__divdi3+0x3b2>
    3132:	458b      	cmp	fp, r1
    3134:	d800      	bhi.n	3138 <__divdi3+0x28c>
    3136:	e092      	b.n	325e <__divdi3+0x3b2>
    3138:	3e02      	subs	r6, #2
    313a:	1909      	adds	r1, r1, r4
    313c:	465b      	mov	r3, fp
    313e:	4652      	mov	r2, sl
    3140:	1ac8      	subs	r0, r1, r3
    3142:	0411      	lsls	r1, r2, #16
    3144:	4681      	mov	r9, r0
    3146:	430e      	orrs	r6, r1
    3148:	e74c      	b.n	2fe4 <__divdi3+0x138>
    314a:	2320      	movs	r3, #32
    314c:	1a1b      	subs	r3, r3, r0
    314e:	4652      	mov	r2, sl
    3150:	40da      	lsrs	r2, r3
    3152:	4086      	lsls	r6, r0
    3154:	4316      	orrs	r6, r2
    3156:	4650      	mov	r0, sl
    3158:	465a      	mov	r2, fp
    315a:	40da      	lsrs	r2, r3
    315c:	40a0      	lsls	r0, r4
    315e:	1c39      	adds	r1, r7, #0
    3160:	40d9      	lsrs	r1, r3
    3162:	9000      	str	r0, [sp, #0]
    3164:	1c13      	adds	r3, r2, #0
    3166:	40a7      	lsls	r7, r4
    3168:	0430      	lsls	r0, r6, #16
    316a:	433b      	orrs	r3, r7
    316c:	4689      	mov	r9, r1
    316e:	0c37      	lsrs	r7, r6, #16
    3170:	0c01      	lsrs	r1, r0, #16
    3172:	9102      	str	r1, [sp, #8]
    3174:	4648      	mov	r0, r9
    3176:	1c39      	adds	r1, r7, #0
    3178:	9301      	str	r3, [sp, #4]
    317a:	f7ff fdcb 	bl	2d14 <__aeabi_uidiv>
    317e:	9a02      	ldr	r2, [sp, #8]
    3180:	4682      	mov	sl, r0
    3182:	4342      	muls	r2, r0
    3184:	1c39      	adds	r1, r7, #0
    3186:	4648      	mov	r0, r9
    3188:	4693      	mov	fp, r2
    318a:	f7ff fe07 	bl	2d9c <__aeabi_uidivmod>
    318e:	9b01      	ldr	r3, [sp, #4]
    3190:	0409      	lsls	r1, r1, #16
    3192:	0c18      	lsrs	r0, r3, #16
    3194:	4301      	orrs	r1, r0
    3196:	458b      	cmp	fp, r1
    3198:	d90a      	bls.n	31b0 <__divdi3+0x304>
    319a:	4652      	mov	r2, sl
    319c:	1989      	adds	r1, r1, r6
    319e:	3a01      	subs	r2, #1
    31a0:	428e      	cmp	r6, r1
    31a2:	d85e      	bhi.n	3262 <__divdi3+0x3b6>
    31a4:	458b      	cmp	fp, r1
    31a6:	d95c      	bls.n	3262 <__divdi3+0x3b6>
    31a8:	2302      	movs	r3, #2
    31aa:	4258      	negs	r0, r3
    31ac:	4482      	add	sl, r0
    31ae:	1989      	adds	r1, r1, r6
    31b0:	465a      	mov	r2, fp
    31b2:	1a89      	subs	r1, r1, r2
    31b4:	9103      	str	r1, [sp, #12]
    31b6:	1c08      	adds	r0, r1, #0
    31b8:	1c39      	adds	r1, r7, #0
    31ba:	f7ff fdab 	bl	2d14 <__aeabi_uidiv>
    31be:	9b02      	ldr	r3, [sp, #8]
    31c0:	1c39      	adds	r1, r7, #0
    31c2:	4343      	muls	r3, r0
    31c4:	4681      	mov	r9, r0
    31c6:	9803      	ldr	r0, [sp, #12]
    31c8:	469b      	mov	fp, r3
    31ca:	f7ff fde7 	bl	2d9c <__aeabi_uidivmod>
    31ce:	9f01      	ldr	r7, [sp, #4]
    31d0:	0409      	lsls	r1, r1, #16
    31d2:	0438      	lsls	r0, r7, #16
    31d4:	0c02      	lsrs	r2, r0, #16
    31d6:	4311      	orrs	r1, r2
    31d8:	458b      	cmp	fp, r1
    31da:	d90a      	bls.n	31f2 <__divdi3+0x346>
    31dc:	464b      	mov	r3, r9
    31de:	1989      	adds	r1, r1, r6
    31e0:	3b01      	subs	r3, #1
    31e2:	428e      	cmp	r6, r1
    31e4:	d839      	bhi.n	325a <__divdi3+0x3ae>
    31e6:	458b      	cmp	fp, r1
    31e8:	d937      	bls.n	325a <__divdi3+0x3ae>
    31ea:	2702      	movs	r7, #2
    31ec:	4278      	negs	r0, r7
    31ee:	4481      	add	r9, r0
    31f0:	1989      	adds	r1, r1, r6
    31f2:	465e      	mov	r6, fp
    31f4:	4653      	mov	r3, sl
    31f6:	1b8a      	subs	r2, r1, r6
    31f8:	0418      	lsls	r0, r3, #16
    31fa:	4649      	mov	r1, r9
    31fc:	4308      	orrs	r0, r1
    31fe:	9900      	ldr	r1, [sp, #0]
    3200:	4693      	mov	fp, r2
    3202:	040a      	lsls	r2, r1, #16
    3204:	0407      	lsls	r7, r0, #16
    3206:	0c12      	lsrs	r2, r2, #16
    3208:	0c3b      	lsrs	r3, r7, #16
    320a:	0c06      	lsrs	r6, r0, #16
    320c:	0c0f      	lsrs	r7, r1, #16
    320e:	1c11      	adds	r1, r2, #0
    3210:	4359      	muls	r1, r3
    3212:	4372      	muls	r2, r6
    3214:	437b      	muls	r3, r7
    3216:	437e      	muls	r6, r7
    3218:	18d3      	adds	r3, r2, r3
    321a:	0c0f      	lsrs	r7, r1, #16
    321c:	468c      	mov	ip, r1
    321e:	19d9      	adds	r1, r3, r7
    3220:	428a      	cmp	r2, r1
    3222:	d902      	bls.n	322a <__divdi3+0x37e>
    3224:	2280      	movs	r2, #128	; 0x80
    3226:	0253      	lsls	r3, r2, #9
    3228:	18f6      	adds	r6, r6, r3
    322a:	0c0f      	lsrs	r7, r1, #16
    322c:	19f2      	adds	r2, r6, r7
    322e:	4593      	cmp	fp, r2
    3230:	d310      	bcc.n	3254 <__divdi3+0x3a8>
    3232:	d005      	beq.n	3240 <__divdi3+0x394>
    3234:	2600      	movs	r6, #0
    3236:	e6b0      	b.n	2f9a <__divdi3+0xee>
    3238:	1c0f      	adds	r7, r1, #0
    323a:	e683      	b.n	2f44 <__divdi3+0x98>
    323c:	46b1      	mov	r9, r6
    323e:	e6a3      	b.n	2f88 <__divdi3+0xdc>
    3240:	4666      	mov	r6, ip
    3242:	4643      	mov	r3, r8
    3244:	0437      	lsls	r7, r6, #16
    3246:	40a3      	lsls	r3, r4
    3248:	0409      	lsls	r1, r1, #16
    324a:	0c3a      	lsrs	r2, r7, #16
    324c:	1c1c      	adds	r4, r3, #0
    324e:	188b      	adds	r3, r1, r2
    3250:	429c      	cmp	r4, r3
    3252:	d2ef      	bcs.n	3234 <__divdi3+0x388>
    3254:	3801      	subs	r0, #1
    3256:	2600      	movs	r6, #0
    3258:	e69f      	b.n	2f9a <__divdi3+0xee>
    325a:	4699      	mov	r9, r3
    325c:	e7c9      	b.n	31f2 <__divdi3+0x346>
    325e:	1c16      	adds	r6, r2, #0
    3260:	e76c      	b.n	313c <__divdi3+0x290>
    3262:	4692      	mov	sl, r2
    3264:	e7a4      	b.n	31b0 <__divdi3+0x304>
    3266:	4682      	mov	sl, r0
    3268:	e749      	b.n	30fe <__divdi3+0x252>
    326a:	2302      	movs	r3, #2
    326c:	4258      	negs	r0, r3
    326e:	4482      	add	sl, r0
    3270:	1909      	adds	r1, r1, r4
    3272:	e6d2      	b.n	301a <__divdi3+0x16e>
    3274:	2402      	movs	r4, #2
    3276:	4260      	negs	r0, r4
    3278:	4481      	add	r9, r0
    327a:	e6ed      	b.n	3058 <__divdi3+0x1ac>

0000327c <__udivdi3>:
    327c:	b5f0      	push	{r4, r5, r6, r7, lr}
    327e:	465f      	mov	r7, fp
    3280:	464d      	mov	r5, r9
    3282:	4644      	mov	r4, r8
    3284:	4656      	mov	r6, sl
    3286:	b4f0      	push	{r4, r5, r6, r7}
    3288:	4691      	mov	r9, r2
    328a:	b083      	sub	sp, #12
    328c:	1c04      	adds	r4, r0, #0
    328e:	1c0f      	adds	r7, r1, #0
    3290:	4698      	mov	r8, r3
    3292:	1c15      	adds	r5, r2, #0
    3294:	1c06      	adds	r6, r0, #0
    3296:	468b      	mov	fp, r1
    3298:	2b00      	cmp	r3, #0
    329a:	d155      	bne.n	3348 <__udivdi3+0xcc>
    329c:	428a      	cmp	r2, r1
    329e:	d96b      	bls.n	3378 <__udivdi3+0xfc>
    32a0:	1c10      	adds	r0, r2, #0
    32a2:	f000 f9b1 	bl	3608 <__clzsi2>
    32a6:	2800      	cmp	r0, #0
    32a8:	d00a      	beq.n	32c0 <__udivdi3+0x44>
    32aa:	2220      	movs	r2, #32
    32ac:	1c3b      	adds	r3, r7, #0
    32ae:	1c21      	adds	r1, r4, #0
    32b0:	1a17      	subs	r7, r2, r0
    32b2:	40f9      	lsrs	r1, r7
    32b4:	4083      	lsls	r3, r0
    32b6:	1c0c      	adds	r4, r1, #0
    32b8:	431c      	orrs	r4, r3
    32ba:	4085      	lsls	r5, r0
    32bc:	46a3      	mov	fp, r4
    32be:	4086      	lsls	r6, r0
    32c0:	0c2c      	lsrs	r4, r5, #16
    32c2:	0428      	lsls	r0, r5, #16
    32c4:	0c03      	lsrs	r3, r0, #16
    32c6:	1c21      	adds	r1, r4, #0
    32c8:	4658      	mov	r0, fp
    32ca:	4699      	mov	r9, r3
    32cc:	f7ff fd22 	bl	2d14 <__aeabi_uidiv>
    32d0:	464f      	mov	r7, r9
    32d2:	4680      	mov	r8, r0
    32d4:	4347      	muls	r7, r0
    32d6:	1c21      	adds	r1, r4, #0
    32d8:	4658      	mov	r0, fp
    32da:	f7ff fd5f 	bl	2d9c <__aeabi_uidivmod>
    32de:	0c30      	lsrs	r0, r6, #16
    32e0:	0409      	lsls	r1, r1, #16
    32e2:	4301      	orrs	r1, r0
    32e4:	428f      	cmp	r7, r1
    32e6:	d90c      	bls.n	3302 <__udivdi3+0x86>
    32e8:	4643      	mov	r3, r8
    32ea:	1949      	adds	r1, r1, r5
    32ec:	3b01      	subs	r3, #1
    32ee:	428d      	cmp	r5, r1
    32f0:	d900      	bls.n	32f4 <__udivdi3+0x78>
    32f2:	e15f      	b.n	35b4 <__udivdi3+0x338>
    32f4:	428f      	cmp	r7, r1
    32f6:	d800      	bhi.n	32fa <__udivdi3+0x7e>
    32f8:	e15c      	b.n	35b4 <__udivdi3+0x338>
    32fa:	2202      	movs	r2, #2
    32fc:	4250      	negs	r0, r2
    32fe:	4480      	add	r8, r0
    3300:	1949      	adds	r1, r1, r5
    3302:	1bcf      	subs	r7, r1, r7
    3304:	1c38      	adds	r0, r7, #0
    3306:	1c21      	adds	r1, r4, #0
    3308:	f7ff fd04 	bl	2d14 <__aeabi_uidiv>
    330c:	464b      	mov	r3, r9
    330e:	4343      	muls	r3, r0
    3310:	46ba      	mov	sl, r7
    3312:	1c21      	adds	r1, r4, #0
    3314:	1c07      	adds	r7, r0, #0
    3316:	4650      	mov	r0, sl
    3318:	469b      	mov	fp, r3
    331a:	f7ff fd3f 	bl	2d9c <__aeabi_uidivmod>
    331e:	0436      	lsls	r6, r6, #16
    3320:	040c      	lsls	r4, r1, #16
    3322:	0c31      	lsrs	r1, r6, #16
    3324:	4321      	orrs	r1, r4
    3326:	458b      	cmp	fp, r1
    3328:	d908      	bls.n	333c <__udivdi3+0xc0>
    332a:	1948      	adds	r0, r1, r5
    332c:	1e7a      	subs	r2, r7, #1
    332e:	4285      	cmp	r5, r0
    3330:	d900      	bls.n	3334 <__udivdi3+0xb8>
    3332:	e13d      	b.n	35b0 <__udivdi3+0x334>
    3334:	3f02      	subs	r7, #2
    3336:	4583      	cmp	fp, r0
    3338:	d800      	bhi.n	333c <__udivdi3+0xc0>
    333a:	e139      	b.n	35b0 <__udivdi3+0x334>
    333c:	4645      	mov	r5, r8
    333e:	0428      	lsls	r0, r5, #16
    3340:	2300      	movs	r3, #0
    3342:	4338      	orrs	r0, r7
    3344:	4698      	mov	r8, r3
    3346:	e00f      	b.n	3368 <__udivdi3+0xec>
    3348:	428b      	cmp	r3, r1
    334a:	d80a      	bhi.n	3362 <__udivdi3+0xe6>
    334c:	1c18      	adds	r0, r3, #0
    334e:	f000 f95b 	bl	3608 <__clzsi2>
    3352:	1e05      	subs	r5, r0, #0
    3354:	d160      	bne.n	3418 <__udivdi3+0x19c>
    3356:	45b8      	cmp	r8, r7
    3358:	d200      	bcs.n	335c <__udivdi3+0xe0>
    335a:	e125      	b.n	35a8 <__udivdi3+0x32c>
    335c:	45a1      	cmp	r9, r4
    335e:	d800      	bhi.n	3362 <__udivdi3+0xe6>
    3360:	e122      	b.n	35a8 <__udivdi3+0x32c>
    3362:	2500      	movs	r5, #0
    3364:	46a8      	mov	r8, r5
    3366:	2000      	movs	r0, #0
    3368:	4641      	mov	r1, r8
    336a:	b003      	add	sp, #12
    336c:	bc3c      	pop	{r2, r3, r4, r5}
    336e:	4690      	mov	r8, r2
    3370:	4699      	mov	r9, r3
    3372:	46a2      	mov	sl, r4
    3374:	46ab      	mov	fp, r5
    3376:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3378:	2a00      	cmp	r2, #0
    337a:	d104      	bne.n	3386 <__udivdi3+0x10a>
    337c:	2001      	movs	r0, #1
    337e:	2100      	movs	r1, #0
    3380:	f7ff fcc8 	bl	2d14 <__aeabi_uidiv>
    3384:	1c05      	adds	r5, r0, #0
    3386:	1c28      	adds	r0, r5, #0
    3388:	f000 f93e 	bl	3608 <__clzsi2>
    338c:	2800      	cmp	r0, #0
    338e:	d000      	beq.n	3392 <__udivdi3+0x116>
    3390:	e0b3      	b.n	34fa <__udivdi3+0x27e>
    3392:	1b7c      	subs	r4, r7, r5
    3394:	2101      	movs	r1, #1
    3396:	042f      	lsls	r7, r5, #16
    3398:	46a2      	mov	sl, r4
    339a:	0c3f      	lsrs	r7, r7, #16
    339c:	0c2c      	lsrs	r4, r5, #16
    339e:	4688      	mov	r8, r1
    33a0:	1c21      	adds	r1, r4, #0
    33a2:	4650      	mov	r0, sl
    33a4:	f7ff fcb6 	bl	2d14 <__aeabi_uidiv>
    33a8:	4683      	mov	fp, r0
    33aa:	4378      	muls	r0, r7
    33ac:	1c21      	adds	r1, r4, #0
    33ae:	4681      	mov	r9, r0
    33b0:	4650      	mov	r0, sl
    33b2:	f7ff fcf3 	bl	2d9c <__aeabi_uidivmod>
    33b6:	0c33      	lsrs	r3, r6, #16
    33b8:	0408      	lsls	r0, r1, #16
    33ba:	4318      	orrs	r0, r3
    33bc:	4581      	cmp	r9, r0
    33be:	d908      	bls.n	33d2 <__udivdi3+0x156>
    33c0:	465a      	mov	r2, fp
    33c2:	1940      	adds	r0, r0, r5
    33c4:	3a01      	subs	r2, #1
    33c6:	4285      	cmp	r5, r0
    33c8:	d802      	bhi.n	33d0 <__udivdi3+0x154>
    33ca:	4581      	cmp	r9, r0
    33cc:	d900      	bls.n	33d0 <__udivdi3+0x154>
    33ce:	e115      	b.n	35fc <__udivdi3+0x380>
    33d0:	4693      	mov	fp, r2
    33d2:	464a      	mov	r2, r9
    33d4:	1a80      	subs	r0, r0, r2
    33d6:	1c21      	adds	r1, r4, #0
    33d8:	4681      	mov	r9, r0
    33da:	f7ff fc9b 	bl	2d14 <__aeabi_uidiv>
    33de:	1c21      	adds	r1, r4, #0
    33e0:	4682      	mov	sl, r0
    33e2:	4347      	muls	r7, r0
    33e4:	4648      	mov	r0, r9
    33e6:	f7ff fcd9 	bl	2d9c <__aeabi_uidivmod>
    33ea:	0436      	lsls	r6, r6, #16
    33ec:	040c      	lsls	r4, r1, #16
    33ee:	0c32      	lsrs	r2, r6, #16
    33f0:	4322      	orrs	r2, r4
    33f2:	4297      	cmp	r7, r2
    33f4:	d90b      	bls.n	340e <__udivdi3+0x192>
    33f6:	4653      	mov	r3, sl
    33f8:	1950      	adds	r0, r2, r5
    33fa:	3b01      	subs	r3, #1
    33fc:	4285      	cmp	r5, r0
    33fe:	d900      	bls.n	3402 <__udivdi3+0x186>
    3400:	e0da      	b.n	35b8 <__udivdi3+0x33c>
    3402:	4287      	cmp	r7, r0
    3404:	d800      	bhi.n	3408 <__udivdi3+0x18c>
    3406:	e0d7      	b.n	35b8 <__udivdi3+0x33c>
    3408:	2502      	movs	r5, #2
    340a:	426f      	negs	r7, r5
    340c:	44ba      	add	sl, r7
    340e:	4659      	mov	r1, fp
    3410:	0408      	lsls	r0, r1, #16
    3412:	4654      	mov	r4, sl
    3414:	4320      	orrs	r0, r4
    3416:	e7a7      	b.n	3368 <__udivdi3+0xec>
    3418:	4646      	mov	r6, r8
    341a:	2320      	movs	r3, #32
    341c:	4086      	lsls	r6, r0
    341e:	464a      	mov	r2, r9
    3420:	1a18      	subs	r0, r3, r0
    3422:	40c2      	lsrs	r2, r0
    3424:	4316      	orrs	r6, r2
    3426:	1c22      	adds	r2, r4, #0
    3428:	40c2      	lsrs	r2, r0
    342a:	4649      	mov	r1, r9
    342c:	1c3b      	adds	r3, r7, #0
    342e:	40c3      	lsrs	r3, r0
    3430:	40a9      	lsls	r1, r5
    3432:	1c10      	adds	r0, r2, #0
    3434:	40af      	lsls	r7, r5
    3436:	469b      	mov	fp, r3
    3438:	4338      	orrs	r0, r7
    343a:	9100      	str	r1, [sp, #0]
    343c:	0c37      	lsrs	r7, r6, #16
    343e:	0431      	lsls	r1, r6, #16
    3440:	0c0b      	lsrs	r3, r1, #16
    3442:	9001      	str	r0, [sp, #4]
    3444:	1c39      	adds	r1, r7, #0
    3446:	4658      	mov	r0, fp
    3448:	469a      	mov	sl, r3
    344a:	f7ff fc63 	bl	2d14 <__aeabi_uidiv>
    344e:	4652      	mov	r2, sl
    3450:	4342      	muls	r2, r0
    3452:	4681      	mov	r9, r0
    3454:	1c39      	adds	r1, r7, #0
    3456:	4658      	mov	r0, fp
    3458:	4690      	mov	r8, r2
    345a:	f7ff fc9f 	bl	2d9c <__aeabi_uidivmod>
    345e:	9b01      	ldr	r3, [sp, #4]
    3460:	0409      	lsls	r1, r1, #16
    3462:	0c1a      	lsrs	r2, r3, #16
    3464:	4311      	orrs	r1, r2
    3466:	4588      	cmp	r8, r1
    3468:	d906      	bls.n	3478 <__udivdi3+0x1fc>
    346a:	4648      	mov	r0, r9
    346c:	1989      	adds	r1, r1, r6
    346e:	3801      	subs	r0, #1
    3470:	428e      	cmp	r6, r1
    3472:	d800      	bhi.n	3476 <__udivdi3+0x1fa>
    3474:	e0b6      	b.n	35e4 <__udivdi3+0x368>
    3476:	4681      	mov	r9, r0
    3478:	4640      	mov	r0, r8
    347a:	1a09      	subs	r1, r1, r0
    347c:	468b      	mov	fp, r1
    347e:	1c08      	adds	r0, r1, #0
    3480:	1c39      	adds	r1, r7, #0
    3482:	f7ff fc47 	bl	2d14 <__aeabi_uidiv>
    3486:	4653      	mov	r3, sl
    3488:	4343      	muls	r3, r0
    348a:	1c39      	adds	r1, r7, #0
    348c:	4680      	mov	r8, r0
    348e:	4658      	mov	r0, fp
    3490:	469a      	mov	sl, r3
    3492:	f7ff fc83 	bl	2d9c <__aeabi_uidivmod>
    3496:	9f01      	ldr	r7, [sp, #4]
    3498:	0409      	lsls	r1, r1, #16
    349a:	0438      	lsls	r0, r7, #16
    349c:	0c03      	lsrs	r3, r0, #16
    349e:	4319      	orrs	r1, r3
    34a0:	458a      	cmp	sl, r1
    34a2:	d906      	bls.n	34b2 <__udivdi3+0x236>
    34a4:	4642      	mov	r2, r8
    34a6:	1989      	adds	r1, r1, r6
    34a8:	3a01      	subs	r2, #1
    34aa:	428e      	cmp	r6, r1
    34ac:	d800      	bhi.n	34b0 <__udivdi3+0x234>
    34ae:	e091      	b.n	35d4 <__udivdi3+0x358>
    34b0:	4690      	mov	r8, r2
    34b2:	4656      	mov	r6, sl
    34b4:	464a      	mov	r2, r9
    34b6:	1b8b      	subs	r3, r1, r6
    34b8:	0410      	lsls	r0, r2, #16
    34ba:	4641      	mov	r1, r8
    34bc:	4308      	orrs	r0, r1
    34be:	9900      	ldr	r1, [sp, #0]
    34c0:	0407      	lsls	r7, r0, #16
    34c2:	040e      	lsls	r6, r1, #16
    34c4:	0c36      	lsrs	r6, r6, #16
    34c6:	0c02      	lsrs	r2, r0, #16
    34c8:	469b      	mov	fp, r3
    34ca:	0c3b      	lsrs	r3, r7, #16
    34cc:	0c0f      	lsrs	r7, r1, #16
    34ce:	1c31      	adds	r1, r6, #0
    34d0:	4359      	muls	r1, r3
    34d2:	4356      	muls	r6, r2
    34d4:	437b      	muls	r3, r7
    34d6:	437a      	muls	r2, r7
    34d8:	18f3      	adds	r3, r6, r3
    34da:	0c0f      	lsrs	r7, r1, #16
    34dc:	468c      	mov	ip, r1
    34de:	19d9      	adds	r1, r3, r7
    34e0:	428e      	cmp	r6, r1
    34e2:	d902      	bls.n	34ea <__udivdi3+0x26e>
    34e4:	2680      	movs	r6, #128	; 0x80
    34e6:	0273      	lsls	r3, r6, #9
    34e8:	18d2      	adds	r2, r2, r3
    34ea:	0c0f      	lsrs	r7, r1, #16
    34ec:	19d6      	adds	r6, r2, r7
    34ee:	45b3      	cmp	fp, r6
    34f0:	d36c      	bcc.n	35cc <__udivdi3+0x350>
    34f2:	d063      	beq.n	35bc <__udivdi3+0x340>
    34f4:	2400      	movs	r4, #0
    34f6:	46a0      	mov	r8, r4
    34f8:	e736      	b.n	3368 <__udivdi3+0xec>
    34fa:	2120      	movs	r1, #32
    34fc:	1a0b      	subs	r3, r1, r0
    34fe:	1c26      	adds	r6, r4, #0
    3500:	40de      	lsrs	r6, r3
    3502:	4085      	lsls	r5, r0
    3504:	1c3a      	adds	r2, r7, #0
    3506:	1c31      	adds	r1, r6, #0
    3508:	4087      	lsls	r7, r0
    350a:	40da      	lsrs	r2, r3
    350c:	4339      	orrs	r1, r7
    350e:	1c26      	adds	r6, r4, #0
    3510:	0c2c      	lsrs	r4, r5, #16
    3512:	9100      	str	r1, [sp, #0]
    3514:	4086      	lsls	r6, r0
    3516:	1c21      	adds	r1, r4, #0
    3518:	1c10      	adds	r0, r2, #0
    351a:	4693      	mov	fp, r2
    351c:	f7ff fbfa 	bl	2d14 <__aeabi_uidiv>
    3520:	042f      	lsls	r7, r5, #16
    3522:	0c3f      	lsrs	r7, r7, #16
    3524:	4681      	mov	r9, r0
    3526:	4378      	muls	r0, r7
    3528:	1c21      	adds	r1, r4, #0
    352a:	4682      	mov	sl, r0
    352c:	4658      	mov	r0, fp
    352e:	f7ff fc35 	bl	2d9c <__aeabi_uidivmod>
    3532:	9b00      	ldr	r3, [sp, #0]
    3534:	0409      	lsls	r1, r1, #16
    3536:	0c1a      	lsrs	r2, r3, #16
    3538:	4311      	orrs	r1, r2
    353a:	458a      	cmp	sl, r1
    353c:	d90a      	bls.n	3554 <__udivdi3+0x2d8>
    353e:	4648      	mov	r0, r9
    3540:	1949      	adds	r1, r1, r5
    3542:	3801      	subs	r0, #1
    3544:	428d      	cmp	r5, r1
    3546:	d857      	bhi.n	35f8 <__udivdi3+0x37c>
    3548:	458a      	cmp	sl, r1
    354a:	d955      	bls.n	35f8 <__udivdi3+0x37c>
    354c:	2302      	movs	r3, #2
    354e:	425a      	negs	r2, r3
    3550:	4491      	add	r9, r2
    3552:	1949      	adds	r1, r1, r5
    3554:	4650      	mov	r0, sl
    3556:	1a09      	subs	r1, r1, r0
    3558:	468b      	mov	fp, r1
    355a:	1c08      	adds	r0, r1, #0
    355c:	1c21      	adds	r1, r4, #0
    355e:	f7ff fbd9 	bl	2d14 <__aeabi_uidiv>
    3562:	1c03      	adds	r3, r0, #0
    3564:	437b      	muls	r3, r7
    3566:	4680      	mov	r8, r0
    3568:	1c21      	adds	r1, r4, #0
    356a:	4658      	mov	r0, fp
    356c:	469a      	mov	sl, r3
    356e:	f7ff fc15 	bl	2d9c <__aeabi_uidivmod>
    3572:	9a00      	ldr	r2, [sp, #0]
    3574:	0409      	lsls	r1, r1, #16
    3576:	0410      	lsls	r0, r2, #16
    3578:	0c03      	lsrs	r3, r0, #16
    357a:	4319      	orrs	r1, r3
    357c:	458a      	cmp	sl, r1
    357e:	d90a      	bls.n	3596 <__udivdi3+0x31a>
    3580:	4642      	mov	r2, r8
    3582:	1949      	adds	r1, r1, r5
    3584:	3a01      	subs	r2, #1
    3586:	428d      	cmp	r5, r1
    3588:	d834      	bhi.n	35f4 <__udivdi3+0x378>
    358a:	458a      	cmp	sl, r1
    358c:	d932      	bls.n	35f4 <__udivdi3+0x378>
    358e:	2002      	movs	r0, #2
    3590:	4243      	negs	r3, r0
    3592:	4498      	add	r8, r3
    3594:	1949      	adds	r1, r1, r5
    3596:	4652      	mov	r2, sl
    3598:	4648      	mov	r0, r9
    359a:	1a89      	subs	r1, r1, r2
    359c:	0403      	lsls	r3, r0, #16
    359e:	4642      	mov	r2, r8
    35a0:	431a      	orrs	r2, r3
    35a2:	468a      	mov	sl, r1
    35a4:	4690      	mov	r8, r2
    35a6:	e6fb      	b.n	33a0 <__udivdi3+0x124>
    35a8:	2000      	movs	r0, #0
    35aa:	4680      	mov	r8, r0
    35ac:	2001      	movs	r0, #1
    35ae:	e6db      	b.n	3368 <__udivdi3+0xec>
    35b0:	1c17      	adds	r7, r2, #0
    35b2:	e6c3      	b.n	333c <__udivdi3+0xc0>
    35b4:	4698      	mov	r8, r3
    35b6:	e6a4      	b.n	3302 <__udivdi3+0x86>
    35b8:	469a      	mov	sl, r3
    35ba:	e728      	b.n	340e <__udivdi3+0x192>
    35bc:	40ac      	lsls	r4, r5
    35be:	040d      	lsls	r5, r1, #16
    35c0:	4661      	mov	r1, ip
    35c2:	040b      	lsls	r3, r1, #16
    35c4:	0c1a      	lsrs	r2, r3, #16
    35c6:	18af      	adds	r7, r5, r2
    35c8:	42bc      	cmp	r4, r7
    35ca:	d293      	bcs.n	34f4 <__udivdi3+0x278>
    35cc:	2600      	movs	r6, #0
    35ce:	3801      	subs	r0, #1
    35d0:	46b0      	mov	r8, r6
    35d2:	e6c9      	b.n	3368 <__udivdi3+0xec>
    35d4:	458a      	cmp	sl, r1
    35d6:	d800      	bhi.n	35da <__udivdi3+0x35e>
    35d8:	e76a      	b.n	34b0 <__udivdi3+0x234>
    35da:	2702      	movs	r7, #2
    35dc:	4278      	negs	r0, r7
    35de:	4480      	add	r8, r0
    35e0:	1989      	adds	r1, r1, r6
    35e2:	e766      	b.n	34b2 <__udivdi3+0x236>
    35e4:	4588      	cmp	r8, r1
    35e6:	d800      	bhi.n	35ea <__udivdi3+0x36e>
    35e8:	e745      	b.n	3476 <__udivdi3+0x1fa>
    35ea:	2302      	movs	r3, #2
    35ec:	425a      	negs	r2, r3
    35ee:	4491      	add	r9, r2
    35f0:	1989      	adds	r1, r1, r6
    35f2:	e741      	b.n	3478 <__udivdi3+0x1fc>
    35f4:	4690      	mov	r8, r2
    35f6:	e7ce      	b.n	3596 <__udivdi3+0x31a>
    35f8:	4681      	mov	r9, r0
    35fa:	e7ab      	b.n	3554 <__udivdi3+0x2d8>
    35fc:	2102      	movs	r1, #2
    35fe:	424b      	negs	r3, r1
    3600:	449b      	add	fp, r3
    3602:	1940      	adds	r0, r0, r5
    3604:	e6e5      	b.n	33d2 <__udivdi3+0x156>
    3606:	46c0      	nop			; (mov r8, r8)

00003608 <__clzsi2>:
    3608:	211c      	movs	r1, #28
    360a:	2301      	movs	r3, #1
    360c:	041b      	lsls	r3, r3, #16
    360e:	4298      	cmp	r0, r3
    3610:	d301      	bcc.n	3616 <__clzsi2+0xe>
    3612:	0c00      	lsrs	r0, r0, #16
    3614:	3910      	subs	r1, #16
    3616:	0a1b      	lsrs	r3, r3, #8
    3618:	4298      	cmp	r0, r3
    361a:	d301      	bcc.n	3620 <__clzsi2+0x18>
    361c:	0a00      	lsrs	r0, r0, #8
    361e:	3908      	subs	r1, #8
    3620:	091b      	lsrs	r3, r3, #4
    3622:	4298      	cmp	r0, r3
    3624:	d301      	bcc.n	362a <__clzsi2+0x22>
    3626:	0900      	lsrs	r0, r0, #4
    3628:	3904      	subs	r1, #4
    362a:	a202      	add	r2, pc, #8	; (adr r2, 3634 <__clzsi2+0x2c>)
    362c:	5c10      	ldrb	r0, [r2, r0]
    362e:	1840      	adds	r0, r0, r1
    3630:	4770      	bx	lr
    3632:	46c0      	nop			; (mov r8, r8)
    3634:	02020304 	.word	0x02020304
    3638:	01010101 	.word	0x01010101
	...

00003644 <__register_exitproc>:
    3644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3646:	1c1e      	adds	r6, r3, #0
    3648:	4b23      	ldr	r3, [pc, #140]	; (36d8 <__register_exitproc+0x94>)
    364a:	1c17      	adds	r7, r2, #0
    364c:	681a      	ldr	r2, [r3, #0]
    364e:	1c05      	adds	r5, r0, #0
    3650:	1c14      	adds	r4, r2, #0
    3652:	34fc      	adds	r4, #252	; 0xfc
    3654:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    3656:	9101      	str	r1, [sp, #4]
    3658:	2800      	cmp	r0, #0
    365a:	d103      	bne.n	3664 <__register_exitproc+0x20>
    365c:	21a6      	movs	r1, #166	; 0xa6
    365e:	0048      	lsls	r0, r1, #1
    3660:	1810      	adds	r0, r2, r0
    3662:	64e0      	str	r0, [r4, #76]	; 0x4c
    3664:	6843      	ldr	r3, [r0, #4]
    3666:	2b1f      	cmp	r3, #31
    3668:	dd16      	ble.n	3698 <__register_exitproc+0x54>
    366a:	4a1c      	ldr	r2, [pc, #112]	; (36dc <__register_exitproc+0x98>)
    366c:	2a00      	cmp	r2, #0
    366e:	d102      	bne.n	3676 <__register_exitproc+0x32>
    3670:	2001      	movs	r0, #1
    3672:	4240      	negs	r0, r0
    3674:	e02f      	b.n	36d6 <__register_exitproc+0x92>
    3676:	21c8      	movs	r1, #200	; 0xc8
    3678:	0048      	lsls	r0, r1, #1
    367a:	e000      	b.n	367e <__register_exitproc+0x3a>
    367c:	bf00      	nop
    367e:	2800      	cmp	r0, #0
    3680:	d0f6      	beq.n	3670 <__register_exitproc+0x2c>
    3682:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    3684:	2300      	movs	r3, #0
    3686:	6002      	str	r2, [r0, #0]
    3688:	6043      	str	r3, [r0, #4]
    368a:	22c6      	movs	r2, #198	; 0xc6
    368c:	64e0      	str	r0, [r4, #76]	; 0x4c
    368e:	24c4      	movs	r4, #196	; 0xc4
    3690:	0061      	lsls	r1, r4, #1
    3692:	0054      	lsls	r4, r2, #1
    3694:	5043      	str	r3, [r0, r1]
    3696:	5103      	str	r3, [r0, r4]
    3698:	6843      	ldr	r3, [r0, #4]
    369a:	2d00      	cmp	r5, #0
    369c:	d014      	beq.n	36c8 <__register_exitproc+0x84>
    369e:	1c04      	adds	r4, r0, #0
    36a0:	3488      	adds	r4, #136	; 0x88
    36a2:	0099      	lsls	r1, r3, #2
    36a4:	510f      	str	r7, [r1, r4]
    36a6:	27c2      	movs	r7, #194	; 0xc2
    36a8:	007a      	lsls	r2, r7, #1
    36aa:	1882      	adds	r2, r0, r2
    36ac:	6857      	ldr	r7, [r2, #4]
    36ae:	2101      	movs	r1, #1
    36b0:	4099      	lsls	r1, r3
    36b2:	430f      	orrs	r7, r1
    36b4:	6057      	str	r7, [r2, #4]
    36b6:	1c1f      	adds	r7, r3, #0
    36b8:	3720      	adds	r7, #32
    36ba:	00bf      	lsls	r7, r7, #2
    36bc:	513e      	str	r6, [r7, r4]
    36be:	2d02      	cmp	r5, #2
    36c0:	d102      	bne.n	36c8 <__register_exitproc+0x84>
    36c2:	6895      	ldr	r5, [r2, #8]
    36c4:	4329      	orrs	r1, r5
    36c6:	6091      	str	r1, [r2, #8]
    36c8:	1c9e      	adds	r6, r3, #2
    36ca:	9901      	ldr	r1, [sp, #4]
    36cc:	00b4      	lsls	r4, r6, #2
    36ce:	3301      	adds	r3, #1
    36d0:	5021      	str	r1, [r4, r0]
    36d2:	6043      	str	r3, [r0, #4]
    36d4:	2000      	movs	r0, #0
    36d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    36d8:	00009b14 	.word	0x00009b14
    36dc:	00000000 	.word	0x00000000

000036e0 <__libc_fini_array>:
    36e0:	b538      	push	{r3, r4, r5, lr}
    36e2:	4b08      	ldr	r3, [pc, #32]	; (3704 <__libc_fini_array+0x24>)
    36e4:	4c08      	ldr	r4, [pc, #32]	; (3708 <__libc_fini_array+0x28>)
    36e6:	1c1d      	adds	r5, r3, #0
    36e8:	1ae0      	subs	r0, r4, r3
    36ea:	1084      	asrs	r4, r0, #2
    36ec:	2c00      	cmp	r4, #0
    36ee:	d006      	beq.n	36fe <__libc_fini_array+0x1e>
    36f0:	00a1      	lsls	r1, r4, #2
    36f2:	186a      	adds	r2, r5, r1
    36f4:	3a04      	subs	r2, #4
    36f6:	6813      	ldr	r3, [r2, #0]
    36f8:	4798      	blx	r3
    36fa:	3c01      	subs	r4, #1
    36fc:	e7f6      	b.n	36ec <__libc_fini_array+0xc>
    36fe:	f006 fb31 	bl	9d64 <_fini>
    3702:	bd38      	pop	{r3, r4, r5, pc}
    3704:	00009d70 	.word	0x00009d70
    3708:	00009d74 	.word	0x00009d74

0000370c <__libc_init_array>:
    370c:	b570      	push	{r4, r5, r6, lr}
    370e:	4b0e      	ldr	r3, [pc, #56]	; (3748 <__libc_init_array+0x3c>)
    3710:	4d0e      	ldr	r5, [pc, #56]	; (374c <__libc_init_array+0x40>)
    3712:	2400      	movs	r4, #0
    3714:	1ae8      	subs	r0, r5, r3
    3716:	1085      	asrs	r5, r0, #2
    3718:	1c1e      	adds	r6, r3, #0
    371a:	42ac      	cmp	r4, r5
    371c:	d004      	beq.n	3728 <__libc_init_array+0x1c>
    371e:	00a1      	lsls	r1, r4, #2
    3720:	5872      	ldr	r2, [r6, r1]
    3722:	4790      	blx	r2
    3724:	3401      	adds	r4, #1
    3726:	e7f8      	b.n	371a <__libc_init_array+0xe>
    3728:	f006 fb12 	bl	9d50 <_init>
    372c:	4908      	ldr	r1, [pc, #32]	; (3750 <__libc_init_array+0x44>)
    372e:	4a09      	ldr	r2, [pc, #36]	; (3754 <__libc_init_array+0x48>)
    3730:	1c0e      	adds	r6, r1, #0
    3732:	1a54      	subs	r4, r2, r1
    3734:	10a5      	asrs	r5, r4, #2
    3736:	2400      	movs	r4, #0
    3738:	42ac      	cmp	r4, r5
    373a:	d004      	beq.n	3746 <__libc_init_array+0x3a>
    373c:	00a3      	lsls	r3, r4, #2
    373e:	58f0      	ldr	r0, [r6, r3]
    3740:	4780      	blx	r0
    3742:	3401      	adds	r4, #1
    3744:	e7f8      	b.n	3738 <__libc_init_array+0x2c>
    3746:	bd70      	pop	{r4, r5, r6, pc}
    3748:	00009d5c 	.word	0x00009d5c
    374c:	00009d5c 	.word	0x00009d5c
    3750:	00009d5c 	.word	0x00009d5c
    3754:	00009d64 	.word	0x00009d64

00003758 <memcpy>:
    3758:	b510      	push	{r4, lr}
    375a:	2300      	movs	r3, #0
    375c:	4293      	cmp	r3, r2
    375e:	d003      	beq.n	3768 <memcpy+0x10>
    3760:	5ccc      	ldrb	r4, [r1, r3]
    3762:	54c4      	strb	r4, [r0, r3]
    3764:	3301      	adds	r3, #1
    3766:	e7f9      	b.n	375c <memcpy+0x4>
    3768:	bd10      	pop	{r4, pc}

0000376a <memset>:
    376a:	1882      	adds	r2, r0, r2
    376c:	1c03      	adds	r3, r0, #0
    376e:	4293      	cmp	r3, r2
    3770:	d002      	beq.n	3778 <memset+0xe>
    3772:	7019      	strb	r1, [r3, #0]
    3774:	3301      	adds	r3, #1
    3776:	e7fa      	b.n	376e <memset+0x4>
    3778:	4770      	bx	lr
	...

0000377c <_sprintf_r>:
    377c:	b40c      	push	{r2, r3}
    377e:	b510      	push	{r4, lr}
    3780:	b09c      	sub	sp, #112	; 0x70
    3782:	ab1e      	add	r3, sp, #120	; 0x78
    3784:	2482      	movs	r4, #130	; 0x82
    3786:	cb04      	ldmia	r3!, {r2}
    3788:	9102      	str	r1, [sp, #8]
    378a:	aa02      	add	r2, sp, #8
    378c:	9106      	str	r1, [sp, #24]
    378e:	00a4      	lsls	r4, r4, #2
    3790:	4909      	ldr	r1, [pc, #36]	; (37b8 <_sprintf_r+0x3c>)
    3792:	8194      	strh	r4, [r2, #12]
    3794:	2401      	movs	r4, #1
    3796:	9104      	str	r1, [sp, #16]
    3798:	9107      	str	r1, [sp, #28]
    379a:	4261      	negs	r1, r4
    379c:	81d1      	strh	r1, [r2, #14]
    379e:	1c11      	adds	r1, r2, #0
    37a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    37a2:	9301      	str	r3, [sp, #4]
    37a4:	f000 f82c 	bl	3800 <_svfprintf_r>
    37a8:	9a02      	ldr	r2, [sp, #8]
    37aa:	2300      	movs	r3, #0
    37ac:	7013      	strb	r3, [r2, #0]
    37ae:	b01c      	add	sp, #112	; 0x70
    37b0:	bc10      	pop	{r4}
    37b2:	bc08      	pop	{r3}
    37b4:	b002      	add	sp, #8
    37b6:	4718      	bx	r3
    37b8:	7fffffff 	.word	0x7fffffff

000037bc <sprintf>:
    37bc:	b40e      	push	{r1, r2, r3}
    37be:	b500      	push	{lr}
    37c0:	b09c      	sub	sp, #112	; 0x70
    37c2:	ab1d      	add	r3, sp, #116	; 0x74
    37c4:	a902      	add	r1, sp, #8
    37c6:	cb04      	ldmia	r3!, {r2}
    37c8:	2282      	movs	r2, #130	; 0x82
    37ca:	9002      	str	r0, [sp, #8]
    37cc:	6108      	str	r0, [r1, #16]
    37ce:	0092      	lsls	r2, r2, #2
    37d0:	4809      	ldr	r0, [pc, #36]	; (37f8 <sprintf+0x3c>)
    37d2:	818a      	strh	r2, [r1, #12]
    37d4:	2201      	movs	r2, #1
    37d6:	6088      	str	r0, [r1, #8]
    37d8:	6148      	str	r0, [r1, #20]
    37da:	4250      	negs	r0, r2
    37dc:	4a07      	ldr	r2, [pc, #28]	; (37fc <sprintf+0x40>)
    37de:	81c8      	strh	r0, [r1, #14]
    37e0:	6810      	ldr	r0, [r2, #0]
    37e2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    37e4:	9301      	str	r3, [sp, #4]
    37e6:	f000 f80b 	bl	3800 <_svfprintf_r>
    37ea:	9902      	ldr	r1, [sp, #8]
    37ec:	2300      	movs	r3, #0
    37ee:	700b      	strb	r3, [r1, #0]
    37f0:	b01c      	add	sp, #112	; 0x70
    37f2:	bc08      	pop	{r3}
    37f4:	b003      	add	sp, #12
    37f6:	4718      	bx	r3
    37f8:	7fffffff 	.word	0x7fffffff
    37fc:	20000018 	.word	0x20000018

00003800 <_svfprintf_r>:
    3800:	b5f0      	push	{r4, r5, r6, r7, lr}
    3802:	b0c5      	sub	sp, #276	; 0x114
    3804:	910c      	str	r1, [sp, #48]	; 0x30
    3806:	1c1f      	adds	r7, r3, #0
    3808:	1c15      	adds	r5, r2, #0
    380a:	900d      	str	r0, [sp, #52]	; 0x34
    380c:	f001 ff4c 	bl	56a8 <_localeconv_r>
    3810:	6800      	ldr	r0, [r0, #0]
    3812:	901a      	str	r0, [sp, #104]	; 0x68
    3814:	f002 fda0 	bl	6358 <strlen>
    3818:	9019      	str	r0, [sp, #100]	; 0x64
    381a:	2000      	movs	r0, #0
    381c:	2100      	movs	r1, #0
    381e:	9014      	str	r0, [sp, #80]	; 0x50
    3820:	9115      	str	r1, [sp, #84]	; 0x54
    3822:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    3824:	89a3      	ldrh	r3, [r4, #12]
    3826:	0618      	lsls	r0, r3, #24
    3828:	d512      	bpl.n	3850 <_svfprintf_r+0x50>
    382a:	6921      	ldr	r1, [r4, #16]
    382c:	2900      	cmp	r1, #0
    382e:	d10f      	bne.n	3850 <_svfprintf_r+0x50>
    3830:	980d      	ldr	r0, [sp, #52]	; 0x34
    3832:	2140      	movs	r1, #64	; 0x40
    3834:	f001 ff50 	bl	56d8 <_malloc_r>
    3838:	6020      	str	r0, [r4, #0]
    383a:	6120      	str	r0, [r4, #16]
    383c:	2800      	cmp	r0, #0
    383e:	d104      	bne.n	384a <_svfprintf_r+0x4a>
    3840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3842:	260c      	movs	r6, #12
    3844:	601e      	str	r6, [r3, #0]
    3846:	f000 ff85 	bl	4754 <_svfprintf_r+0xf54>
    384a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    384c:	2240      	movs	r2, #64	; 0x40
    384e:	6172      	str	r2, [r6, #20]
    3850:	2000      	movs	r0, #0
    3852:	ac34      	add	r4, sp, #208	; 0xd0
    3854:	9427      	str	r4, [sp, #156]	; 0x9c
    3856:	9029      	str	r0, [sp, #164]	; 0xa4
    3858:	9028      	str	r0, [sp, #160]	; 0xa0
    385a:	9512      	str	r5, [sp, #72]	; 0x48
    385c:	9010      	str	r0, [sp, #64]	; 0x40
    385e:	901d      	str	r0, [sp, #116]	; 0x74
    3860:	901c      	str	r0, [sp, #112]	; 0x70
    3862:	9013      	str	r0, [sp, #76]	; 0x4c
    3864:	9d12      	ldr	r5, [sp, #72]	; 0x48
    3866:	782b      	ldrb	r3, [r5, #0]
    3868:	2b00      	cmp	r3, #0
    386a:	d103      	bne.n	3874 <_svfprintf_r+0x74>
    386c:	9912      	ldr	r1, [sp, #72]	; 0x48
    386e:	1a6e      	subs	r6, r5, r1
    3870:	d104      	bne.n	387c <_svfprintf_r+0x7c>
    3872:	e01d      	b.n	38b0 <_svfprintf_r+0xb0>
    3874:	2b25      	cmp	r3, #37	; 0x25
    3876:	d0f9      	beq.n	386c <_svfprintf_r+0x6c>
    3878:	3501      	adds	r5, #1
    387a:	e7f4      	b.n	3866 <_svfprintf_r+0x66>
    387c:	9829      	ldr	r0, [sp, #164]	; 0xa4
    387e:	9928      	ldr	r1, [sp, #160]	; 0xa0
    3880:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3882:	1983      	adds	r3, r0, r6
    3884:	3101      	adds	r1, #1
    3886:	6022      	str	r2, [r4, #0]
    3888:	6066      	str	r6, [r4, #4]
    388a:	9329      	str	r3, [sp, #164]	; 0xa4
    388c:	9128      	str	r1, [sp, #160]	; 0xa0
    388e:	2907      	cmp	r1, #7
    3890:	dc01      	bgt.n	3896 <_svfprintf_r+0x96>
    3892:	3408      	adds	r4, #8
    3894:	e009      	b.n	38aa <_svfprintf_r+0xaa>
    3896:	980d      	ldr	r0, [sp, #52]	; 0x34
    3898:	990c      	ldr	r1, [sp, #48]	; 0x30
    389a:	aa27      	add	r2, sp, #156	; 0x9c
    389c:	f002 fd64 	bl	6368 <__ssprint_r>
    38a0:	2800      	cmp	r0, #0
    38a2:	d001      	beq.n	38a8 <_svfprintf_r+0xa8>
    38a4:	f000 ff52 	bl	474c <_svfprintf_r+0xf4c>
    38a8:	ac34      	add	r4, sp, #208	; 0xd0
    38aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    38ac:	1996      	adds	r6, r2, r6
    38ae:	9613      	str	r6, [sp, #76]	; 0x4c
    38b0:	7828      	ldrb	r0, [r5, #0]
    38b2:	2800      	cmp	r0, #0
    38b4:	d101      	bne.n	38ba <_svfprintf_r+0xba>
    38b6:	f000 ff41 	bl	473c <_svfprintf_r+0xf3c>
    38ba:	3501      	adds	r5, #1
    38bc:	466b      	mov	r3, sp
    38be:	9512      	str	r5, [sp, #72]	; 0x48
    38c0:	337b      	adds	r3, #123	; 0x7b
    38c2:	2500      	movs	r5, #0
    38c4:	2101      	movs	r1, #1
    38c6:	701d      	strb	r5, [r3, #0]
    38c8:	424e      	negs	r6, r1
    38ca:	9517      	str	r5, [sp, #92]	; 0x5c
    38cc:	9509      	str	r5, [sp, #36]	; 0x24
    38ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
    38d0:	9d12      	ldr	r5, [sp, #72]	; 0x48
    38d2:	7810      	ldrb	r0, [r2, #0]
    38d4:	3501      	adds	r5, #1
    38d6:	9008      	str	r0, [sp, #32]
    38d8:	9512      	str	r5, [sp, #72]	; 0x48
    38da:	9808      	ldr	r0, [sp, #32]
    38dc:	3820      	subs	r0, #32
    38de:	2858      	cmp	r0, #88	; 0x58
    38e0:	d900      	bls.n	38e4 <_svfprintf_r+0xe4>
    38e2:	e390      	b.n	4006 <_svfprintf_r+0x806>
    38e4:	f003 fba4 	bl	7030 <__gnu_thumb1_case_uhi>
    38e8:	038f0059 	.word	0x038f0059
    38ec:	0060038f 	.word	0x0060038f
    38f0:	038f038f 	.word	0x038f038f
    38f4:	038f038f 	.word	0x038f038f
    38f8:	038f038f 	.word	0x038f038f
    38fc:	006b0062 	.word	0x006b0062
    3900:	0069038f 	.word	0x0069038f
    3904:	038f0070 	.word	0x038f0070
    3908:	00990097 	.word	0x00990097
    390c:	00990099 	.word	0x00990099
    3910:	00990099 	.word	0x00990099
    3914:	00990099 	.word	0x00990099
    3918:	00990099 	.word	0x00990099
    391c:	038f038f 	.word	0x038f038f
    3920:	038f038f 	.word	0x038f038f
    3924:	038f038f 	.word	0x038f038f
    3928:	038f038f 	.word	0x038f038f
    392c:	038f038f 	.word	0x038f038f
    3930:	00f400c6 	.word	0x00f400c6
    3934:	00f4038f 	.word	0x00f4038f
    3938:	038f038f 	.word	0x038f038f
    393c:	038f038f 	.word	0x038f038f
    3940:	038f00ab 	.word	0x038f00ab
    3944:	0254038f 	.word	0x0254038f
    3948:	038f038f 	.word	0x038f038f
    394c:	038f038f 	.word	0x038f038f
    3950:	02ba038f 	.word	0x02ba038f
    3954:	038f038f 	.word	0x038f038f
    3958:	038f02e2 	.word	0x038f02e2
    395c:	038f038f 	.word	0x038f038f
    3960:	038f038f 	.word	0x038f038f
    3964:	038f038f 	.word	0x038f038f
    3968:	038f038f 	.word	0x038f038f
    396c:	00bd038f 	.word	0x00bd038f
    3970:	00f400ca 	.word	0x00f400ca
    3974:	00f400f4 	.word	0x00f400f4
    3978:	00ca00ad 	.word	0x00ca00ad
    397c:	038f038f 	.word	0x038f038f
    3980:	038f00af 	.word	0x038f00af
    3984:	0258023a 	.word	0x0258023a
    3988:	00b8027b 	.word	0x00b8027b
    398c:	029e038f 	.word	0x029e038f
    3990:	02be038f 	.word	0x02be038f
    3994:	038f038f 	.word	0x038f038f
    3998:	02e0      	.short	0x02e0
    399a:	466b      	mov	r3, sp
    399c:	337b      	adds	r3, #123	; 0x7b
    399e:	7818      	ldrb	r0, [r3, #0]
    39a0:	2800      	cmp	r0, #0
    39a2:	d194      	bne.n	38ce <_svfprintf_r+0xce>
    39a4:	2220      	movs	r2, #32
    39a6:	e00d      	b.n	39c4 <_svfprintf_r+0x1c4>
    39a8:	2001      	movs	r0, #1
    39aa:	e056      	b.n	3a5a <_svfprintf_r+0x25a>
    39ac:	6839      	ldr	r1, [r7, #0]
    39ae:	3704      	adds	r7, #4
    39b0:	9117      	str	r1, [sp, #92]	; 0x5c
    39b2:	2900      	cmp	r1, #0
    39b4:	da8b      	bge.n	38ce <_svfprintf_r+0xce>
    39b6:	424d      	negs	r5, r1
    39b8:	9517      	str	r5, [sp, #92]	; 0x5c
    39ba:	2004      	movs	r0, #4
    39bc:	e04d      	b.n	3a5a <_svfprintf_r+0x25a>
    39be:	466b      	mov	r3, sp
    39c0:	222b      	movs	r2, #43	; 0x2b
    39c2:	337b      	adds	r3, #123	; 0x7b
    39c4:	701a      	strb	r2, [r3, #0]
    39c6:	e782      	b.n	38ce <_svfprintf_r+0xce>
    39c8:	9e12      	ldr	r6, [sp, #72]	; 0x48
    39ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
    39cc:	7833      	ldrb	r3, [r6, #0]
    39ce:	3201      	adds	r2, #1
    39d0:	9308      	str	r3, [sp, #32]
    39d2:	9908      	ldr	r1, [sp, #32]
    39d4:	9212      	str	r2, [sp, #72]	; 0x48
    39d6:	292a      	cmp	r1, #42	; 0x2a
    39d8:	d108      	bne.n	39ec <_svfprintf_r+0x1ec>
    39da:	683e      	ldr	r6, [r7, #0]
    39dc:	1d38      	adds	r0, r7, #4
    39de:	1c07      	adds	r7, r0, #0
    39e0:	2e00      	cmp	r6, #0
    39e2:	db00      	blt.n	39e6 <_svfprintf_r+0x1e6>
    39e4:	e773      	b.n	38ce <_svfprintf_r+0xce>
    39e6:	2601      	movs	r6, #1
    39e8:	4276      	negs	r6, r6
    39ea:	e770      	b.n	38ce <_svfprintf_r+0xce>
    39ec:	2000      	movs	r0, #0
    39ee:	9d08      	ldr	r5, [sp, #32]
    39f0:	3d30      	subs	r5, #48	; 0x30
    39f2:	2d09      	cmp	r5, #9
    39f4:	d809      	bhi.n	3a0a <_svfprintf_r+0x20a>
    39f6:	230a      	movs	r3, #10
    39f8:	4358      	muls	r0, r3
    39fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    39fc:	1940      	adds	r0, r0, r5
    39fe:	9d12      	ldr	r5, [sp, #72]	; 0x48
    3a00:	7811      	ldrb	r1, [r2, #0]
    3a02:	3501      	adds	r5, #1
    3a04:	9108      	str	r1, [sp, #32]
    3a06:	9512      	str	r5, [sp, #72]	; 0x48
    3a08:	e7f1      	b.n	39ee <_svfprintf_r+0x1ee>
    3a0a:	1e06      	subs	r6, r0, #0
    3a0c:	db00      	blt.n	3a10 <_svfprintf_r+0x210>
    3a0e:	e764      	b.n	38da <_svfprintf_r+0xda>
    3a10:	2601      	movs	r6, #1
    3a12:	4276      	negs	r6, r6
    3a14:	e761      	b.n	38da <_svfprintf_r+0xda>
    3a16:	2080      	movs	r0, #128	; 0x80
    3a18:	e01f      	b.n	3a5a <_svfprintf_r+0x25a>
    3a1a:	2300      	movs	r3, #0
    3a1c:	200a      	movs	r0, #10
    3a1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3a20:	4343      	muls	r3, r0
    3a22:	9d08      	ldr	r5, [sp, #32]
    3a24:	7811      	ldrb	r1, [r2, #0]
    3a26:	3d30      	subs	r5, #48	; 0x30
    3a28:	9108      	str	r1, [sp, #32]
    3a2a:	9812      	ldr	r0, [sp, #72]	; 0x48
    3a2c:	195b      	adds	r3, r3, r5
    3a2e:	9d08      	ldr	r5, [sp, #32]
    3a30:	3001      	adds	r0, #1
    3a32:	3d30      	subs	r5, #48	; 0x30
    3a34:	9012      	str	r0, [sp, #72]	; 0x48
    3a36:	2d09      	cmp	r5, #9
    3a38:	d9f0      	bls.n	3a1c <_svfprintf_r+0x21c>
    3a3a:	9317      	str	r3, [sp, #92]	; 0x5c
    3a3c:	e74d      	b.n	38da <_svfprintf_r+0xda>
    3a3e:	2008      	movs	r0, #8
    3a40:	e00b      	b.n	3a5a <_svfprintf_r+0x25a>
    3a42:	2040      	movs	r0, #64	; 0x40
    3a44:	e009      	b.n	3a5a <_svfprintf_r+0x25a>
    3a46:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3a48:	7813      	ldrb	r3, [r2, #0]
    3a4a:	2b6c      	cmp	r3, #108	; 0x6c
    3a4c:	d102      	bne.n	3a54 <_svfprintf_r+0x254>
    3a4e:	3201      	adds	r2, #1
    3a50:	9212      	str	r2, [sp, #72]	; 0x48
    3a52:	e001      	b.n	3a58 <_svfprintf_r+0x258>
    3a54:	2010      	movs	r0, #16
    3a56:	e000      	b.n	3a5a <_svfprintf_r+0x25a>
    3a58:	2020      	movs	r0, #32
    3a5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3a5c:	4302      	orrs	r2, r0
    3a5e:	9209      	str	r2, [sp, #36]	; 0x24
    3a60:	e735      	b.n	38ce <_svfprintf_r+0xce>
    3a62:	683e      	ldr	r6, [r7, #0]
    3a64:	ab2a      	add	r3, sp, #168	; 0xa8
    3a66:	466d      	mov	r5, sp
    3a68:	701e      	strb	r6, [r3, #0]
    3a6a:	357b      	adds	r5, #123	; 0x7b
    3a6c:	2600      	movs	r6, #0
    3a6e:	702e      	strb	r6, [r5, #0]
    3a70:	3704      	adds	r7, #4
    3a72:	e2d2      	b.n	401a <_svfprintf_r+0x81a>
    3a74:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a76:	2110      	movs	r1, #16
    3a78:	4308      	orrs	r0, r1
    3a7a:	9009      	str	r0, [sp, #36]	; 0x24
    3a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a7e:	069d      	lsls	r5, r3, #26
    3a80:	d509      	bpl.n	3a96 <_svfprintf_r+0x296>
    3a82:	1dfb      	adds	r3, r7, #7
    3a84:	2107      	movs	r1, #7
    3a86:	438b      	bics	r3, r1
    3a88:	1c1f      	adds	r7, r3, #0
    3a8a:	3708      	adds	r7, #8
    3a8c:	681a      	ldr	r2, [r3, #0]
    3a8e:	685b      	ldr	r3, [r3, #4]
    3a90:	920a      	str	r2, [sp, #40]	; 0x28
    3a92:	930b      	str	r3, [sp, #44]	; 0x2c
    3a94:	e00c      	b.n	3ab0 <_svfprintf_r+0x2b0>
    3a96:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3a98:	1d39      	adds	r1, r7, #4
    3a9a:	683a      	ldr	r2, [r7, #0]
    3a9c:	06ed      	lsls	r5, r5, #27
    3a9e:	d403      	bmi.n	3aa8 <_svfprintf_r+0x2a8>
    3aa0:	9f09      	ldr	r7, [sp, #36]	; 0x24
    3aa2:	067d      	lsls	r5, r7, #25
    3aa4:	d500      	bpl.n	3aa8 <_svfprintf_r+0x2a8>
    3aa6:	b212      	sxth	r2, r2
    3aa8:	17d0      	asrs	r0, r2, #31
    3aaa:	920a      	str	r2, [sp, #40]	; 0x28
    3aac:	900b      	str	r0, [sp, #44]	; 0x2c
    3aae:	1c0f      	adds	r7, r1, #0
    3ab0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3ab2:	2d00      	cmp	r5, #0
    3ab4:	db00      	blt.n	3ab8 <_svfprintf_r+0x2b8>
    3ab6:	e231      	b.n	3f1c <_svfprintf_r+0x71c>
    3ab8:	980a      	ldr	r0, [sp, #40]	; 0x28
    3aba:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3abc:	2300      	movs	r3, #0
    3abe:	4242      	negs	r2, r0
    3ac0:	418b      	sbcs	r3, r1
    3ac2:	920a      	str	r2, [sp, #40]	; 0x28
    3ac4:	930b      	str	r3, [sp, #44]	; 0x2c
    3ac6:	466b      	mov	r3, sp
    3ac8:	212d      	movs	r1, #45	; 0x2d
    3aca:	337b      	adds	r3, #123	; 0x7b
    3acc:	7019      	strb	r1, [r3, #0]
    3ace:	e225      	b.n	3f1c <_svfprintf_r+0x71c>
    3ad0:	1df8      	adds	r0, r7, #7
    3ad2:	2707      	movs	r7, #7
    3ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3ad6:	9a08      	ldr	r2, [sp, #32]
    3ad8:	43b8      	bics	r0, r7
    3ada:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3adc:	1c07      	adds	r7, r0, #0
    3ade:	930e      	str	r3, [sp, #56]	; 0x38
    3ae0:	9216      	str	r2, [sp, #88]	; 0x58
    3ae2:	3708      	adds	r7, #8
    3ae4:	072d      	lsls	r5, r5, #28
    3ae6:	d504      	bpl.n	3af2 <_svfprintf_r+0x2f2>
    3ae8:	6802      	ldr	r2, [r0, #0]
    3aea:	6843      	ldr	r3, [r0, #4]
    3aec:	9214      	str	r2, [sp, #80]	; 0x50
    3aee:	9315      	str	r3, [sp, #84]	; 0x54
    3af0:	e003      	b.n	3afa <_svfprintf_r+0x2fa>
    3af2:	6801      	ldr	r1, [r0, #0]
    3af4:	6842      	ldr	r2, [r0, #4]
    3af6:	9114      	str	r1, [sp, #80]	; 0x50
    3af8:	9215      	str	r2, [sp, #84]	; 0x54
    3afa:	9d15      	ldr	r5, [sp, #84]	; 0x54
    3afc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3afe:	9814      	ldr	r0, [sp, #80]	; 0x50
    3b00:	1c29      	adds	r1, r5, #0
    3b02:	9318      	str	r3, [sp, #96]	; 0x60
    3b04:	f002 fbd8 	bl	62b8 <__fpclassifyd>
    3b08:	2801      	cmp	r0, #1
    3b0a:	d112      	bne.n	3b32 <_svfprintf_r+0x332>
    3b0c:	9814      	ldr	r0, [sp, #80]	; 0x50
    3b0e:	9915      	ldr	r1, [sp, #84]	; 0x54
    3b10:	4bbe      	ldr	r3, [pc, #760]	; (3e0c <_svfprintf_r+0x60c>)
    3b12:	4abd      	ldr	r2, [pc, #756]	; (3e08 <_svfprintf_r+0x608>)
    3b14:	f003 fb0c 	bl	7130 <__aeabi_dcmplt>
    3b18:	2800      	cmp	r0, #0
    3b1a:	d003      	beq.n	3b24 <_svfprintf_r+0x324>
    3b1c:	466b      	mov	r3, sp
    3b1e:	202d      	movs	r0, #45	; 0x2d
    3b20:	337b      	adds	r3, #123	; 0x7b
    3b22:	7018      	strb	r0, [r3, #0]
    3b24:	9d08      	ldr	r5, [sp, #32]
    3b26:	2d47      	cmp	r5, #71	; 0x47
    3b28:	dc01      	bgt.n	3b2e <_svfprintf_r+0x32e>
    3b2a:	49b9      	ldr	r1, [pc, #740]	; (3e10 <_svfprintf_r+0x610>)
    3b2c:	e00d      	b.n	3b4a <_svfprintf_r+0x34a>
    3b2e:	49b9      	ldr	r1, [pc, #740]	; (3e14 <_svfprintf_r+0x614>)
    3b30:	e00b      	b.n	3b4a <_svfprintf_r+0x34a>
    3b32:	9814      	ldr	r0, [sp, #80]	; 0x50
    3b34:	9915      	ldr	r1, [sp, #84]	; 0x54
    3b36:	f002 fbbf 	bl	62b8 <__fpclassifyd>
    3b3a:	2800      	cmp	r0, #0
    3b3c:	d10c      	bne.n	3b58 <_svfprintf_r+0x358>
    3b3e:	9e08      	ldr	r6, [sp, #32]
    3b40:	2e47      	cmp	r6, #71	; 0x47
    3b42:	dc01      	bgt.n	3b48 <_svfprintf_r+0x348>
    3b44:	49b4      	ldr	r1, [pc, #720]	; (3e18 <_svfprintf_r+0x618>)
    3b46:	e000      	b.n	3b4a <_svfprintf_r+0x34a>
    3b48:	49b4      	ldr	r1, [pc, #720]	; (3e1c <_svfprintf_r+0x61c>)
    3b4a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    3b4c:	2280      	movs	r2, #128	; 0x80
    3b4e:	4396      	bics	r6, r2
    3b50:	910f      	str	r1, [sp, #60]	; 0x3c
    3b52:	9609      	str	r6, [sp, #36]	; 0x24
    3b54:	2503      	movs	r5, #3
    3b56:	e265      	b.n	4024 <_svfprintf_r+0x824>
    3b58:	1c70      	adds	r0, r6, #1
    3b5a:	d008      	beq.n	3b6e <_svfprintf_r+0x36e>
    3b5c:	9808      	ldr	r0, [sp, #32]
    3b5e:	2867      	cmp	r0, #103	; 0x67
    3b60:	d001      	beq.n	3b66 <_svfprintf_r+0x366>
    3b62:	2847      	cmp	r0, #71	; 0x47
    3b64:	d104      	bne.n	3b70 <_svfprintf_r+0x370>
    3b66:	2e00      	cmp	r6, #0
    3b68:	d102      	bne.n	3b70 <_svfprintf_r+0x370>
    3b6a:	2601      	movs	r6, #1
    3b6c:	e000      	b.n	3b70 <_svfprintf_r+0x370>
    3b6e:	2606      	movs	r6, #6
    3b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3b72:	2180      	movs	r1, #128	; 0x80
    3b74:	004b      	lsls	r3, r1, #1
    3b76:	431a      	orrs	r2, r3
    3b78:	2000      	movs	r0, #0
    3b7a:	9209      	str	r2, [sp, #36]	; 0x24
    3b7c:	901b      	str	r0, [sp, #108]	; 0x6c
    3b7e:	4285      	cmp	r5, r0
    3b80:	da04      	bge.n	3b8c <_svfprintf_r+0x38c>
    3b82:	2380      	movs	r3, #128	; 0x80
    3b84:	061a      	lsls	r2, r3, #24
    3b86:	212d      	movs	r1, #45	; 0x2d
    3b88:	18ad      	adds	r5, r5, r2
    3b8a:	911b      	str	r1, [sp, #108]	; 0x6c
    3b8c:	9808      	ldr	r0, [sp, #32]
    3b8e:	2866      	cmp	r0, #102	; 0x66
    3b90:	d008      	beq.n	3ba4 <_svfprintf_r+0x3a4>
    3b92:	2846      	cmp	r0, #70	; 0x46
    3b94:	d006      	beq.n	3ba4 <_svfprintf_r+0x3a4>
    3b96:	2865      	cmp	r0, #101	; 0x65
    3b98:	d001      	beq.n	3b9e <_svfprintf_r+0x39e>
    3b9a:	2845      	cmp	r0, #69	; 0x45
    3b9c:	d105      	bne.n	3baa <_svfprintf_r+0x3aa>
    3b9e:	1c73      	adds	r3, r6, #1
    3ba0:	9310      	str	r3, [sp, #64]	; 0x40
    3ba2:	e003      	b.n	3bac <_svfprintf_r+0x3ac>
    3ba4:	9610      	str	r6, [sp, #64]	; 0x40
    3ba6:	2203      	movs	r2, #3
    3ba8:	e001      	b.n	3bae <_svfprintf_r+0x3ae>
    3baa:	9610      	str	r6, [sp, #64]	; 0x40
    3bac:	2202      	movs	r2, #2
    3bae:	9910      	ldr	r1, [sp, #64]	; 0x40
    3bb0:	9200      	str	r2, [sp, #0]
    3bb2:	a820      	add	r0, sp, #128	; 0x80
    3bb4:	ab21      	add	r3, sp, #132	; 0x84
    3bb6:	aa22      	add	r2, sp, #136	; 0x88
    3bb8:	9101      	str	r1, [sp, #4]
    3bba:	9002      	str	r0, [sp, #8]
    3bbc:	9303      	str	r3, [sp, #12]
    3bbe:	9204      	str	r2, [sp, #16]
    3bc0:	980d      	ldr	r0, [sp, #52]	; 0x34
    3bc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3bc4:	1c2b      	adds	r3, r5, #0
    3bc6:	f000 fe7a 	bl	48be <_dtoa_r>
    3bca:	9908      	ldr	r1, [sp, #32]
    3bcc:	900f      	str	r0, [sp, #60]	; 0x3c
    3bce:	2967      	cmp	r1, #103	; 0x67
    3bd0:	d001      	beq.n	3bd6 <_svfprintf_r+0x3d6>
    3bd2:	2947      	cmp	r1, #71	; 0x47
    3bd4:	d10b      	bne.n	3bee <_svfprintf_r+0x3ee>
    3bd6:	980e      	ldr	r0, [sp, #56]	; 0x38
    3bd8:	07c3      	lsls	r3, r0, #31
    3bda:	d408      	bmi.n	3bee <_svfprintf_r+0x3ee>
    3bdc:	9922      	ldr	r1, [sp, #136]	; 0x88
    3bde:	980f      	ldr	r0, [sp, #60]	; 0x3c
    3be0:	9a08      	ldr	r2, [sp, #32]
    3be2:	1a0d      	subs	r5, r1, r0
    3be4:	9510      	str	r5, [sp, #64]	; 0x40
    3be6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3be8:	2a67      	cmp	r2, #103	; 0x67
    3bea:	d130      	bne.n	3c4e <_svfprintf_r+0x44e>
    3bec:	e032      	b.n	3c54 <_svfprintf_r+0x454>
    3bee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3bf0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3bf2:	9808      	ldr	r0, [sp, #32]
    3bf4:	1899      	adds	r1, r3, r2
    3bf6:	9111      	str	r1, [sp, #68]	; 0x44
    3bf8:	2866      	cmp	r0, #102	; 0x66
    3bfa:	d001      	beq.n	3c00 <_svfprintf_r+0x400>
    3bfc:	2846      	cmp	r0, #70	; 0x46
    3bfe:	d113      	bne.n	3c28 <_svfprintf_r+0x428>
    3c00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3c02:	781a      	ldrb	r2, [r3, #0]
    3c04:	2a30      	cmp	r2, #48	; 0x30
    3c06:	d10b      	bne.n	3c20 <_svfprintf_r+0x420>
    3c08:	9818      	ldr	r0, [sp, #96]	; 0x60
    3c0a:	1c29      	adds	r1, r5, #0
    3c0c:	4b7f      	ldr	r3, [pc, #508]	; (3e0c <_svfprintf_r+0x60c>)
    3c0e:	4a7e      	ldr	r2, [pc, #504]	; (3e08 <_svfprintf_r+0x608>)
    3c10:	f003 fa88 	bl	7124 <__aeabi_dcmpeq>
    3c14:	2800      	cmp	r0, #0
    3c16:	d103      	bne.n	3c20 <_svfprintf_r+0x420>
    3c18:	9910      	ldr	r1, [sp, #64]	; 0x40
    3c1a:	2001      	movs	r0, #1
    3c1c:	1a43      	subs	r3, r0, r1
    3c1e:	9320      	str	r3, [sp, #128]	; 0x80
    3c20:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3c22:	9820      	ldr	r0, [sp, #128]	; 0x80
    3c24:	1811      	adds	r1, r2, r0
    3c26:	9111      	str	r1, [sp, #68]	; 0x44
    3c28:	9818      	ldr	r0, [sp, #96]	; 0x60
    3c2a:	1c29      	adds	r1, r5, #0
    3c2c:	4b77      	ldr	r3, [pc, #476]	; (3e0c <_svfprintf_r+0x60c>)
    3c2e:	4a76      	ldr	r2, [pc, #472]	; (3e08 <_svfprintf_r+0x608>)
    3c30:	f003 fa78 	bl	7124 <__aeabi_dcmpeq>
    3c34:	2800      	cmp	r0, #0
    3c36:	d001      	beq.n	3c3c <_svfprintf_r+0x43c>
    3c38:	9d11      	ldr	r5, [sp, #68]	; 0x44
    3c3a:	9522      	str	r5, [sp, #136]	; 0x88
    3c3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3c3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3c40:	4293      	cmp	r3, r2
    3c42:	d2cb      	bcs.n	3bdc <_svfprintf_r+0x3dc>
    3c44:	2230      	movs	r2, #48	; 0x30
    3c46:	701a      	strb	r2, [r3, #0]
    3c48:	3301      	adds	r3, #1
    3c4a:	9322      	str	r3, [sp, #136]	; 0x88
    3c4c:	e7f6      	b.n	3c3c <_svfprintf_r+0x43c>
    3c4e:	9908      	ldr	r1, [sp, #32]
    3c50:	2947      	cmp	r1, #71	; 0x47
    3c52:	d108      	bne.n	3c66 <_svfprintf_r+0x466>
    3c54:	1c1d      	adds	r5, r3, #0
    3c56:	1cd8      	adds	r0, r3, #3
    3c58:	db01      	blt.n	3c5e <_svfprintf_r+0x45e>
    3c5a:	42b3      	cmp	r3, r6
    3c5c:	dd5e      	ble.n	3d1c <_svfprintf_r+0x51c>
    3c5e:	9d08      	ldr	r5, [sp, #32]
    3c60:	3d02      	subs	r5, #2
    3c62:	9508      	str	r5, [sp, #32]
    3c64:	e002      	b.n	3c6c <_svfprintf_r+0x46c>
    3c66:	9808      	ldr	r0, [sp, #32]
    3c68:	2866      	cmp	r0, #102	; 0x66
    3c6a:	d045      	beq.n	3cf8 <_svfprintf_r+0x4f8>
    3c6c:	ae08      	add	r6, sp, #32
    3c6e:	7830      	ldrb	r0, [r6, #0]
    3c70:	a923      	add	r1, sp, #140	; 0x8c
    3c72:	1e5d      	subs	r5, r3, #1
    3c74:	7008      	strb	r0, [r1, #0]
    3c76:	9520      	str	r5, [sp, #128]	; 0x80
    3c78:	3101      	adds	r1, #1
    3c7a:	222b      	movs	r2, #43	; 0x2b
    3c7c:	2d00      	cmp	r5, #0
    3c7e:	da01      	bge.n	3c84 <_svfprintf_r+0x484>
    3c80:	426d      	negs	r5, r5
    3c82:	222d      	movs	r2, #45	; 0x2d
    3c84:	700a      	strb	r2, [r1, #0]
    3c86:	2d09      	cmp	r5, #9
    3c88:	dd1f      	ble.n	3cca <_svfprintf_r+0x4ca>
    3c8a:	466e      	mov	r6, sp
    3c8c:	369a      	adds	r6, #154	; 0x9a
    3c8e:	1c28      	adds	r0, r5, #0
    3c90:	210a      	movs	r1, #10
    3c92:	9611      	str	r6, [sp, #68]	; 0x44
    3c94:	f003 fa2c 	bl	70f0 <__aeabi_idivmod>
    3c98:	3130      	adds	r1, #48	; 0x30
    3c9a:	7031      	strb	r1, [r6, #0]
    3c9c:	1c28      	adds	r0, r5, #0
    3c9e:	210a      	movs	r1, #10
    3ca0:	f003 f9d0 	bl	7044 <__aeabi_idiv>
    3ca4:	3e01      	subs	r6, #1
    3ca6:	1e05      	subs	r5, r0, #0
    3ca8:	2d09      	cmp	r5, #9
    3caa:	dcf0      	bgt.n	3c8e <_svfprintf_r+0x48e>
    3cac:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3cae:	3530      	adds	r5, #48	; 0x30
    3cb0:	3b01      	subs	r3, #1
    3cb2:	466e      	mov	r6, sp
    3cb4:	701d      	strb	r5, [r3, #0]
    3cb6:	368e      	adds	r6, #142	; 0x8e
    3cb8:	4668      	mov	r0, sp
    3cba:	309b      	adds	r0, #155	; 0x9b
    3cbc:	4283      	cmp	r3, r0
    3cbe:	d20b      	bcs.n	3cd8 <_svfprintf_r+0x4d8>
    3cc0:	781d      	ldrb	r5, [r3, #0]
    3cc2:	3301      	adds	r3, #1
    3cc4:	7035      	strb	r5, [r6, #0]
    3cc6:	3601      	adds	r6, #1
    3cc8:	e7f6      	b.n	3cb8 <_svfprintf_r+0x4b8>
    3cca:	2130      	movs	r1, #48	; 0x30
    3ccc:	466b      	mov	r3, sp
    3cce:	338e      	adds	r3, #142	; 0x8e
    3cd0:	186d      	adds	r5, r5, r1
    3cd2:	7019      	strb	r1, [r3, #0]
    3cd4:	705d      	strb	r5, [r3, #1]
    3cd6:	ae24      	add	r6, sp, #144	; 0x90
    3cd8:	aa23      	add	r2, sp, #140	; 0x8c
    3cda:	9910      	ldr	r1, [sp, #64]	; 0x40
    3cdc:	1ab3      	subs	r3, r6, r2
    3cde:	931c      	str	r3, [sp, #112]	; 0x70
    3ce0:	185d      	adds	r5, r3, r1
    3ce2:	2901      	cmp	r1, #1
    3ce4:	dc04      	bgt.n	3cf0 <_svfprintf_r+0x4f0>
    3ce6:	980e      	ldr	r0, [sp, #56]	; 0x38
    3ce8:	2600      	movs	r6, #0
    3cea:	9611      	str	r6, [sp, #68]	; 0x44
    3cec:	07c3      	lsls	r3, r0, #31
    3cee:	d52b      	bpl.n	3d48 <_svfprintf_r+0x548>
    3cf0:	2200      	movs	r2, #0
    3cf2:	3501      	adds	r5, #1
    3cf4:	9211      	str	r2, [sp, #68]	; 0x44
    3cf6:	e027      	b.n	3d48 <_svfprintf_r+0x548>
    3cf8:	1e1d      	subs	r5, r3, #0
    3cfa:	dd07      	ble.n	3d0c <_svfprintf_r+0x50c>
    3cfc:	2e00      	cmp	r6, #0
    3cfe:	d102      	bne.n	3d06 <_svfprintf_r+0x506>
    3d00:	990e      	ldr	r1, [sp, #56]	; 0x38
    3d02:	07c9      	lsls	r1, r1, #31
    3d04:	d51d      	bpl.n	3d42 <_svfprintf_r+0x542>
    3d06:	3601      	adds	r6, #1
    3d08:	199d      	adds	r5, r3, r6
    3d0a:	e01a      	b.n	3d42 <_svfprintf_r+0x542>
    3d0c:	2e00      	cmp	r6, #0
    3d0e:	d103      	bne.n	3d18 <_svfprintf_r+0x518>
    3d10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3d12:	2501      	movs	r5, #1
    3d14:	422a      	tst	r2, r5
    3d16:	d014      	beq.n	3d42 <_svfprintf_r+0x542>
    3d18:	1cb5      	adds	r5, r6, #2
    3d1a:	e012      	b.n	3d42 <_svfprintf_r+0x542>
    3d1c:	9810      	ldr	r0, [sp, #64]	; 0x40
    3d1e:	4283      	cmp	r3, r0
    3d20:	db06      	blt.n	3d30 <_svfprintf_r+0x530>
    3d22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3d24:	2067      	movs	r0, #103	; 0x67
    3d26:	9016      	str	r0, [sp, #88]	; 0x58
    3d28:	07d2      	lsls	r2, r2, #31
    3d2a:	d50a      	bpl.n	3d42 <_svfprintf_r+0x542>
    3d2c:	1c5d      	adds	r5, r3, #1
    3d2e:	e008      	b.n	3d42 <_svfprintf_r+0x542>
    3d30:	2201      	movs	r2, #1
    3d32:	2b00      	cmp	r3, #0
    3d34:	dc01      	bgt.n	3d3a <_svfprintf_r+0x53a>
    3d36:	2502      	movs	r5, #2
    3d38:	1aea      	subs	r2, r5, r3
    3d3a:	9910      	ldr	r1, [sp, #64]	; 0x40
    3d3c:	2667      	movs	r6, #103	; 0x67
    3d3e:	188d      	adds	r5, r1, r2
    3d40:	9616      	str	r6, [sp, #88]	; 0x58
    3d42:	9311      	str	r3, [sp, #68]	; 0x44
    3d44:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3d46:	9308      	str	r3, [sp, #32]
    3d48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    3d4a:	2600      	movs	r6, #0
    3d4c:	42b3      	cmp	r3, r6
    3d4e:	d100      	bne.n	3d52 <_svfprintf_r+0x552>
    3d50:	e16a      	b.n	4028 <_svfprintf_r+0x828>
    3d52:	4668      	mov	r0, sp
    3d54:	212d      	movs	r1, #45	; 0x2d
    3d56:	307b      	adds	r0, #123	; 0x7b
    3d58:	7001      	strb	r1, [r0, #0]
    3d5a:	e165      	b.n	4028 <_svfprintf_r+0x828>
    3d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3d5e:	1d3e      	adds	r6, r7, #4
    3d60:	069d      	lsls	r5, r3, #26
    3d62:	d505      	bpl.n	3d70 <_svfprintf_r+0x570>
    3d64:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    3d66:	683f      	ldr	r7, [r7, #0]
    3d68:	17e9      	asrs	r1, r5, #31
    3d6a:	603d      	str	r5, [r7, #0]
    3d6c:	6079      	str	r1, [r7, #4]
    3d6e:	e00d      	b.n	3d8c <_svfprintf_r+0x58c>
    3d70:	9809      	ldr	r0, [sp, #36]	; 0x24
    3d72:	06c5      	lsls	r5, r0, #27
    3d74:	d407      	bmi.n	3d86 <_svfprintf_r+0x586>
    3d76:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3d78:	066d      	lsls	r5, r5, #25
    3d7a:	d504      	bpl.n	3d86 <_svfprintf_r+0x586>
    3d7c:	a913      	add	r1, sp, #76	; 0x4c
    3d7e:	683f      	ldr	r7, [r7, #0]
    3d80:	880a      	ldrh	r2, [r1, #0]
    3d82:	803a      	strh	r2, [r7, #0]
    3d84:	e002      	b.n	3d8c <_svfprintf_r+0x58c>
    3d86:	683b      	ldr	r3, [r7, #0]
    3d88:	9813      	ldr	r0, [sp, #76]	; 0x4c
    3d8a:	6018      	str	r0, [r3, #0]
    3d8c:	1c37      	adds	r7, r6, #0
    3d8e:	e569      	b.n	3864 <_svfprintf_r+0x64>
    3d90:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3d92:	2110      	movs	r1, #16
    3d94:	430d      	orrs	r5, r1
    3d96:	9509      	str	r5, [sp, #36]	; 0x24
    3d98:	9809      	ldr	r0, [sp, #36]	; 0x24
    3d9a:	2320      	movs	r3, #32
    3d9c:	4003      	ands	r3, r0
    3d9e:	d00a      	beq.n	3db6 <_svfprintf_r+0x5b6>
    3da0:	1dfb      	adds	r3, r7, #7
    3da2:	2207      	movs	r2, #7
    3da4:	4393      	bics	r3, r2
    3da6:	6818      	ldr	r0, [r3, #0]
    3da8:	6859      	ldr	r1, [r3, #4]
    3daa:	900a      	str	r0, [sp, #40]	; 0x28
    3dac:	910b      	str	r1, [sp, #44]	; 0x2c
    3dae:	1c1f      	adds	r7, r3, #0
    3db0:	3708      	adds	r7, #8
    3db2:	2300      	movs	r3, #0
    3db4:	e0ad      	b.n	3f12 <_svfprintf_r+0x712>
    3db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3db8:	2110      	movs	r1, #16
    3dba:	4011      	ands	r1, r2
    3dbc:	1d38      	adds	r0, r7, #4
    3dbe:	2900      	cmp	r1, #0
    3dc0:	d108      	bne.n	3dd4 <_svfprintf_r+0x5d4>
    3dc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3dc4:	2340      	movs	r3, #64	; 0x40
    3dc6:	402b      	ands	r3, r5
    3dc8:	d004      	beq.n	3dd4 <_svfprintf_r+0x5d4>
    3dca:	883f      	ldrh	r7, [r7, #0]
    3dcc:	910b      	str	r1, [sp, #44]	; 0x2c
    3dce:	970a      	str	r7, [sp, #40]	; 0x28
    3dd0:	1c07      	adds	r7, r0, #0
    3dd2:	e7ee      	b.n	3db2 <_svfprintf_r+0x5b2>
    3dd4:	6839      	ldr	r1, [r7, #0]
    3dd6:	930b      	str	r3, [sp, #44]	; 0x2c
    3dd8:	910a      	str	r1, [sp, #40]	; 0x28
    3dda:	1c07      	adds	r7, r0, #0
    3ddc:	e099      	b.n	3f12 <_svfprintf_r+0x712>
    3dde:	683b      	ldr	r3, [r7, #0]
    3de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3de2:	930a      	str	r3, [sp, #40]	; 0x28
    3de4:	2302      	movs	r3, #2
    3de6:	431a      	orrs	r2, r3
    3de8:	2100      	movs	r1, #0
    3dea:	9209      	str	r2, [sp, #36]	; 0x24
    3dec:	4a0c      	ldr	r2, [pc, #48]	; (3e20 <_svfprintf_r+0x620>)
    3dee:	a81f      	add	r0, sp, #124	; 0x7c
    3df0:	910b      	str	r1, [sp, #44]	; 0x2c
    3df2:	2530      	movs	r5, #48	; 0x30
    3df4:	2178      	movs	r1, #120	; 0x78
    3df6:	7005      	strb	r5, [r0, #0]
    3df8:	7041      	strb	r1, [r0, #1]
    3dfa:	3704      	adds	r7, #4
    3dfc:	921d      	str	r2, [sp, #116]	; 0x74
    3dfe:	9108      	str	r1, [sp, #32]
    3e00:	e087      	b.n	3f12 <_svfprintf_r+0x712>
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	46c0      	nop			; (mov r8, r8)
    3e06:	46c0      	nop			; (mov r8, r8)
	...
    3e10:	00009b3a 	.word	0x00009b3a
    3e14:	00009b3e 	.word	0x00009b3e
    3e18:	00009b42 	.word	0x00009b42
    3e1c:	00009b46 	.word	0x00009b46
    3e20:	00009b5b 	.word	0x00009b5b
    3e24:	4669      	mov	r1, sp
    3e26:	317b      	adds	r1, #123	; 0x7b
    3e28:	2200      	movs	r2, #0
    3e2a:	1c3b      	adds	r3, r7, #0
    3e2c:	700a      	strb	r2, [r1, #0]
    3e2e:	6818      	ldr	r0, [r3, #0]
    3e30:	3704      	adds	r7, #4
    3e32:	900f      	str	r0, [sp, #60]	; 0x3c
    3e34:	2e00      	cmp	r6, #0
    3e36:	db0c      	blt.n	3e52 <_svfprintf_r+0x652>
    3e38:	2100      	movs	r1, #0
    3e3a:	1c32      	adds	r2, r6, #0
    3e3c:	f001 fe40 	bl	5ac0 <memchr>
    3e40:	2800      	cmp	r0, #0
    3e42:	d100      	bne.n	3e46 <_svfprintf_r+0x646>
    3e44:	e0ed      	b.n	4022 <_svfprintf_r+0x822>
    3e46:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    3e48:	1b45      	subs	r5, r0, r5
    3e4a:	42b5      	cmp	r5, r6
    3e4c:	dd00      	ble.n	3e50 <_svfprintf_r+0x650>
    3e4e:	e0e8      	b.n	4022 <_svfprintf_r+0x822>
    3e50:	e0e8      	b.n	4024 <_svfprintf_r+0x824>
    3e52:	980f      	ldr	r0, [sp, #60]	; 0x3c
    3e54:	f002 fa80 	bl	6358 <strlen>
    3e58:	1c05      	adds	r5, r0, #0
    3e5a:	e0e3      	b.n	4024 <_svfprintf_r+0x824>
    3e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
    3e5e:	2310      	movs	r3, #16
    3e60:	4318      	orrs	r0, r3
    3e62:	9009      	str	r0, [sp, #36]	; 0x24
    3e64:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3e66:	2220      	movs	r2, #32
    3e68:	402a      	ands	r2, r5
    3e6a:	d009      	beq.n	3e80 <_svfprintf_r+0x680>
    3e6c:	1dfb      	adds	r3, r7, #7
    3e6e:	2007      	movs	r0, #7
    3e70:	4383      	bics	r3, r0
    3e72:	1c1f      	adds	r7, r3, #0
    3e74:	3708      	adds	r7, #8
    3e76:	681a      	ldr	r2, [r3, #0]
    3e78:	685b      	ldr	r3, [r3, #4]
    3e7a:	920a      	str	r2, [sp, #40]	; 0x28
    3e7c:	930b      	str	r3, [sp, #44]	; 0x2c
    3e7e:	e011      	b.n	3ea4 <_svfprintf_r+0x6a4>
    3e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3e82:	2110      	movs	r1, #16
    3e84:	4019      	ands	r1, r3
    3e86:	1d38      	adds	r0, r7, #4
    3e88:	2900      	cmp	r1, #0
    3e8a:	d107      	bne.n	3e9c <_svfprintf_r+0x69c>
    3e8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3e8e:	2240      	movs	r2, #64	; 0x40
    3e90:	402a      	ands	r2, r5
    3e92:	d003      	beq.n	3e9c <_svfprintf_r+0x69c>
    3e94:	883f      	ldrh	r7, [r7, #0]
    3e96:	910b      	str	r1, [sp, #44]	; 0x2c
    3e98:	970a      	str	r7, [sp, #40]	; 0x28
    3e9a:	e002      	b.n	3ea2 <_svfprintf_r+0x6a2>
    3e9c:	6839      	ldr	r1, [r7, #0]
    3e9e:	920b      	str	r2, [sp, #44]	; 0x2c
    3ea0:	910a      	str	r1, [sp, #40]	; 0x28
    3ea2:	1c07      	adds	r7, r0, #0
    3ea4:	2301      	movs	r3, #1
    3ea6:	e034      	b.n	3f12 <_svfprintf_r+0x712>
    3ea8:	49bb      	ldr	r1, [pc, #748]	; (4198 <_svfprintf_r+0x998>)
    3eaa:	e000      	b.n	3eae <_svfprintf_r+0x6ae>
    3eac:	49bb      	ldr	r1, [pc, #748]	; (419c <_svfprintf_r+0x99c>)
    3eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3eb0:	2220      	movs	r2, #32
    3eb2:	911d      	str	r1, [sp, #116]	; 0x74
    3eb4:	401a      	ands	r2, r3
    3eb6:	d009      	beq.n	3ecc <_svfprintf_r+0x6cc>
    3eb8:	1dfd      	adds	r5, r7, #7
    3eba:	2107      	movs	r1, #7
    3ebc:	438d      	bics	r5, r1
    3ebe:	1c2f      	adds	r7, r5, #0
    3ec0:	682a      	ldr	r2, [r5, #0]
    3ec2:	686b      	ldr	r3, [r5, #4]
    3ec4:	3708      	adds	r7, #8
    3ec6:	920a      	str	r2, [sp, #40]	; 0x28
    3ec8:	930b      	str	r3, [sp, #44]	; 0x2c
    3eca:	e011      	b.n	3ef0 <_svfprintf_r+0x6f0>
    3ecc:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3ece:	2010      	movs	r0, #16
    3ed0:	4028      	ands	r0, r5
    3ed2:	1d39      	adds	r1, r7, #4
    3ed4:	2800      	cmp	r0, #0
    3ed6:	d107      	bne.n	3ee8 <_svfprintf_r+0x6e8>
    3ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3eda:	2240      	movs	r2, #64	; 0x40
    3edc:	401a      	ands	r2, r3
    3ede:	d003      	beq.n	3ee8 <_svfprintf_r+0x6e8>
    3ee0:	883f      	ldrh	r7, [r7, #0]
    3ee2:	900b      	str	r0, [sp, #44]	; 0x2c
    3ee4:	970a      	str	r7, [sp, #40]	; 0x28
    3ee6:	e002      	b.n	3eee <_svfprintf_r+0x6ee>
    3ee8:	6838      	ldr	r0, [r7, #0]
    3eea:	920b      	str	r2, [sp, #44]	; 0x2c
    3eec:	900a      	str	r0, [sp, #40]	; 0x28
    3eee:	1c0f      	adds	r7, r1, #0
    3ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
    3ef2:	2302      	movs	r3, #2
    3ef4:	07c5      	lsls	r5, r0, #31
    3ef6:	d50c      	bpl.n	3f12 <_svfprintf_r+0x712>
    3ef8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    3efa:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3efc:	430d      	orrs	r5, r1
    3efe:	d008      	beq.n	3f12 <_svfprintf_r+0x712>
    3f00:	ad08      	add	r5, sp, #32
    3f02:	7829      	ldrb	r1, [r5, #0]
    3f04:	aa1f      	add	r2, sp, #124	; 0x7c
    3f06:	2030      	movs	r0, #48	; 0x30
    3f08:	7010      	strb	r0, [r2, #0]
    3f0a:	7051      	strb	r1, [r2, #1]
    3f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3f0e:	431a      	orrs	r2, r3
    3f10:	9209      	str	r2, [sp, #36]	; 0x24
    3f12:	4669      	mov	r1, sp
    3f14:	2500      	movs	r5, #0
    3f16:	317b      	adds	r1, #123	; 0x7b
    3f18:	700d      	strb	r5, [r1, #0]
    3f1a:	e000      	b.n	3f1e <_svfprintf_r+0x71e>
    3f1c:	2301      	movs	r3, #1
    3f1e:	2e00      	cmp	r6, #0
    3f20:	db03      	blt.n	3f2a <_svfprintf_r+0x72a>
    3f22:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3f24:	2080      	movs	r0, #128	; 0x80
    3f26:	4385      	bics	r5, r0
    3f28:	9509      	str	r5, [sp, #36]	; 0x24
    3f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3f2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3f2e:	430a      	orrs	r2, r1
    3f30:	d101      	bne.n	3f36 <_svfprintf_r+0x736>
    3f32:	2e00      	cmp	r6, #0
    3f34:	d055      	beq.n	3fe2 <_svfprintf_r+0x7e2>
    3f36:	466d      	mov	r5, sp
    3f38:	35cf      	adds	r5, #207	; 0xcf
    3f3a:	2b01      	cmp	r3, #1
    3f3c:	d01e      	beq.n	3f7c <_svfprintf_r+0x77c>
    3f3e:	2b02      	cmp	r3, #2
    3f40:	d039      	beq.n	3fb6 <_svfprintf_r+0x7b6>
    3f42:	990a      	ldr	r1, [sp, #40]	; 0x28
    3f44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3f46:	2307      	movs	r3, #7
    3f48:	400b      	ands	r3, r1
    3f4a:	0750      	lsls	r0, r2, #29
    3f4c:	08c9      	lsrs	r1, r1, #3
    3f4e:	08d2      	lsrs	r2, r2, #3
    3f50:	4308      	orrs	r0, r1
    3f52:	950f      	str	r5, [sp, #60]	; 0x3c
    3f54:	3330      	adds	r3, #48	; 0x30
    3f56:	920b      	str	r2, [sp, #44]	; 0x2c
    3f58:	1c01      	adds	r1, r0, #0
    3f5a:	702b      	strb	r3, [r5, #0]
    3f5c:	900a      	str	r0, [sp, #40]	; 0x28
    3f5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    3f60:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3f62:	3d01      	subs	r5, #1
    3f64:	4301      	orrs	r1, r0
    3f66:	d1ec      	bne.n	3f42 <_svfprintf_r+0x742>
    3f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3f6a:	07d1      	lsls	r1, r2, #31
    3f6c:	d545      	bpl.n	3ffa <_svfprintf_r+0x7fa>
    3f6e:	2b30      	cmp	r3, #48	; 0x30
    3f70:	d043      	beq.n	3ffa <_svfprintf_r+0x7fa>
    3f72:	1c2b      	adds	r3, r5, #0
    3f74:	950f      	str	r5, [sp, #60]	; 0x3c
    3f76:	2530      	movs	r5, #48	; 0x30
    3f78:	701d      	strb	r5, [r3, #0]
    3f7a:	e03e      	b.n	3ffa <_svfprintf_r+0x7fa>
    3f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d104      	bne.n	3f8c <_svfprintf_r+0x78c>
    3f82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3f84:	2a09      	cmp	r2, #9
    3f86:	d801      	bhi.n	3f8c <_svfprintf_r+0x78c>
    3f88:	3230      	adds	r2, #48	; 0x30
    3f8a:	e034      	b.n	3ff6 <_svfprintf_r+0x7f6>
    3f8c:	980a      	ldr	r0, [sp, #40]	; 0x28
    3f8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3f90:	220a      	movs	r2, #10
    3f92:	2300      	movs	r3, #0
    3f94:	950f      	str	r5, [sp, #60]	; 0x3c
    3f96:	f7fe ff0d 	bl	2db4 <__aeabi_uldivmod>
    3f9a:	980a      	ldr	r0, [sp, #40]	; 0x28
    3f9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3f9e:	3230      	adds	r2, #48	; 0x30
    3fa0:	702a      	strb	r2, [r5, #0]
    3fa2:	220a      	movs	r2, #10
    3fa4:	2300      	movs	r3, #0
    3fa6:	f7fe ff05 	bl	2db4 <__aeabi_uldivmod>
    3faa:	3d01      	subs	r5, #1
    3fac:	900a      	str	r0, [sp, #40]	; 0x28
    3fae:	910b      	str	r1, [sp, #44]	; 0x2c
    3fb0:	4308      	orrs	r0, r1
    3fb2:	d1eb      	bne.n	3f8c <_svfprintf_r+0x78c>
    3fb4:	e021      	b.n	3ffa <_svfprintf_r+0x7fa>
    3fb6:	980a      	ldr	r0, [sp, #40]	; 0x28
    3fb8:	991d      	ldr	r1, [sp, #116]	; 0x74
    3fba:	220f      	movs	r2, #15
    3fbc:	4002      	ands	r2, r0
    3fbe:	5c8b      	ldrb	r3, [r1, r2]
    3fc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3fc2:	702b      	strb	r3, [r5, #0]
    3fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3fc6:	0711      	lsls	r1, r2, #28
    3fc8:	0902      	lsrs	r2, r0, #4
    3fca:	0918      	lsrs	r0, r3, #4
    3fcc:	4311      	orrs	r1, r2
    3fce:	900b      	str	r0, [sp, #44]	; 0x2c
    3fd0:	1c0a      	adds	r2, r1, #0
    3fd2:	910a      	str	r1, [sp, #40]	; 0x28
    3fd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3fd6:	950f      	str	r5, [sp, #60]	; 0x3c
    3fd8:	430a      	orrs	r2, r1
    3fda:	3d01      	subs	r5, #1
    3fdc:	2a00      	cmp	r2, #0
    3fde:	d1ea      	bne.n	3fb6 <_svfprintf_r+0x7b6>
    3fe0:	e00b      	b.n	3ffa <_svfprintf_r+0x7fa>
    3fe2:	a834      	add	r0, sp, #208	; 0xd0
    3fe4:	900f      	str	r0, [sp, #60]	; 0x3c
    3fe6:	2b00      	cmp	r3, #0
    3fe8:	d107      	bne.n	3ffa <_svfprintf_r+0x7fa>
    3fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3fec:	07dd      	lsls	r5, r3, #31
    3fee:	d504      	bpl.n	3ffa <_svfprintf_r+0x7fa>
    3ff0:	466d      	mov	r5, sp
    3ff2:	35cf      	adds	r5, #207	; 0xcf
    3ff4:	2230      	movs	r2, #48	; 0x30
    3ff6:	702a      	strb	r2, [r5, #0]
    3ff8:	950f      	str	r5, [sp, #60]	; 0x3c
    3ffa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    3ffc:	ad34      	add	r5, sp, #208	; 0xd0
    3ffe:	2100      	movs	r1, #0
    4000:	1aad      	subs	r5, r5, r2
    4002:	9111      	str	r1, [sp, #68]	; 0x44
    4004:	e010      	b.n	4028 <_svfprintf_r+0x828>
    4006:	9e08      	ldr	r6, [sp, #32]
    4008:	2e00      	cmp	r6, #0
    400a:	d100      	bne.n	400e <_svfprintf_r+0x80e>
    400c:	e396      	b.n	473c <_svfprintf_r+0xf3c>
    400e:	ab2a      	add	r3, sp, #168	; 0xa8
    4010:	4669      	mov	r1, sp
    4012:	701e      	strb	r6, [r3, #0]
    4014:	317b      	adds	r1, #123	; 0x7b
    4016:	2600      	movs	r6, #0
    4018:	700e      	strb	r6, [r1, #0]
    401a:	2501      	movs	r5, #1
    401c:	9611      	str	r6, [sp, #68]	; 0x44
    401e:	930f      	str	r3, [sp, #60]	; 0x3c
    4020:	e002      	b.n	4028 <_svfprintf_r+0x828>
    4022:	1c35      	adds	r5, r6, #0
    4024:	2600      	movs	r6, #0
    4026:	9611      	str	r6, [sp, #68]	; 0x44
    4028:	1e28      	subs	r0, r5, #0
    402a:	42b0      	cmp	r0, r6
    402c:	da00      	bge.n	4030 <_svfprintf_r+0x830>
    402e:	1c30      	adds	r0, r6, #0
    4030:	466a      	mov	r2, sp
    4032:	327b      	adds	r2, #123	; 0x7b
    4034:	7813      	ldrb	r3, [r2, #0]
    4036:	2202      	movs	r2, #2
    4038:	1e59      	subs	r1, r3, #1
    403a:	418b      	sbcs	r3, r1
    403c:	9909      	ldr	r1, [sp, #36]	; 0x24
    403e:	18c0      	adds	r0, r0, r3
    4040:	4011      	ands	r1, r2
    4042:	9018      	str	r0, [sp, #96]	; 0x60
    4044:	9116      	str	r1, [sp, #88]	; 0x58
    4046:	d001      	beq.n	404c <_svfprintf_r+0x84c>
    4048:	1883      	adds	r3, r0, r2
    404a:	9318      	str	r3, [sp, #96]	; 0x60
    404c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    404e:	2084      	movs	r0, #132	; 0x84
    4050:	4002      	ands	r2, r0
    4052:	921b      	str	r2, [sp, #108]	; 0x6c
    4054:	d137      	bne.n	40c6 <_svfprintf_r+0x8c6>
    4056:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4058:	9b18      	ldr	r3, [sp, #96]	; 0x60
    405a:	1ac8      	subs	r0, r1, r3
    405c:	900e      	str	r0, [sp, #56]	; 0x38
    405e:	2800      	cmp	r0, #0
    4060:	dd31      	ble.n	40c6 <_svfprintf_r+0x8c6>
    4062:	494f      	ldr	r1, [pc, #316]	; (41a0 <_svfprintf_r+0x9a0>)
    4064:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4066:	6021      	str	r1, [r4, #0]
    4068:	2a10      	cmp	r2, #16
    406a:	dd18      	ble.n	409e <_svfprintf_r+0x89e>
    406c:	9929      	ldr	r1, [sp, #164]	; 0xa4
    406e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    4070:	2310      	movs	r3, #16
    4072:	3110      	adds	r1, #16
    4074:	3201      	adds	r2, #1
    4076:	6063      	str	r3, [r4, #4]
    4078:	9129      	str	r1, [sp, #164]	; 0xa4
    407a:	9228      	str	r2, [sp, #160]	; 0xa0
    407c:	2a07      	cmp	r2, #7
    407e:	dc01      	bgt.n	4084 <_svfprintf_r+0x884>
    4080:	3408      	adds	r4, #8
    4082:	e008      	b.n	4096 <_svfprintf_r+0x896>
    4084:	980d      	ldr	r0, [sp, #52]	; 0x34
    4086:	990c      	ldr	r1, [sp, #48]	; 0x30
    4088:	aa27      	add	r2, sp, #156	; 0x9c
    408a:	f002 f96d 	bl	6368 <__ssprint_r>
    408e:	2800      	cmp	r0, #0
    4090:	d000      	beq.n	4094 <_svfprintf_r+0x894>
    4092:	e35b      	b.n	474c <_svfprintf_r+0xf4c>
    4094:	ac34      	add	r4, sp, #208	; 0xd0
    4096:	980e      	ldr	r0, [sp, #56]	; 0x38
    4098:	3810      	subs	r0, #16
    409a:	900e      	str	r0, [sp, #56]	; 0x38
    409c:	e7e1      	b.n	4062 <_svfprintf_r+0x862>
    409e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    40a0:	9928      	ldr	r1, [sp, #160]	; 0xa0
    40a2:	1898      	adds	r0, r3, r2
    40a4:	3101      	adds	r1, #1
    40a6:	6062      	str	r2, [r4, #4]
    40a8:	9029      	str	r0, [sp, #164]	; 0xa4
    40aa:	9128      	str	r1, [sp, #160]	; 0xa0
    40ac:	2907      	cmp	r1, #7
    40ae:	dc01      	bgt.n	40b4 <_svfprintf_r+0x8b4>
    40b0:	3408      	adds	r4, #8
    40b2:	e008      	b.n	40c6 <_svfprintf_r+0x8c6>
    40b4:	980d      	ldr	r0, [sp, #52]	; 0x34
    40b6:	990c      	ldr	r1, [sp, #48]	; 0x30
    40b8:	aa27      	add	r2, sp, #156	; 0x9c
    40ba:	f002 f955 	bl	6368 <__ssprint_r>
    40be:	2800      	cmp	r0, #0
    40c0:	d000      	beq.n	40c4 <_svfprintf_r+0x8c4>
    40c2:	e343      	b.n	474c <_svfprintf_r+0xf4c>
    40c4:	ac34      	add	r4, sp, #208	; 0xd0
    40c6:	466b      	mov	r3, sp
    40c8:	337b      	adds	r3, #123	; 0x7b
    40ca:	781a      	ldrb	r2, [r3, #0]
    40cc:	2a00      	cmp	r2, #0
    40ce:	d015      	beq.n	40fc <_svfprintf_r+0x8fc>
    40d0:	6023      	str	r3, [r4, #0]
    40d2:	9929      	ldr	r1, [sp, #164]	; 0xa4
    40d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    40d6:	2001      	movs	r0, #1
    40d8:	3101      	adds	r1, #1
    40da:	3301      	adds	r3, #1
    40dc:	6060      	str	r0, [r4, #4]
    40de:	9129      	str	r1, [sp, #164]	; 0xa4
    40e0:	9328      	str	r3, [sp, #160]	; 0xa0
    40e2:	2b07      	cmp	r3, #7
    40e4:	dc01      	bgt.n	40ea <_svfprintf_r+0x8ea>
    40e6:	3408      	adds	r4, #8
    40e8:	e008      	b.n	40fc <_svfprintf_r+0x8fc>
    40ea:	980d      	ldr	r0, [sp, #52]	; 0x34
    40ec:	990c      	ldr	r1, [sp, #48]	; 0x30
    40ee:	aa27      	add	r2, sp, #156	; 0x9c
    40f0:	f002 f93a 	bl	6368 <__ssprint_r>
    40f4:	2800      	cmp	r0, #0
    40f6:	d000      	beq.n	40fa <_svfprintf_r+0x8fa>
    40f8:	e328      	b.n	474c <_svfprintf_r+0xf4c>
    40fa:	ac34      	add	r4, sp, #208	; 0xd0
    40fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    40fe:	2a00      	cmp	r2, #0
    4100:	d016      	beq.n	4130 <_svfprintf_r+0x930>
    4102:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    4104:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    4106:	a81f      	add	r0, sp, #124	; 0x7c
    4108:	2102      	movs	r1, #2
    410a:	3302      	adds	r3, #2
    410c:	3201      	adds	r2, #1
    410e:	6020      	str	r0, [r4, #0]
    4110:	6061      	str	r1, [r4, #4]
    4112:	9329      	str	r3, [sp, #164]	; 0xa4
    4114:	9228      	str	r2, [sp, #160]	; 0xa0
    4116:	2a07      	cmp	r2, #7
    4118:	dc01      	bgt.n	411e <_svfprintf_r+0x91e>
    411a:	3408      	adds	r4, #8
    411c:	e008      	b.n	4130 <_svfprintf_r+0x930>
    411e:	980d      	ldr	r0, [sp, #52]	; 0x34
    4120:	990c      	ldr	r1, [sp, #48]	; 0x30
    4122:	aa27      	add	r2, sp, #156	; 0x9c
    4124:	f002 f920 	bl	6368 <__ssprint_r>
    4128:	2800      	cmp	r0, #0
    412a:	d000      	beq.n	412e <_svfprintf_r+0x92e>
    412c:	e30e      	b.n	474c <_svfprintf_r+0xf4c>
    412e:	ac34      	add	r4, sp, #208	; 0xd0
    4130:	981b      	ldr	r0, [sp, #108]	; 0x6c
    4132:	2880      	cmp	r0, #128	; 0x80
    4134:	d13f      	bne.n	41b6 <_svfprintf_r+0x9b6>
    4136:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4138:	9b18      	ldr	r3, [sp, #96]	; 0x60
    413a:	1aca      	subs	r2, r1, r3
    413c:	920e      	str	r2, [sp, #56]	; 0x38
    413e:	2a00      	cmp	r2, #0
    4140:	dd39      	ble.n	41b6 <_svfprintf_r+0x9b6>
    4142:	4817      	ldr	r0, [pc, #92]	; (41a0 <_svfprintf_r+0x9a0>)
    4144:	990e      	ldr	r1, [sp, #56]	; 0x38
    4146:	3010      	adds	r0, #16
    4148:	6020      	str	r0, [r4, #0]
    414a:	2910      	cmp	r1, #16
    414c:	dd18      	ble.n	4180 <_svfprintf_r+0x980>
    414e:	9929      	ldr	r1, [sp, #164]	; 0xa4
    4150:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    4152:	2310      	movs	r3, #16
    4154:	3110      	adds	r1, #16
    4156:	3201      	adds	r2, #1
    4158:	6063      	str	r3, [r4, #4]
    415a:	9129      	str	r1, [sp, #164]	; 0xa4
    415c:	9228      	str	r2, [sp, #160]	; 0xa0
    415e:	2a07      	cmp	r2, #7
    4160:	dc01      	bgt.n	4166 <_svfprintf_r+0x966>
    4162:	3408      	adds	r4, #8
    4164:	e008      	b.n	4178 <_svfprintf_r+0x978>
    4166:	980d      	ldr	r0, [sp, #52]	; 0x34
    4168:	990c      	ldr	r1, [sp, #48]	; 0x30
    416a:	aa27      	add	r2, sp, #156	; 0x9c
    416c:	f002 f8fc 	bl	6368 <__ssprint_r>
    4170:	2800      	cmp	r0, #0
    4172:	d000      	beq.n	4176 <_svfprintf_r+0x976>
    4174:	e2ea      	b.n	474c <_svfprintf_r+0xf4c>
    4176:	ac34      	add	r4, sp, #208	; 0xd0
    4178:	980e      	ldr	r0, [sp, #56]	; 0x38
    417a:	3810      	subs	r0, #16
    417c:	900e      	str	r0, [sp, #56]	; 0x38
    417e:	e7e0      	b.n	4142 <_svfprintf_r+0x942>
    4180:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    4182:	9828      	ldr	r0, [sp, #160]	; 0xa0
    4184:	185a      	adds	r2, r3, r1
    4186:	3001      	adds	r0, #1
    4188:	6061      	str	r1, [r4, #4]
    418a:	9229      	str	r2, [sp, #164]	; 0xa4
    418c:	9028      	str	r0, [sp, #160]	; 0xa0
    418e:	2807      	cmp	r0, #7
    4190:	dc08      	bgt.n	41a4 <_svfprintf_r+0x9a4>
    4192:	3408      	adds	r4, #8
    4194:	e00f      	b.n	41b6 <_svfprintf_r+0x9b6>
    4196:	46c0      	nop			; (mov r8, r8)
    4198:	00009b5b 	.word	0x00009b5b
    419c:	00009b4a 	.word	0x00009b4a
    41a0:	00009b1a 	.word	0x00009b1a
    41a4:	980d      	ldr	r0, [sp, #52]	; 0x34
    41a6:	990c      	ldr	r1, [sp, #48]	; 0x30
    41a8:	aa27      	add	r2, sp, #156	; 0x9c
    41aa:	f002 f8dd 	bl	6368 <__ssprint_r>
    41ae:	2800      	cmp	r0, #0
    41b0:	d000      	beq.n	41b4 <_svfprintf_r+0x9b4>
    41b2:	e2cb      	b.n	474c <_svfprintf_r+0xf4c>
    41b4:	ac34      	add	r4, sp, #208	; 0xd0
    41b6:	1b76      	subs	r6, r6, r5
    41b8:	2e00      	cmp	r6, #0
    41ba:	dd2f      	ble.n	421c <_svfprintf_r+0xa1c>
    41bc:	49c4      	ldr	r1, [pc, #784]	; (44d0 <_svfprintf_r+0xcd0>)
    41be:	3110      	adds	r1, #16
    41c0:	6021      	str	r1, [r4, #0]
    41c2:	2e10      	cmp	r6, #16
    41c4:	dd16      	ble.n	41f4 <_svfprintf_r+0x9f4>
    41c6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    41c8:	9828      	ldr	r0, [sp, #160]	; 0xa0
    41ca:	2110      	movs	r1, #16
    41cc:	3210      	adds	r2, #16
    41ce:	3001      	adds	r0, #1
    41d0:	6061      	str	r1, [r4, #4]
    41d2:	9229      	str	r2, [sp, #164]	; 0xa4
    41d4:	9028      	str	r0, [sp, #160]	; 0xa0
    41d6:	2807      	cmp	r0, #7
    41d8:	dc01      	bgt.n	41de <_svfprintf_r+0x9de>
    41da:	3408      	adds	r4, #8
    41dc:	e008      	b.n	41f0 <_svfprintf_r+0x9f0>
    41de:	980d      	ldr	r0, [sp, #52]	; 0x34
    41e0:	990c      	ldr	r1, [sp, #48]	; 0x30
    41e2:	aa27      	add	r2, sp, #156	; 0x9c
    41e4:	f002 f8c0 	bl	6368 <__ssprint_r>
    41e8:	2800      	cmp	r0, #0
    41ea:	d000      	beq.n	41ee <_svfprintf_r+0x9ee>
    41ec:	e2ae      	b.n	474c <_svfprintf_r+0xf4c>
    41ee:	ac34      	add	r4, sp, #208	; 0xd0
    41f0:	3e10      	subs	r6, #16
    41f2:	e7e3      	b.n	41bc <_svfprintf_r+0x9bc>
    41f4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    41f6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    41f8:	6066      	str	r6, [r4, #4]
    41fa:	3201      	adds	r2, #1
    41fc:	199e      	adds	r6, r3, r6
    41fe:	9629      	str	r6, [sp, #164]	; 0xa4
    4200:	9228      	str	r2, [sp, #160]	; 0xa0
    4202:	2a07      	cmp	r2, #7
    4204:	dc01      	bgt.n	420a <_svfprintf_r+0xa0a>
    4206:	3408      	adds	r4, #8
    4208:	e008      	b.n	421c <_svfprintf_r+0xa1c>
    420a:	980d      	ldr	r0, [sp, #52]	; 0x34
    420c:	990c      	ldr	r1, [sp, #48]	; 0x30
    420e:	aa27      	add	r2, sp, #156	; 0x9c
    4210:	f002 f8aa 	bl	6368 <__ssprint_r>
    4214:	2800      	cmp	r0, #0
    4216:	d000      	beq.n	421a <_svfprintf_r+0xa1a>
    4218:	e298      	b.n	474c <_svfprintf_r+0xf4c>
    421a:	ac34      	add	r4, sp, #208	; 0xd0
    421c:	9809      	ldr	r0, [sp, #36]	; 0x24
    421e:	05c2      	lsls	r2, r0, #23
    4220:	d405      	bmi.n	422e <_svfprintf_r+0xa2e>
    4222:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    4224:	9929      	ldr	r1, [sp, #164]	; 0xa4
    4226:	6065      	str	r5, [r4, #4]
    4228:	6026      	str	r6, [r4, #0]
    422a:	194d      	adds	r5, r1, r5
    422c:	e065      	b.n	42fa <_svfprintf_r+0xafa>
    422e:	9d08      	ldr	r5, [sp, #32]
    4230:	2d65      	cmp	r5, #101	; 0x65
    4232:	dc00      	bgt.n	4236 <_svfprintf_r+0xa36>
    4234:	e1b1      	b.n	459a <_svfprintf_r+0xd9a>
    4236:	9814      	ldr	r0, [sp, #80]	; 0x50
    4238:	9915      	ldr	r1, [sp, #84]	; 0x54
    423a:	4ba4      	ldr	r3, [pc, #656]	; (44cc <_svfprintf_r+0xccc>)
    423c:	4aa2      	ldr	r2, [pc, #648]	; (44c8 <_svfprintf_r+0xcc8>)
    423e:	f002 ff71 	bl	7124 <__aeabi_dcmpeq>
    4242:	2800      	cmp	r0, #0
    4244:	d05b      	beq.n	42fe <_svfprintf_r+0xafe>
    4246:	9d29      	ldr	r5, [sp, #164]	; 0xa4
    4248:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    424a:	4ea2      	ldr	r6, [pc, #648]	; (44d4 <_svfprintf_r+0xcd4>)
    424c:	2101      	movs	r1, #1
    424e:	3501      	adds	r5, #1
    4250:	3201      	adds	r2, #1
    4252:	6026      	str	r6, [r4, #0]
    4254:	6061      	str	r1, [r4, #4]
    4256:	9529      	str	r5, [sp, #164]	; 0xa4
    4258:	9228      	str	r2, [sp, #160]	; 0xa0
    425a:	2a07      	cmp	r2, #7
    425c:	dc01      	bgt.n	4262 <_svfprintf_r+0xa62>
    425e:	3408      	adds	r4, #8
    4260:	e008      	b.n	4274 <_svfprintf_r+0xa74>
    4262:	980d      	ldr	r0, [sp, #52]	; 0x34
    4264:	990c      	ldr	r1, [sp, #48]	; 0x30
    4266:	aa27      	add	r2, sp, #156	; 0x9c
    4268:	f002 f87e 	bl	6368 <__ssprint_r>
    426c:	2800      	cmp	r0, #0
    426e:	d000      	beq.n	4272 <_svfprintf_r+0xa72>
    4270:	e26c      	b.n	474c <_svfprintf_r+0xf4c>
    4272:	ac34      	add	r4, sp, #208	; 0xd0
    4274:	9820      	ldr	r0, [sp, #128]	; 0x80
    4276:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4278:	4298      	cmp	r0, r3
    427a:	db03      	blt.n	4284 <_svfprintf_r+0xa84>
    427c:	9e09      	ldr	r6, [sp, #36]	; 0x24
    427e:	07f5      	lsls	r5, r6, #31
    4280:	d400      	bmi.n	4284 <_svfprintf_r+0xa84>
    4282:	e210      	b.n	46a6 <_svfprintf_r+0xea6>
    4284:	9d19      	ldr	r5, [sp, #100]	; 0x64
    4286:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    4288:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    428a:	991a      	ldr	r1, [sp, #104]	; 0x68
    428c:	18a8      	adds	r0, r5, r2
    428e:	3301      	adds	r3, #1
    4290:	6021      	str	r1, [r4, #0]
    4292:	6065      	str	r5, [r4, #4]
    4294:	9029      	str	r0, [sp, #164]	; 0xa4
    4296:	9328      	str	r3, [sp, #160]	; 0xa0
    4298:	2b07      	cmp	r3, #7
    429a:	dc01      	bgt.n	42a0 <_svfprintf_r+0xaa0>
    429c:	3408      	adds	r4, #8
    429e:	e008      	b.n	42b2 <_svfprintf_r+0xab2>
    42a0:	980d      	ldr	r0, [sp, #52]	; 0x34
    42a2:	990c      	ldr	r1, [sp, #48]	; 0x30
    42a4:	aa27      	add	r2, sp, #156	; 0x9c
    42a6:	f002 f85f 	bl	6368 <__ssprint_r>
    42aa:	2800      	cmp	r0, #0
    42ac:	d000      	beq.n	42b0 <_svfprintf_r+0xab0>
    42ae:	e24d      	b.n	474c <_svfprintf_r+0xf4c>
    42b0:	ac34      	add	r4, sp, #208	; 0xd0
    42b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
    42b4:	3d01      	subs	r5, #1
    42b6:	2d00      	cmp	r5, #0
    42b8:	dc00      	bgt.n	42bc <_svfprintf_r+0xabc>
    42ba:	e1f4      	b.n	46a6 <_svfprintf_r+0xea6>
    42bc:	4e84      	ldr	r6, [pc, #528]	; (44d0 <_svfprintf_r+0xcd0>)
    42be:	3610      	adds	r6, #16
    42c0:	6026      	str	r6, [r4, #0]
    42c2:	2d10      	cmp	r5, #16
    42c4:	dd16      	ble.n	42f4 <_svfprintf_r+0xaf4>
    42c6:	9829      	ldr	r0, [sp, #164]	; 0xa4
    42c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    42ca:	2210      	movs	r2, #16
    42cc:	3010      	adds	r0, #16
    42ce:	3301      	adds	r3, #1
    42d0:	6062      	str	r2, [r4, #4]
    42d2:	9029      	str	r0, [sp, #164]	; 0xa4
    42d4:	9328      	str	r3, [sp, #160]	; 0xa0
    42d6:	2b07      	cmp	r3, #7
    42d8:	dc01      	bgt.n	42de <_svfprintf_r+0xade>
    42da:	3408      	adds	r4, #8
    42dc:	e008      	b.n	42f0 <_svfprintf_r+0xaf0>
    42de:	980d      	ldr	r0, [sp, #52]	; 0x34
    42e0:	990c      	ldr	r1, [sp, #48]	; 0x30
    42e2:	aa27      	add	r2, sp, #156	; 0x9c
    42e4:	f002 f840 	bl	6368 <__ssprint_r>
    42e8:	2800      	cmp	r0, #0
    42ea:	d000      	beq.n	42ee <_svfprintf_r+0xaee>
    42ec:	e22e      	b.n	474c <_svfprintf_r+0xf4c>
    42ee:	ac34      	add	r4, sp, #208	; 0xd0
    42f0:	3d10      	subs	r5, #16
    42f2:	e7e3      	b.n	42bc <_svfprintf_r+0xabc>
    42f4:	9929      	ldr	r1, [sp, #164]	; 0xa4
    42f6:	6065      	str	r5, [r4, #4]
    42f8:	194d      	adds	r5, r1, r5
    42fa:	9529      	str	r5, [sp, #164]	; 0xa4
    42fc:	e13d      	b.n	457a <_svfprintf_r+0xd7a>
    42fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
    4300:	2b00      	cmp	r3, #0
    4302:	dc6f      	bgt.n	43e4 <_svfprintf_r+0xbe4>
    4304:	9e29      	ldr	r6, [sp, #164]	; 0xa4
    4306:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    4308:	4972      	ldr	r1, [pc, #456]	; (44d4 <_svfprintf_r+0xcd4>)
    430a:	2501      	movs	r5, #1
    430c:	3601      	adds	r6, #1
    430e:	3201      	adds	r2, #1
    4310:	6021      	str	r1, [r4, #0]
    4312:	6065      	str	r5, [r4, #4]
    4314:	9629      	str	r6, [sp, #164]	; 0xa4
    4316:	9228      	str	r2, [sp, #160]	; 0xa0
    4318:	2a07      	cmp	r2, #7
    431a:	dc01      	bgt.n	4320 <_svfprintf_r+0xb20>
    431c:	3408      	adds	r4, #8
    431e:	e008      	b.n	4332 <_svfprintf_r+0xb32>
    4320:	980d      	ldr	r0, [sp, #52]	; 0x34
    4322:	990c      	ldr	r1, [sp, #48]	; 0x30
    4324:	aa27      	add	r2, sp, #156	; 0x9c
    4326:	f002 f81f 	bl	6368 <__ssprint_r>
    432a:	2800      	cmp	r0, #0
    432c:	d000      	beq.n	4330 <_svfprintf_r+0xb30>
    432e:	e20d      	b.n	474c <_svfprintf_r+0xf4c>
    4330:	ac34      	add	r4, sp, #208	; 0xd0
    4332:	9820      	ldr	r0, [sp, #128]	; 0x80
    4334:	2800      	cmp	r0, #0
    4336:	d106      	bne.n	4346 <_svfprintf_r+0xb46>
    4338:	9b10      	ldr	r3, [sp, #64]	; 0x40
    433a:	2b00      	cmp	r3, #0
    433c:	d103      	bne.n	4346 <_svfprintf_r+0xb46>
    433e:	9909      	ldr	r1, [sp, #36]	; 0x24
    4340:	07cd      	lsls	r5, r1, #31
    4342:	d400      	bmi.n	4346 <_svfprintf_r+0xb46>
    4344:	e1af      	b.n	46a6 <_svfprintf_r+0xea6>
    4346:	9e19      	ldr	r6, [sp, #100]	; 0x64
    4348:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    434a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    434c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    434e:	18b0      	adds	r0, r6, r2
    4350:	3301      	adds	r3, #1
    4352:	6025      	str	r5, [r4, #0]
    4354:	6066      	str	r6, [r4, #4]
    4356:	9029      	str	r0, [sp, #164]	; 0xa4
    4358:	9328      	str	r3, [sp, #160]	; 0xa0
    435a:	2b07      	cmp	r3, #7
    435c:	dc01      	bgt.n	4362 <_svfprintf_r+0xb62>
    435e:	3408      	adds	r4, #8
    4360:	e008      	b.n	4374 <_svfprintf_r+0xb74>
    4362:	980d      	ldr	r0, [sp, #52]	; 0x34
    4364:	990c      	ldr	r1, [sp, #48]	; 0x30
    4366:	aa27      	add	r2, sp, #156	; 0x9c
    4368:	f001 fffe 	bl	6368 <__ssprint_r>
    436c:	2800      	cmp	r0, #0
    436e:	d000      	beq.n	4372 <_svfprintf_r+0xb72>
    4370:	e1ec      	b.n	474c <_svfprintf_r+0xf4c>
    4372:	ac34      	add	r4, sp, #208	; 0xd0
    4374:	9920      	ldr	r1, [sp, #128]	; 0x80
    4376:	424d      	negs	r5, r1
    4378:	2d00      	cmp	r5, #0
    437a:	dd2f      	ble.n	43dc <_svfprintf_r+0xbdc>
    437c:	4e54      	ldr	r6, [pc, #336]	; (44d0 <_svfprintf_r+0xcd0>)
    437e:	3610      	adds	r6, #16
    4380:	6026      	str	r6, [r4, #0]
    4382:	2d10      	cmp	r5, #16
    4384:	dd16      	ble.n	43b4 <_svfprintf_r+0xbb4>
    4386:	9829      	ldr	r0, [sp, #164]	; 0xa4
    4388:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    438a:	2210      	movs	r2, #16
    438c:	3010      	adds	r0, #16
    438e:	3301      	adds	r3, #1
    4390:	6062      	str	r2, [r4, #4]
    4392:	9029      	str	r0, [sp, #164]	; 0xa4
    4394:	9328      	str	r3, [sp, #160]	; 0xa0
    4396:	2b07      	cmp	r3, #7
    4398:	dc01      	bgt.n	439e <_svfprintf_r+0xb9e>
    439a:	3408      	adds	r4, #8
    439c:	e008      	b.n	43b0 <_svfprintf_r+0xbb0>
    439e:	980d      	ldr	r0, [sp, #52]	; 0x34
    43a0:	990c      	ldr	r1, [sp, #48]	; 0x30
    43a2:	aa27      	add	r2, sp, #156	; 0x9c
    43a4:	f001 ffe0 	bl	6368 <__ssprint_r>
    43a8:	2800      	cmp	r0, #0
    43aa:	d000      	beq.n	43ae <_svfprintf_r+0xbae>
    43ac:	e1ce      	b.n	474c <_svfprintf_r+0xf4c>
    43ae:	ac34      	add	r4, sp, #208	; 0xd0
    43b0:	3d10      	subs	r5, #16
    43b2:	e7e3      	b.n	437c <_svfprintf_r+0xb7c>
    43b4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    43b6:	9828      	ldr	r0, [sp, #160]	; 0xa0
    43b8:	6065      	str	r5, [r4, #4]
    43ba:	3001      	adds	r0, #1
    43bc:	1955      	adds	r5, r2, r5
    43be:	9529      	str	r5, [sp, #164]	; 0xa4
    43c0:	9028      	str	r0, [sp, #160]	; 0xa0
    43c2:	2807      	cmp	r0, #7
    43c4:	dc01      	bgt.n	43ca <_svfprintf_r+0xbca>
    43c6:	3408      	adds	r4, #8
    43c8:	e008      	b.n	43dc <_svfprintf_r+0xbdc>
    43ca:	980d      	ldr	r0, [sp, #52]	; 0x34
    43cc:	990c      	ldr	r1, [sp, #48]	; 0x30
    43ce:	aa27      	add	r2, sp, #156	; 0x9c
    43d0:	f001 ffca 	bl	6368 <__ssprint_r>
    43d4:	2800      	cmp	r0, #0
    43d6:	d000      	beq.n	43da <_svfprintf_r+0xbda>
    43d8:	e1b8      	b.n	474c <_svfprintf_r+0xf4c>
    43da:	ac34      	add	r4, sp, #208	; 0xd0
    43dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    43de:	9910      	ldr	r1, [sp, #64]	; 0x40
    43e0:	6023      	str	r3, [r4, #0]
    43e2:	e15a      	b.n	469a <_svfprintf_r+0xe9a>
    43e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    43e6:	9e10      	ldr	r6, [sp, #64]	; 0x40
    43e8:	9811      	ldr	r0, [sp, #68]	; 0x44
    43ea:	1996      	adds	r6, r2, r6
    43ec:	1ab5      	subs	r5, r6, r2
    43ee:	4285      	cmp	r5, r0
    43f0:	dd00      	ble.n	43f4 <_svfprintf_r+0xbf4>
    43f2:	1c05      	adds	r5, r0, #0
    43f4:	2d00      	cmp	r5, #0
    43f6:	dd15      	ble.n	4424 <_svfprintf_r+0xc24>
    43f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    43fa:	9828      	ldr	r0, [sp, #160]	; 0xa0
    43fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    43fe:	195a      	adds	r2, r3, r5
    4400:	3001      	adds	r0, #1
    4402:	6021      	str	r1, [r4, #0]
    4404:	6065      	str	r5, [r4, #4]
    4406:	9229      	str	r2, [sp, #164]	; 0xa4
    4408:	9028      	str	r0, [sp, #160]	; 0xa0
    440a:	2807      	cmp	r0, #7
    440c:	dc01      	bgt.n	4412 <_svfprintf_r+0xc12>
    440e:	3408      	adds	r4, #8
    4410:	e008      	b.n	4424 <_svfprintf_r+0xc24>
    4412:	980d      	ldr	r0, [sp, #52]	; 0x34
    4414:	990c      	ldr	r1, [sp, #48]	; 0x30
    4416:	aa27      	add	r2, sp, #156	; 0x9c
    4418:	f001 ffa6 	bl	6368 <__ssprint_r>
    441c:	2800      	cmp	r0, #0
    441e:	d000      	beq.n	4422 <_svfprintf_r+0xc22>
    4420:	e194      	b.n	474c <_svfprintf_r+0xf4c>
    4422:	ac34      	add	r4, sp, #208	; 0xd0
    4424:	43e9      	mvns	r1, r5
    4426:	17cb      	asrs	r3, r1, #31
    4428:	9a11      	ldr	r2, [sp, #68]	; 0x44
    442a:	401d      	ands	r5, r3
    442c:	1b55      	subs	r5, r2, r5
    442e:	2d00      	cmp	r5, #0
    4430:	dd2f      	ble.n	4492 <_svfprintf_r+0xc92>
    4432:	4827      	ldr	r0, [pc, #156]	; (44d0 <_svfprintf_r+0xcd0>)
    4434:	3010      	adds	r0, #16
    4436:	6020      	str	r0, [r4, #0]
    4438:	2d10      	cmp	r5, #16
    443a:	dd16      	ble.n	446a <_svfprintf_r+0xc6a>
    443c:	9829      	ldr	r0, [sp, #164]	; 0xa4
    443e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    4440:	2210      	movs	r2, #16
    4442:	3010      	adds	r0, #16
    4444:	3301      	adds	r3, #1
    4446:	6062      	str	r2, [r4, #4]
    4448:	9029      	str	r0, [sp, #164]	; 0xa4
    444a:	9328      	str	r3, [sp, #160]	; 0xa0
    444c:	2b07      	cmp	r3, #7
    444e:	dc01      	bgt.n	4454 <_svfprintf_r+0xc54>
    4450:	3408      	adds	r4, #8
    4452:	e008      	b.n	4466 <_svfprintf_r+0xc66>
    4454:	980d      	ldr	r0, [sp, #52]	; 0x34
    4456:	990c      	ldr	r1, [sp, #48]	; 0x30
    4458:	aa27      	add	r2, sp, #156	; 0x9c
    445a:	f001 ff85 	bl	6368 <__ssprint_r>
    445e:	2800      	cmp	r0, #0
    4460:	d000      	beq.n	4464 <_svfprintf_r+0xc64>
    4462:	e173      	b.n	474c <_svfprintf_r+0xf4c>
    4464:	ac34      	add	r4, sp, #208	; 0xd0
    4466:	3d10      	subs	r5, #16
    4468:	e7e3      	b.n	4432 <_svfprintf_r+0xc32>
    446a:	9929      	ldr	r1, [sp, #164]	; 0xa4
    446c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    446e:	6065      	str	r5, [r4, #4]
    4470:	3301      	adds	r3, #1
    4472:	194d      	adds	r5, r1, r5
    4474:	9529      	str	r5, [sp, #164]	; 0xa4
    4476:	9328      	str	r3, [sp, #160]	; 0xa0
    4478:	2b07      	cmp	r3, #7
    447a:	dc01      	bgt.n	4480 <_svfprintf_r+0xc80>
    447c:	3408      	adds	r4, #8
    447e:	e008      	b.n	4492 <_svfprintf_r+0xc92>
    4480:	980d      	ldr	r0, [sp, #52]	; 0x34
    4482:	990c      	ldr	r1, [sp, #48]	; 0x30
    4484:	aa27      	add	r2, sp, #156	; 0x9c
    4486:	f001 ff6f 	bl	6368 <__ssprint_r>
    448a:	2800      	cmp	r0, #0
    448c:	d000      	beq.n	4490 <_svfprintf_r+0xc90>
    448e:	e15d      	b.n	474c <_svfprintf_r+0xf4c>
    4490:	ac34      	add	r4, sp, #208	; 0xd0
    4492:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4494:	9811      	ldr	r0, [sp, #68]	; 0x44
    4496:	9920      	ldr	r1, [sp, #128]	; 0x80
    4498:	9b10      	ldr	r3, [sp, #64]	; 0x40
    449a:	1815      	adds	r5, r2, r0
    449c:	4299      	cmp	r1, r3
    449e:	db02      	blt.n	44a6 <_svfprintf_r+0xca6>
    44a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    44a2:	07d3      	lsls	r3, r2, #31
    44a4:	d521      	bpl.n	44ea <_svfprintf_r+0xcea>
    44a6:	981a      	ldr	r0, [sp, #104]	; 0x68
    44a8:	9919      	ldr	r1, [sp, #100]	; 0x64
    44aa:	6020      	str	r0, [r4, #0]
    44ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    44ae:	9828      	ldr	r0, [sp, #160]	; 0xa0
    44b0:	18ca      	adds	r2, r1, r3
    44b2:	3001      	adds	r0, #1
    44b4:	6061      	str	r1, [r4, #4]
    44b6:	9229      	str	r2, [sp, #164]	; 0xa4
    44b8:	9028      	str	r0, [sp, #160]	; 0xa0
    44ba:	2807      	cmp	r0, #7
    44bc:	dc0c      	bgt.n	44d8 <_svfprintf_r+0xcd8>
    44be:	3408      	adds	r4, #8
    44c0:	e013      	b.n	44ea <_svfprintf_r+0xcea>
    44c2:	46c0      	nop			; (mov r8, r8)
    44c4:	46c0      	nop			; (mov r8, r8)
    44c6:	46c0      	nop			; (mov r8, r8)
	...
    44d0:	00009b1a 	.word	0x00009b1a
    44d4:	00009b6c 	.word	0x00009b6c
    44d8:	980d      	ldr	r0, [sp, #52]	; 0x34
    44da:	990c      	ldr	r1, [sp, #48]	; 0x30
    44dc:	aa27      	add	r2, sp, #156	; 0x9c
    44de:	f001 ff43 	bl	6368 <__ssprint_r>
    44e2:	2800      	cmp	r0, #0
    44e4:	d000      	beq.n	44e8 <_svfprintf_r+0xce8>
    44e6:	e131      	b.n	474c <_svfprintf_r+0xf4c>
    44e8:	ac34      	add	r4, sp, #208	; 0xd0
    44ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    44ec:	9920      	ldr	r1, [sp, #128]	; 0x80
    44ee:	1b76      	subs	r6, r6, r5
    44f0:	1a5a      	subs	r2, r3, r1
    44f2:	4296      	cmp	r6, r2
    44f4:	dd00      	ble.n	44f8 <_svfprintf_r+0xcf8>
    44f6:	1c16      	adds	r6, r2, #0
    44f8:	2e00      	cmp	r6, #0
    44fa:	dd14      	ble.n	4526 <_svfprintf_r+0xd26>
    44fc:	6025      	str	r5, [r4, #0]
    44fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    4500:	9d29      	ldr	r5, [sp, #164]	; 0xa4
    4502:	3301      	adds	r3, #1
    4504:	19a8      	adds	r0, r5, r6
    4506:	6066      	str	r6, [r4, #4]
    4508:	9029      	str	r0, [sp, #164]	; 0xa4
    450a:	9328      	str	r3, [sp, #160]	; 0xa0
    450c:	2b07      	cmp	r3, #7
    450e:	dc01      	bgt.n	4514 <_svfprintf_r+0xd14>
    4510:	3408      	adds	r4, #8
    4512:	e008      	b.n	4526 <_svfprintf_r+0xd26>
    4514:	980d      	ldr	r0, [sp, #52]	; 0x34
    4516:	990c      	ldr	r1, [sp, #48]	; 0x30
    4518:	aa27      	add	r2, sp, #156	; 0x9c
    451a:	f001 ff25 	bl	6368 <__ssprint_r>
    451e:	2800      	cmp	r0, #0
    4520:	d000      	beq.n	4524 <_svfprintf_r+0xd24>
    4522:	e113      	b.n	474c <_svfprintf_r+0xf4c>
    4524:	ac34      	add	r4, sp, #208	; 0xd0
    4526:	43f1      	mvns	r1, r6
    4528:	9d10      	ldr	r5, [sp, #64]	; 0x40
    452a:	9820      	ldr	r0, [sp, #128]	; 0x80
    452c:	17ca      	asrs	r2, r1, #31
    452e:	4016      	ands	r6, r2
    4530:	1a2b      	subs	r3, r5, r0
    4532:	1b9d      	subs	r5, r3, r6
    4534:	2d00      	cmp	r5, #0
    4536:	dc00      	bgt.n	453a <_svfprintf_r+0xd3a>
    4538:	e0b5      	b.n	46a6 <_svfprintf_r+0xea6>
    453a:	498b      	ldr	r1, [pc, #556]	; (4768 <_svfprintf_r+0xf68>)
    453c:	3110      	adds	r1, #16
    453e:	6021      	str	r1, [r4, #0]
    4540:	2d10      	cmp	r5, #16
    4542:	dd16      	ble.n	4572 <_svfprintf_r+0xd72>
    4544:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    4546:	9928      	ldr	r1, [sp, #160]	; 0xa0
    4548:	2010      	movs	r0, #16
    454a:	3310      	adds	r3, #16
    454c:	3101      	adds	r1, #1
    454e:	6060      	str	r0, [r4, #4]
    4550:	9329      	str	r3, [sp, #164]	; 0xa4
    4552:	9128      	str	r1, [sp, #160]	; 0xa0
    4554:	2907      	cmp	r1, #7
    4556:	dc01      	bgt.n	455c <_svfprintf_r+0xd5c>
    4558:	3408      	adds	r4, #8
    455a:	e008      	b.n	456e <_svfprintf_r+0xd6e>
    455c:	980d      	ldr	r0, [sp, #52]	; 0x34
    455e:	990c      	ldr	r1, [sp, #48]	; 0x30
    4560:	aa27      	add	r2, sp, #156	; 0x9c
    4562:	f001 ff01 	bl	6368 <__ssprint_r>
    4566:	2800      	cmp	r0, #0
    4568:	d000      	beq.n	456c <_svfprintf_r+0xd6c>
    456a:	e0ef      	b.n	474c <_svfprintf_r+0xf4c>
    456c:	ac34      	add	r4, sp, #208	; 0xd0
    456e:	3d10      	subs	r5, #16
    4570:	e7e3      	b.n	453a <_svfprintf_r+0xd3a>
    4572:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    4574:	6065      	str	r5, [r4, #4]
    4576:	1956      	adds	r6, r2, r5
    4578:	9629      	str	r6, [sp, #164]	; 0xa4
    457a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    457c:	3501      	adds	r5, #1
    457e:	9528      	str	r5, [sp, #160]	; 0xa0
    4580:	2d07      	cmp	r5, #7
    4582:	dc00      	bgt.n	4586 <_svfprintf_r+0xd86>
    4584:	e08e      	b.n	46a4 <_svfprintf_r+0xea4>
    4586:	980d      	ldr	r0, [sp, #52]	; 0x34
    4588:	990c      	ldr	r1, [sp, #48]	; 0x30
    458a:	aa27      	add	r2, sp, #156	; 0x9c
    458c:	f001 feec 	bl	6368 <__ssprint_r>
    4590:	2800      	cmp	r0, #0
    4592:	d000      	beq.n	4596 <_svfprintf_r+0xd96>
    4594:	e0da      	b.n	474c <_svfprintf_r+0xf4c>
    4596:	ac34      	add	r4, sp, #208	; 0xd0
    4598:	e085      	b.n	46a6 <_svfprintf_r+0xea6>
    459a:	9910      	ldr	r1, [sp, #64]	; 0x40
    459c:	2901      	cmp	r1, #1
    459e:	dc03      	bgt.n	45a8 <_svfprintf_r+0xda8>
    45a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
    45a2:	2301      	movs	r3, #1
    45a4:	421e      	tst	r6, r3
    45a6:	d06d      	beq.n	4684 <_svfprintf_r+0xe84>
    45a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    45aa:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    45ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    45ae:	2101      	movs	r1, #1
    45b0:	3301      	adds	r3, #1
    45b2:	3601      	adds	r6, #1
    45b4:	6025      	str	r5, [r4, #0]
    45b6:	6061      	str	r1, [r4, #4]
    45b8:	9329      	str	r3, [sp, #164]	; 0xa4
    45ba:	9628      	str	r6, [sp, #160]	; 0xa0
    45bc:	2e07      	cmp	r6, #7
    45be:	dc01      	bgt.n	45c4 <_svfprintf_r+0xdc4>
    45c0:	3408      	adds	r4, #8
    45c2:	e008      	b.n	45d6 <_svfprintf_r+0xdd6>
    45c4:	980d      	ldr	r0, [sp, #52]	; 0x34
    45c6:	990c      	ldr	r1, [sp, #48]	; 0x30
    45c8:	aa27      	add	r2, sp, #156	; 0x9c
    45ca:	f001 fecd 	bl	6368 <__ssprint_r>
    45ce:	2800      	cmp	r0, #0
    45d0:	d000      	beq.n	45d4 <_svfprintf_r+0xdd4>
    45d2:	e0bb      	b.n	474c <_svfprintf_r+0xf4c>
    45d4:	ac34      	add	r4, sp, #208	; 0xd0
    45d6:	9d19      	ldr	r5, [sp, #100]	; 0x64
    45d8:	9829      	ldr	r0, [sp, #164]	; 0xa4
    45da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    45dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    45de:	1829      	adds	r1, r5, r0
    45e0:	3301      	adds	r3, #1
    45e2:	6022      	str	r2, [r4, #0]
    45e4:	6065      	str	r5, [r4, #4]
    45e6:	9129      	str	r1, [sp, #164]	; 0xa4
    45e8:	9328      	str	r3, [sp, #160]	; 0xa0
    45ea:	2b07      	cmp	r3, #7
    45ec:	dc01      	bgt.n	45f2 <_svfprintf_r+0xdf2>
    45ee:	3408      	adds	r4, #8
    45f0:	e008      	b.n	4604 <_svfprintf_r+0xe04>
    45f2:	980d      	ldr	r0, [sp, #52]	; 0x34
    45f4:	990c      	ldr	r1, [sp, #48]	; 0x30
    45f6:	aa27      	add	r2, sp, #156	; 0x9c
    45f8:	f001 feb6 	bl	6368 <__ssprint_r>
    45fc:	2800      	cmp	r0, #0
    45fe:	d000      	beq.n	4602 <_svfprintf_r+0xe02>
    4600:	e0a4      	b.n	474c <_svfprintf_r+0xf4c>
    4602:	ac34      	add	r4, sp, #208	; 0xd0
    4604:	9814      	ldr	r0, [sp, #80]	; 0x50
    4606:	9915      	ldr	r1, [sp, #84]	; 0x54
    4608:	4b56      	ldr	r3, [pc, #344]	; (4764 <_svfprintf_r+0xf64>)
    460a:	4a55      	ldr	r2, [pc, #340]	; (4760 <_svfprintf_r+0xf60>)
    460c:	f002 fd8a 	bl	7124 <__aeabi_dcmpeq>
    4610:	9d10      	ldr	r5, [sp, #64]	; 0x40
    4612:	3d01      	subs	r5, #1
    4614:	2800      	cmp	r0, #0
    4616:	d106      	bne.n	4626 <_svfprintf_r+0xe26>
    4618:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    461a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    461c:	3601      	adds	r6, #1
    461e:	6065      	str	r5, [r4, #4]
    4620:	6026      	str	r6, [r4, #0]
    4622:	1955      	adds	r5, r2, r5
    4624:	e01f      	b.n	4666 <_svfprintf_r+0xe66>
    4626:	2d00      	cmp	r5, #0
    4628:	dd34      	ble.n	4694 <_svfprintf_r+0xe94>
    462a:	4e4f      	ldr	r6, [pc, #316]	; (4768 <_svfprintf_r+0xf68>)
    462c:	3610      	adds	r6, #16
    462e:	6026      	str	r6, [r4, #0]
    4630:	2d10      	cmp	r5, #16
    4632:	dd15      	ble.n	4660 <_svfprintf_r+0xe60>
    4634:	9929      	ldr	r1, [sp, #164]	; 0xa4
    4636:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    4638:	2010      	movs	r0, #16
    463a:	3110      	adds	r1, #16
    463c:	3301      	adds	r3, #1
    463e:	6060      	str	r0, [r4, #4]
    4640:	9129      	str	r1, [sp, #164]	; 0xa4
    4642:	9328      	str	r3, [sp, #160]	; 0xa0
    4644:	2b07      	cmp	r3, #7
    4646:	dc01      	bgt.n	464c <_svfprintf_r+0xe4c>
    4648:	3408      	adds	r4, #8
    464a:	e007      	b.n	465c <_svfprintf_r+0xe5c>
    464c:	980d      	ldr	r0, [sp, #52]	; 0x34
    464e:	990c      	ldr	r1, [sp, #48]	; 0x30
    4650:	aa27      	add	r2, sp, #156	; 0x9c
    4652:	f001 fe89 	bl	6368 <__ssprint_r>
    4656:	2800      	cmp	r0, #0
    4658:	d178      	bne.n	474c <_svfprintf_r+0xf4c>
    465a:	ac34      	add	r4, sp, #208	; 0xd0
    465c:	3d10      	subs	r5, #16
    465e:	e7e4      	b.n	462a <_svfprintf_r+0xe2a>
    4660:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    4662:	6065      	str	r5, [r4, #4]
    4664:	1955      	adds	r5, r2, r5
    4666:	9529      	str	r5, [sp, #164]	; 0xa4
    4668:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    466a:	3501      	adds	r5, #1
    466c:	9528      	str	r5, [sp, #160]	; 0xa0
    466e:	2d07      	cmp	r5, #7
    4670:	dd0f      	ble.n	4692 <_svfprintf_r+0xe92>
    4672:	980d      	ldr	r0, [sp, #52]	; 0x34
    4674:	990c      	ldr	r1, [sp, #48]	; 0x30
    4676:	aa27      	add	r2, sp, #156	; 0x9c
    4678:	f001 fe76 	bl	6368 <__ssprint_r>
    467c:	2800      	cmp	r0, #0
    467e:	d165      	bne.n	474c <_svfprintf_r+0xf4c>
    4680:	ac34      	add	r4, sp, #208	; 0xd0
    4682:	e007      	b.n	4694 <_svfprintf_r+0xe94>
    4684:	9829      	ldr	r0, [sp, #164]	; 0xa4
    4686:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4688:	3001      	adds	r0, #1
    468a:	6022      	str	r2, [r4, #0]
    468c:	6063      	str	r3, [r4, #4]
    468e:	9029      	str	r0, [sp, #164]	; 0xa4
    4690:	e7ea      	b.n	4668 <_svfprintf_r+0xe68>
    4692:	3408      	adds	r4, #8
    4694:	a823      	add	r0, sp, #140	; 0x8c
    4696:	991c      	ldr	r1, [sp, #112]	; 0x70
    4698:	6020      	str	r0, [r4, #0]
    469a:	6061      	str	r1, [r4, #4]
    469c:	9e29      	ldr	r6, [sp, #164]	; 0xa4
    469e:	1871      	adds	r1, r6, r1
    46a0:	9129      	str	r1, [sp, #164]	; 0xa4
    46a2:	e76a      	b.n	457a <_svfprintf_r+0xd7a>
    46a4:	3408      	adds	r4, #8
    46a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    46a8:	0755      	lsls	r5, r2, #29
    46aa:	d40b      	bmi.n	46c4 <_svfprintf_r+0xec4>
    46ac:	9818      	ldr	r0, [sp, #96]	; 0x60
    46ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    46b0:	4290      	cmp	r0, r2
    46b2:	da00      	bge.n	46b6 <_svfprintf_r+0xeb6>
    46b4:	1c10      	adds	r0, r2, #0
    46b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    46b8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    46ba:	181e      	adds	r6, r3, r0
    46bc:	9613      	str	r6, [sp, #76]	; 0x4c
    46be:	2c00      	cmp	r4, #0
    46c0:	d037      	beq.n	4732 <_svfprintf_r+0xf32>
    46c2:	e02f      	b.n	4724 <_svfprintf_r+0xf24>
    46c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    46c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    46c8:	1ac5      	subs	r5, r0, r3
    46ca:	2d00      	cmp	r5, #0
    46cc:	ddee      	ble.n	46ac <_svfprintf_r+0xeac>
    46ce:	4e26      	ldr	r6, [pc, #152]	; (4768 <_svfprintf_r+0xf68>)
    46d0:	6026      	str	r6, [r4, #0]
    46d2:	2d10      	cmp	r5, #16
    46d4:	dd15      	ble.n	4702 <_svfprintf_r+0xf02>
    46d6:	9829      	ldr	r0, [sp, #164]	; 0xa4
    46d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    46da:	2210      	movs	r2, #16
    46dc:	3010      	adds	r0, #16
    46de:	3301      	adds	r3, #1
    46e0:	6062      	str	r2, [r4, #4]
    46e2:	9029      	str	r0, [sp, #164]	; 0xa4
    46e4:	9328      	str	r3, [sp, #160]	; 0xa0
    46e6:	2b07      	cmp	r3, #7
    46e8:	dc01      	bgt.n	46ee <_svfprintf_r+0xeee>
    46ea:	3408      	adds	r4, #8
    46ec:	e007      	b.n	46fe <_svfprintf_r+0xefe>
    46ee:	980d      	ldr	r0, [sp, #52]	; 0x34
    46f0:	990c      	ldr	r1, [sp, #48]	; 0x30
    46f2:	aa27      	add	r2, sp, #156	; 0x9c
    46f4:	f001 fe38 	bl	6368 <__ssprint_r>
    46f8:	2800      	cmp	r0, #0
    46fa:	d127      	bne.n	474c <_svfprintf_r+0xf4c>
    46fc:	ac34      	add	r4, sp, #208	; 0xd0
    46fe:	3d10      	subs	r5, #16
    4700:	e7e5      	b.n	46ce <_svfprintf_r+0xece>
    4702:	6065      	str	r5, [r4, #4]
    4704:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    4706:	1961      	adds	r1, r4, r5
    4708:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    470a:	9129      	str	r1, [sp, #164]	; 0xa4
    470c:	3501      	adds	r5, #1
    470e:	9528      	str	r5, [sp, #160]	; 0xa0
    4710:	2d07      	cmp	r5, #7
    4712:	ddcb      	ble.n	46ac <_svfprintf_r+0xeac>
    4714:	980d      	ldr	r0, [sp, #52]	; 0x34
    4716:	990c      	ldr	r1, [sp, #48]	; 0x30
    4718:	aa27      	add	r2, sp, #156	; 0x9c
    471a:	f001 fe25 	bl	6368 <__ssprint_r>
    471e:	2800      	cmp	r0, #0
    4720:	d0c4      	beq.n	46ac <_svfprintf_r+0xeac>
    4722:	e013      	b.n	474c <_svfprintf_r+0xf4c>
    4724:	980d      	ldr	r0, [sp, #52]	; 0x34
    4726:	990c      	ldr	r1, [sp, #48]	; 0x30
    4728:	aa27      	add	r2, sp, #156	; 0x9c
    472a:	f001 fe1d 	bl	6368 <__ssprint_r>
    472e:	2800      	cmp	r0, #0
    4730:	d10c      	bne.n	474c <_svfprintf_r+0xf4c>
    4732:	2100      	movs	r1, #0
    4734:	9128      	str	r1, [sp, #160]	; 0xa0
    4736:	ac34      	add	r4, sp, #208	; 0xd0
    4738:	f7ff f894 	bl	3864 <_svfprintf_r+0x64>
    473c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    473e:	2c00      	cmp	r4, #0
    4740:	d004      	beq.n	474c <_svfprintf_r+0xf4c>
    4742:	980d      	ldr	r0, [sp, #52]	; 0x34
    4744:	990c      	ldr	r1, [sp, #48]	; 0x30
    4746:	aa27      	add	r2, sp, #156	; 0x9c
    4748:	f001 fe0e 	bl	6368 <__ssprint_r>
    474c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    474e:	89bd      	ldrh	r5, [r7, #12]
    4750:	0668      	lsls	r0, r5, #25
    4752:	d502      	bpl.n	475a <_svfprintf_r+0xf5a>
    4754:	2101      	movs	r1, #1
    4756:	424a      	negs	r2, r1
    4758:	9213      	str	r2, [sp, #76]	; 0x4c
    475a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    475c:	b045      	add	sp, #276	; 0x114
    475e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...
    4768:	00009b1a 	.word	0x00009b1a
    476c:	46c0      	nop			; (mov r8, r8)
    476e:	46c0      	nop			; (mov r8, r8)

00004770 <register_fini>:
    4770:	b508      	push	{r3, lr}
    4772:	4b03      	ldr	r3, [pc, #12]	; (4780 <register_fini+0x10>)
    4774:	2b00      	cmp	r3, #0
    4776:	d002      	beq.n	477e <register_fini+0xe>
    4778:	4802      	ldr	r0, [pc, #8]	; (4784 <register_fini+0x14>)
    477a:	f000 f805 	bl	4788 <atexit>
    477e:	bd08      	pop	{r3, pc}
    4780:	00000000 	.word	0x00000000
    4784:	000036e1 	.word	0x000036e1

00004788 <atexit>:
    4788:	b508      	push	{r3, lr}
    478a:	1c01      	adds	r1, r0, #0
    478c:	2000      	movs	r0, #0
    478e:	1c02      	adds	r2, r0, #0
    4790:	1c03      	adds	r3, r0, #0
    4792:	f7fe ff57 	bl	3644 <__register_exitproc>
    4796:	bd08      	pop	{r3, pc}

00004798 <quorem>:
    4798:	b5f0      	push	{r4, r5, r6, r7, lr}
    479a:	690b      	ldr	r3, [r1, #16]
    479c:	1c0e      	adds	r6, r1, #0
    479e:	6901      	ldr	r1, [r0, #16]
    47a0:	b087      	sub	sp, #28
    47a2:	1c05      	adds	r5, r0, #0
    47a4:	2700      	movs	r7, #0
    47a6:	4299      	cmp	r1, r3
    47a8:	da00      	bge.n	47ac <quorem+0x14>
    47aa:	e085      	b.n	48b8 <quorem+0x120>
    47ac:	1c32      	adds	r2, r6, #0
    47ae:	1e5c      	subs	r4, r3, #1
    47b0:	3303      	adds	r3, #3
    47b2:	0098      	lsls	r0, r3, #2
    47b4:	3214      	adds	r2, #20
    47b6:	1c29      	adds	r1, r5, #0
    47b8:	9201      	str	r2, [sp, #4]
    47ba:	3114      	adds	r1, #20
    47bc:	1832      	adds	r2, r6, r0
    47be:	9103      	str	r1, [sp, #12]
    47c0:	6851      	ldr	r1, [r2, #4]
    47c2:	1828      	adds	r0, r5, r0
    47c4:	1d13      	adds	r3, r2, #4
    47c6:	3101      	adds	r1, #1
    47c8:	6840      	ldr	r0, [r0, #4]
    47ca:	9305      	str	r3, [sp, #20]
    47cc:	f7fe faa2 	bl	2d14 <__aeabi_uidiv>
    47d0:	9000      	str	r0, [sp, #0]
    47d2:	42b8      	cmp	r0, r7
    47d4:	d03c      	beq.n	4850 <quorem+0xb8>
    47d6:	9a01      	ldr	r2, [sp, #4]
    47d8:	9b03      	ldr	r3, [sp, #12]
    47da:	4694      	mov	ip, r2
    47dc:	9702      	str	r7, [sp, #8]
    47de:	9704      	str	r7, [sp, #16]
    47e0:	4661      	mov	r1, ip
    47e2:	3104      	adds	r1, #4
    47e4:	468c      	mov	ip, r1
    47e6:	3904      	subs	r1, #4
    47e8:	c980      	ldmia	r1!, {r7}
    47ea:	9a00      	ldr	r2, [sp, #0]
    47ec:	b2b8      	uxth	r0, r7
    47ee:	4350      	muls	r0, r2
    47f0:	9902      	ldr	r1, [sp, #8]
    47f2:	1808      	adds	r0, r1, r0
    47f4:	0c39      	lsrs	r1, r7, #16
    47f6:	9f00      	ldr	r7, [sp, #0]
    47f8:	0c02      	lsrs	r2, r0, #16
    47fa:	4379      	muls	r1, r7
    47fc:	1851      	adds	r1, r2, r1
    47fe:	0c0a      	lsrs	r2, r1, #16
    4800:	681f      	ldr	r7, [r3, #0]
    4802:	9202      	str	r2, [sp, #8]
    4804:	9a04      	ldr	r2, [sp, #16]
    4806:	b2bf      	uxth	r7, r7
    4808:	18bf      	adds	r7, r7, r2
    480a:	681a      	ldr	r2, [r3, #0]
    480c:	b280      	uxth	r0, r0
    480e:	1a38      	subs	r0, r7, r0
    4810:	b289      	uxth	r1, r1
    4812:	0c17      	lsrs	r7, r2, #16
    4814:	1a7a      	subs	r2, r7, r1
    4816:	1407      	asrs	r7, r0, #16
    4818:	19d2      	adds	r2, r2, r7
    481a:	1411      	asrs	r1, r2, #16
    481c:	0417      	lsls	r7, r2, #16
    481e:	b280      	uxth	r0, r0
    4820:	9a05      	ldr	r2, [sp, #20]
    4822:	4338      	orrs	r0, r7
    4824:	9104      	str	r1, [sp, #16]
    4826:	c301      	stmia	r3!, {r0}
    4828:	4594      	cmp	ip, r2
    482a:	d9d9      	bls.n	47e0 <quorem+0x48>
    482c:	1d23      	adds	r3, r4, #4
    482e:	0099      	lsls	r1, r3, #2
    4830:	186f      	adds	r7, r5, r1
    4832:	6878      	ldr	r0, [r7, #4]
    4834:	1d3b      	adds	r3, r7, #4
    4836:	2800      	cmp	r0, #0
    4838:	d10a      	bne.n	4850 <quorem+0xb8>
    483a:	9a03      	ldr	r2, [sp, #12]
    483c:	3b04      	subs	r3, #4
    483e:	4293      	cmp	r3, r2
    4840:	d801      	bhi.n	4846 <quorem+0xae>
    4842:	612c      	str	r4, [r5, #16]
    4844:	e004      	b.n	4850 <quorem+0xb8>
    4846:	6819      	ldr	r1, [r3, #0]
    4848:	2900      	cmp	r1, #0
    484a:	d1fa      	bne.n	4842 <quorem+0xaa>
    484c:	3c01      	subs	r4, #1
    484e:	e7f4      	b.n	483a <quorem+0xa2>
    4850:	1c28      	adds	r0, r5, #0
    4852:	1c31      	adds	r1, r6, #0
    4854:	f001 fb6a 	bl	5f2c <__mcmp>
    4858:	2800      	cmp	r0, #0
    485a:	db2c      	blt.n	48b6 <quorem+0x11e>
    485c:	9e00      	ldr	r6, [sp, #0]
    485e:	9b03      	ldr	r3, [sp, #12]
    4860:	3601      	adds	r6, #1
    4862:	9600      	str	r6, [sp, #0]
    4864:	2000      	movs	r0, #0
    4866:	9f01      	ldr	r7, [sp, #4]
    4868:	681a      	ldr	r2, [r3, #0]
    486a:	cf40      	ldmia	r7!, {r6}
    486c:	b291      	uxth	r1, r2
    486e:	9701      	str	r7, [sp, #4]
    4870:	1808      	adds	r0, r1, r0
    4872:	b2b7      	uxth	r7, r6
    4874:	1bc1      	subs	r1, r0, r7
    4876:	0c12      	lsrs	r2, r2, #16
    4878:	0c36      	lsrs	r6, r6, #16
    487a:	1b97      	subs	r7, r2, r6
    487c:	1408      	asrs	r0, r1, #16
    487e:	183a      	adds	r2, r7, r0
    4880:	0416      	lsls	r6, r2, #16
    4882:	1410      	asrs	r0, r2, #16
    4884:	b289      	uxth	r1, r1
    4886:	9f01      	ldr	r7, [sp, #4]
    4888:	9a05      	ldr	r2, [sp, #20]
    488a:	430e      	orrs	r6, r1
    488c:	c340      	stmia	r3!, {r6}
    488e:	4297      	cmp	r7, r2
    4890:	d9e9      	bls.n	4866 <quorem+0xce>
    4892:	1d23      	adds	r3, r4, #4
    4894:	0098      	lsls	r0, r3, #2
    4896:	182e      	adds	r6, r5, r0
    4898:	6871      	ldr	r1, [r6, #4]
    489a:	1d33      	adds	r3, r6, #4
    489c:	2900      	cmp	r1, #0
    489e:	d10a      	bne.n	48b6 <quorem+0x11e>
    48a0:	9f03      	ldr	r7, [sp, #12]
    48a2:	3b04      	subs	r3, #4
    48a4:	42bb      	cmp	r3, r7
    48a6:	d801      	bhi.n	48ac <quorem+0x114>
    48a8:	612c      	str	r4, [r5, #16]
    48aa:	e004      	b.n	48b6 <quorem+0x11e>
    48ac:	681a      	ldr	r2, [r3, #0]
    48ae:	2a00      	cmp	r2, #0
    48b0:	d1fa      	bne.n	48a8 <quorem+0x110>
    48b2:	3c01      	subs	r4, #1
    48b4:	e7f4      	b.n	48a0 <quorem+0x108>
    48b6:	9f00      	ldr	r7, [sp, #0]
    48b8:	1c38      	adds	r0, r7, #0
    48ba:	b007      	add	sp, #28
    48bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000048be <_dtoa_r>:
    48be:	b5f0      	push	{r4, r5, r6, r7, lr}
    48c0:	6c01      	ldr	r1, [r0, #64]	; 0x40
    48c2:	b09d      	sub	sp, #116	; 0x74
    48c4:	9007      	str	r0, [sp, #28]
    48c6:	9d25      	ldr	r5, [sp, #148]	; 0x94
    48c8:	9208      	str	r2, [sp, #32]
    48ca:	9309      	str	r3, [sp, #36]	; 0x24
    48cc:	2900      	cmp	r1, #0
    48ce:	d009      	beq.n	48e4 <_dtoa_r+0x26>
    48d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
    48d2:	2201      	movs	r2, #1
    48d4:	409a      	lsls	r2, r3
    48d6:	604b      	str	r3, [r1, #4]
    48d8:	608a      	str	r2, [r1, #8]
    48da:	f001 f929 	bl	5b30 <_Bfree>
    48de:	9907      	ldr	r1, [sp, #28]
    48e0:	2000      	movs	r0, #0
    48e2:	6408      	str	r0, [r1, #64]	; 0x40
    48e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
    48e6:	2e00      	cmp	r6, #0
    48e8:	da05      	bge.n	48f6 <_dtoa_r+0x38>
    48ea:	2301      	movs	r3, #1
    48ec:	409e      	lsls	r6, r3
    48ee:	40de      	lsrs	r6, r3
    48f0:	602b      	str	r3, [r5, #0]
    48f2:	9609      	str	r6, [sp, #36]	; 0x24
    48f4:	e001      	b.n	48fa <_dtoa_r+0x3c>
    48f6:	2700      	movs	r7, #0
    48f8:	602f      	str	r7, [r5, #0]
    48fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
    48fc:	4dc0      	ldr	r5, [pc, #768]	; (4c00 <_dtoa_r+0x342>)
    48fe:	1c3a      	adds	r2, r7, #0
    4900:	402a      	ands	r2, r5
    4902:	42aa      	cmp	r2, r5
    4904:	d11e      	bne.n	4944 <_dtoa_r+0x86>
    4906:	4cbf      	ldr	r4, [pc, #764]	; (4c04 <_dtoa_r+0x346>)
    4908:	9d24      	ldr	r5, [sp, #144]	; 0x90
    490a:	9908      	ldr	r1, [sp, #32]
    490c:	602c      	str	r4, [r5, #0]
    490e:	2900      	cmp	r1, #0
    4910:	d103      	bne.n	491a <_dtoa_r+0x5c>
    4912:	033a      	lsls	r2, r7, #12
    4914:	d004      	beq.n	4920 <_dtoa_r+0x62>
    4916:	48bc      	ldr	r0, [pc, #752]	; (4c08 <_dtoa_r+0x34a>)
    4918:	e003      	b.n	4922 <_dtoa_r+0x64>
    491a:	4fbb      	ldr	r7, [pc, #748]	; (4c08 <_dtoa_r+0x34a>)
    491c:	970a      	str	r7, [sp, #40]	; 0x28
    491e:	e001      	b.n	4924 <_dtoa_r+0x66>
    4920:	48ba      	ldr	r0, [pc, #744]	; (4c0c <_dtoa_r+0x34e>)
    4922:	900a      	str	r0, [sp, #40]	; 0x28
    4924:	9e26      	ldr	r6, [sp, #152]	; 0x98
    4926:	2e00      	cmp	r6, #0
    4928:	d101      	bne.n	492e <_dtoa_r+0x70>
    492a:	f000 fd78 	bl	541e <_dtoa_r+0xb60>
    492e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4930:	78dc      	ldrb	r4, [r3, #3]
    4932:	1c19      	adds	r1, r3, #0
    4934:	3103      	adds	r1, #3
    4936:	2c00      	cmp	r4, #0
    4938:	d000      	beq.n	493c <_dtoa_r+0x7e>
    493a:	3105      	adds	r1, #5
    493c:	9d26      	ldr	r5, [sp, #152]	; 0x98
    493e:	6029      	str	r1, [r5, #0]
    4940:	f000 fd6d 	bl	541e <_dtoa_r+0xb60>
    4944:	9c08      	ldr	r4, [sp, #32]
    4946:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4948:	4ba4      	ldr	r3, [pc, #656]	; (4bdc <_dtoa_r+0x31e>)
    494a:	4aa3      	ldr	r2, [pc, #652]	; (4bd8 <_dtoa_r+0x31a>)
    494c:	1c20      	adds	r0, r4, #0
    494e:	1c29      	adds	r1, r5, #0
    4950:	f002 fbe8 	bl	7124 <__aeabi_dcmpeq>
    4954:	2800      	cmp	r0, #0
    4956:	d00d      	beq.n	4974 <_dtoa_r+0xb6>
    4958:	9a24      	ldr	r2, [sp, #144]	; 0x90
    495a:	9826      	ldr	r0, [sp, #152]	; 0x98
    495c:	2101      	movs	r1, #1
    495e:	6011      	str	r1, [r2, #0]
    4960:	2800      	cmp	r0, #0
    4962:	d101      	bne.n	4968 <_dtoa_r+0xaa>
    4964:	f000 fd59 	bl	541a <_dtoa_r+0xb5c>
    4968:	4ba9      	ldr	r3, [pc, #676]	; (4c10 <_dtoa_r+0x352>)
    496a:	6003      	str	r3, [r0, #0]
    496c:	3b01      	subs	r3, #1
    496e:	930a      	str	r3, [sp, #40]	; 0x28
    4970:	f000 fd55 	bl	541e <_dtoa_r+0xb60>
    4974:	a81b      	add	r0, sp, #108	; 0x6c
    4976:	a91a      	add	r1, sp, #104	; 0x68
    4978:	9000      	str	r0, [sp, #0]
    497a:	9101      	str	r1, [sp, #4]
    497c:	9807      	ldr	r0, [sp, #28]
    497e:	1c22      	adds	r2, r4, #0
    4980:	1c2b      	adds	r3, r5, #0
    4982:	f001 fbc1 	bl	6108 <__d2b>
    4986:	007e      	lsls	r6, r7, #1
    4988:	900b      	str	r0, [sp, #44]	; 0x2c
    498a:	0d76      	lsrs	r6, r6, #21
    498c:	d00a      	beq.n	49a4 <_dtoa_r+0xe6>
    498e:	4ba1      	ldr	r3, [pc, #644]	; (4c14 <_dtoa_r+0x356>)
    4990:	0329      	lsls	r1, r5, #12
    4992:	4da1      	ldr	r5, [pc, #644]	; (4c18 <_dtoa_r+0x35a>)
    4994:	1c20      	adds	r0, r4, #0
    4996:	2200      	movs	r2, #0
    4998:	0b0c      	lsrs	r4, r1, #12
    499a:	1c19      	adds	r1, r3, #0
    499c:	4321      	orrs	r1, r4
    499e:	1976      	adds	r6, r6, r5
    49a0:	9219      	str	r2, [sp, #100]	; 0x64
    49a2:	e01a      	b.n	49da <_dtoa_r+0x11c>
    49a4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    49a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    49a8:	4d9c      	ldr	r5, [pc, #624]	; (4c1c <_dtoa_r+0x35e>)
    49aa:	18e6      	adds	r6, r4, r3
    49ac:	42ae      	cmp	r6, r5
    49ae:	db09      	blt.n	49c4 <_dtoa_r+0x106>
    49b0:	499b      	ldr	r1, [pc, #620]	; (4c20 <_dtoa_r+0x362>)
    49b2:	9b08      	ldr	r3, [sp, #32]
    49b4:	4d9b      	ldr	r5, [pc, #620]	; (4c24 <_dtoa_r+0x366>)
    49b6:	1874      	adds	r4, r6, r1
    49b8:	40e3      	lsrs	r3, r4
    49ba:	1baa      	subs	r2, r5, r6
    49bc:	1c18      	adds	r0, r3, #0
    49be:	4097      	lsls	r7, r2
    49c0:	4338      	orrs	r0, r7
    49c2:	e003      	b.n	49cc <_dtoa_r+0x10e>
    49c4:	4f98      	ldr	r7, [pc, #608]	; (4c28 <_dtoa_r+0x36a>)
    49c6:	9808      	ldr	r0, [sp, #32]
    49c8:	1bba      	subs	r2, r7, r6
    49ca:	4090      	lsls	r0, r2
    49cc:	f004 f9e4 	bl	8d98 <__aeabi_ui2d>
    49d0:	4c96      	ldr	r4, [pc, #600]	; (4c2c <_dtoa_r+0x36e>)
    49d2:	2501      	movs	r5, #1
    49d4:	1909      	adds	r1, r1, r4
    49d6:	3e01      	subs	r6, #1
    49d8:	9519      	str	r5, [sp, #100]	; 0x64
    49da:	4a81      	ldr	r2, [pc, #516]	; (4be0 <_dtoa_r+0x322>)
    49dc:	4b81      	ldr	r3, [pc, #516]	; (4be4 <_dtoa_r+0x326>)
    49de:	f003 fdeb 	bl	85b8 <__aeabi_dsub>
    49e2:	4a81      	ldr	r2, [pc, #516]	; (4be8 <_dtoa_r+0x32a>)
    49e4:	4b81      	ldr	r3, [pc, #516]	; (4bec <_dtoa_r+0x32e>)
    49e6:	f003 fb75 	bl	80d4 <__aeabi_dmul>
    49ea:	4a81      	ldr	r2, [pc, #516]	; (4bf0 <_dtoa_r+0x332>)
    49ec:	4b81      	ldr	r3, [pc, #516]	; (4bf4 <_dtoa_r+0x336>)
    49ee:	f002 fbc7 	bl	7180 <__aeabi_dadd>
    49f2:	1c07      	adds	r7, r0, #0
    49f4:	1c30      	adds	r0, r6, #0
    49f6:	1c0c      	adds	r4, r1, #0
    49f8:	f004 f994 	bl	8d24 <__aeabi_i2d>
    49fc:	4a7e      	ldr	r2, [pc, #504]	; (4bf8 <_dtoa_r+0x33a>)
    49fe:	4b7f      	ldr	r3, [pc, #508]	; (4bfc <_dtoa_r+0x33e>)
    4a00:	f003 fb68 	bl	80d4 <__aeabi_dmul>
    4a04:	1c02      	adds	r2, r0, #0
    4a06:	1c0b      	adds	r3, r1, #0
    4a08:	1c38      	adds	r0, r7, #0
    4a0a:	1c21      	adds	r1, r4, #0
    4a0c:	f002 fbb8 	bl	7180 <__aeabi_dadd>
    4a10:	1c07      	adds	r7, r0, #0
    4a12:	1c0d      	adds	r5, r1, #0
    4a14:	f004 f952 	bl	8cbc <__aeabi_d2iz>
    4a18:	4b70      	ldr	r3, [pc, #448]	; (4bdc <_dtoa_r+0x31e>)
    4a1a:	4a6f      	ldr	r2, [pc, #444]	; (4bd8 <_dtoa_r+0x31a>)
    4a1c:	9006      	str	r0, [sp, #24]
    4a1e:	1c29      	adds	r1, r5, #0
    4a20:	1c38      	adds	r0, r7, #0
    4a22:	f002 fb85 	bl	7130 <__aeabi_dcmplt>
    4a26:	2800      	cmp	r0, #0
    4a28:	d00d      	beq.n	4a46 <_dtoa_r+0x188>
    4a2a:	9806      	ldr	r0, [sp, #24]
    4a2c:	f004 f97a 	bl	8d24 <__aeabi_i2d>
    4a30:	1c0b      	adds	r3, r1, #0
    4a32:	1c02      	adds	r2, r0, #0
    4a34:	1c29      	adds	r1, r5, #0
    4a36:	1c38      	adds	r0, r7, #0
    4a38:	f002 fb74 	bl	7124 <__aeabi_dcmpeq>
    4a3c:	4241      	negs	r1, r0
    4a3e:	4141      	adcs	r1, r0
    4a40:	9806      	ldr	r0, [sp, #24]
    4a42:	1a43      	subs	r3, r0, r1
    4a44:	9306      	str	r3, [sp, #24]
    4a46:	9c06      	ldr	r4, [sp, #24]
    4a48:	2201      	movs	r2, #1
    4a4a:	9218      	str	r2, [sp, #96]	; 0x60
    4a4c:	2c16      	cmp	r4, #22
    4a4e:	d811      	bhi.n	4a74 <_dtoa_r+0x1b6>
    4a50:	4d77      	ldr	r5, [pc, #476]	; (4c30 <_dtoa_r+0x372>)
    4a52:	00e7      	lsls	r7, r4, #3
    4a54:	19e9      	adds	r1, r5, r7
    4a56:	6808      	ldr	r0, [r1, #0]
    4a58:	6849      	ldr	r1, [r1, #4]
    4a5a:	9a08      	ldr	r2, [sp, #32]
    4a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4a5e:	f002 fb7b 	bl	7158 <__aeabi_dcmpgt>
    4a62:	2800      	cmp	r0, #0
    4a64:	d005      	beq.n	4a72 <_dtoa_r+0x1b4>
    4a66:	9806      	ldr	r0, [sp, #24]
    4a68:	2300      	movs	r3, #0
    4a6a:	3801      	subs	r0, #1
    4a6c:	9006      	str	r0, [sp, #24]
    4a6e:	9318      	str	r3, [sp, #96]	; 0x60
    4a70:	e000      	b.n	4a74 <_dtoa_r+0x1b6>
    4a72:	9018      	str	r0, [sp, #96]	; 0x60
    4a74:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    4a76:	1b96      	subs	r6, r2, r6
    4a78:	3e01      	subs	r6, #1
    4a7a:	d504      	bpl.n	4a86 <_dtoa_r+0x1c8>
    4a7c:	4274      	negs	r4, r6
    4a7e:	2700      	movs	r7, #0
    4a80:	9404      	str	r4, [sp, #16]
    4a82:	970d      	str	r7, [sp, #52]	; 0x34
    4a84:	e002      	b.n	4a8c <_dtoa_r+0x1ce>
    4a86:	2500      	movs	r5, #0
    4a88:	960d      	str	r6, [sp, #52]	; 0x34
    4a8a:	9504      	str	r5, [sp, #16]
    4a8c:	9906      	ldr	r1, [sp, #24]
    4a8e:	2900      	cmp	r1, #0
    4a90:	db06      	blt.n	4aa0 <_dtoa_r+0x1e2>
    4a92:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4a94:	9115      	str	r1, [sp, #84]	; 0x54
    4a96:	187d      	adds	r5, r7, r1
    4a98:	2100      	movs	r1, #0
    4a9a:	950d      	str	r5, [sp, #52]	; 0x34
    4a9c:	910f      	str	r1, [sp, #60]	; 0x3c
    4a9e:	e007      	b.n	4ab0 <_dtoa_r+0x1f2>
    4aa0:	9804      	ldr	r0, [sp, #16]
    4aa2:	9b06      	ldr	r3, [sp, #24]
    4aa4:	2400      	movs	r4, #0
    4aa6:	1ac2      	subs	r2, r0, r3
    4aa8:	425e      	negs	r6, r3
    4aaa:	9204      	str	r2, [sp, #16]
    4aac:	960f      	str	r6, [sp, #60]	; 0x3c
    4aae:	9415      	str	r4, [sp, #84]	; 0x54
    4ab0:	9822      	ldr	r0, [sp, #136]	; 0x88
    4ab2:	2401      	movs	r4, #1
    4ab4:	2809      	cmp	r0, #9
    4ab6:	d826      	bhi.n	4b06 <_dtoa_r+0x248>
    4ab8:	2805      	cmp	r0, #5
    4aba:	dd02      	ble.n	4ac2 <_dtoa_r+0x204>
    4abc:	3804      	subs	r0, #4
    4abe:	9022      	str	r0, [sp, #136]	; 0x88
    4ac0:	2400      	movs	r4, #0
    4ac2:	9822      	ldr	r0, [sp, #136]	; 0x88
    4ac4:	3802      	subs	r0, #2
    4ac6:	2803      	cmp	r0, #3
    4ac8:	d825      	bhi.n	4b16 <_dtoa_r+0x258>
    4aca:	f002 faa7 	bl	701c <__gnu_thumb1_case_uqi>
    4ace:	0f06      	.short	0x0f06
    4ad0:	0402      	.short	0x0402
    4ad2:	2201      	movs	r2, #1
    4ad4:	e002      	b.n	4adc <_dtoa_r+0x21e>
    4ad6:	2301      	movs	r3, #1
    4ad8:	e009      	b.n	4aee <_dtoa_r+0x230>
    4ada:	2200      	movs	r2, #0
    4adc:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    4ade:	9214      	str	r2, [sp, #80]	; 0x50
    4ae0:	2e00      	cmp	r6, #0
    4ae2:	dd21      	ble.n	4b28 <_dtoa_r+0x26a>
    4ae4:	960e      	str	r6, [sp, #56]	; 0x38
    4ae6:	960c      	str	r6, [sp, #48]	; 0x30
    4ae8:	1c33      	adds	r3, r6, #0
    4aea:	e022      	b.n	4b32 <_dtoa_r+0x274>
    4aec:	2300      	movs	r3, #0
    4aee:	9d23      	ldr	r5, [sp, #140]	; 0x8c
    4af0:	9906      	ldr	r1, [sp, #24]
    4af2:	9314      	str	r3, [sp, #80]	; 0x50
    4af4:	1868      	adds	r0, r5, r1
    4af6:	1c03      	adds	r3, r0, #0
    4af8:	3301      	adds	r3, #1
    4afa:	900e      	str	r0, [sp, #56]	; 0x38
    4afc:	930c      	str	r3, [sp, #48]	; 0x30
    4afe:	2b00      	cmp	r3, #0
    4b00:	dc17      	bgt.n	4b32 <_dtoa_r+0x274>
    4b02:	2301      	movs	r3, #1
    4b04:	e015      	b.n	4b32 <_dtoa_r+0x274>
    4b06:	4261      	negs	r1, r4
    4b08:	2700      	movs	r7, #0
    4b0a:	9722      	str	r7, [sp, #136]	; 0x88
    4b0c:	9414      	str	r4, [sp, #80]	; 0x50
    4b0e:	910e      	str	r1, [sp, #56]	; 0x38
    4b10:	910c      	str	r1, [sp, #48]	; 0x30
    4b12:	2312      	movs	r3, #18
    4b14:	e006      	b.n	4b24 <_dtoa_r+0x266>
    4b16:	2301      	movs	r3, #1
    4b18:	425e      	negs	r6, r3
    4b1a:	9314      	str	r3, [sp, #80]	; 0x50
    4b1c:	960e      	str	r6, [sp, #56]	; 0x38
    4b1e:	960c      	str	r6, [sp, #48]	; 0x30
    4b20:	2312      	movs	r3, #18
    4b22:	2700      	movs	r7, #0
    4b24:	9723      	str	r7, [sp, #140]	; 0x8c
    4b26:	e004      	b.n	4b32 <_dtoa_r+0x274>
    4b28:	2701      	movs	r7, #1
    4b2a:	970e      	str	r7, [sp, #56]	; 0x38
    4b2c:	970c      	str	r7, [sp, #48]	; 0x30
    4b2e:	1c3b      	adds	r3, r7, #0
    4b30:	9723      	str	r7, [sp, #140]	; 0x8c
    4b32:	9a07      	ldr	r2, [sp, #28]
    4b34:	2000      	movs	r0, #0
    4b36:	6450      	str	r0, [r2, #68]	; 0x44
    4b38:	2504      	movs	r5, #4
    4b3a:	1c2e      	adds	r6, r5, #0
    4b3c:	9f07      	ldr	r7, [sp, #28]
    4b3e:	3614      	adds	r6, #20
    4b40:	6c79      	ldr	r1, [r7, #68]	; 0x44
    4b42:	429e      	cmp	r6, r3
    4b44:	d804      	bhi.n	4b50 <_dtoa_r+0x292>
    4b46:	9f07      	ldr	r7, [sp, #28]
    4b48:	3101      	adds	r1, #1
    4b4a:	6479      	str	r1, [r7, #68]	; 0x44
    4b4c:	006d      	lsls	r5, r5, #1
    4b4e:	e7f4      	b.n	4b3a <_dtoa_r+0x27c>
    4b50:	1c38      	adds	r0, r7, #0
    4b52:	f000 ffc5 	bl	5ae0 <_Balloc>
    4b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b58:	900a      	str	r0, [sp, #40]	; 0x28
    4b5a:	6438      	str	r0, [r7, #64]	; 0x40
    4b5c:	2b0e      	cmp	r3, #14
    4b5e:	d900      	bls.n	4b62 <_dtoa_r+0x2a4>
    4b60:	e17f      	b.n	4e62 <_dtoa_r+0x5a4>
    4b62:	2c00      	cmp	r4, #0
    4b64:	d100      	bne.n	4b68 <_dtoa_r+0x2aa>
    4b66:	e17c      	b.n	4e62 <_dtoa_r+0x5a4>
    4b68:	9c08      	ldr	r4, [sp, #32]
    4b6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4b6c:	9416      	str	r4, [sp, #88]	; 0x58
    4b6e:	9517      	str	r5, [sp, #92]	; 0x5c
    4b70:	9d06      	ldr	r5, [sp, #24]
    4b72:	2d00      	cmp	r5, #0
    4b74:	dd60      	ble.n	4c38 <_dtoa_r+0x37a>
    4b76:	1c29      	adds	r1, r5, #0
    4b78:	270f      	movs	r7, #15
    4b7a:	4039      	ands	r1, r7
    4b7c:	4a2c      	ldr	r2, [pc, #176]	; (4c30 <_dtoa_r+0x372>)
    4b7e:	9c06      	ldr	r4, [sp, #24]
    4b80:	00c8      	lsls	r0, r1, #3
    4b82:	1813      	adds	r3, r2, r0
    4b84:	681d      	ldr	r5, [r3, #0]
    4b86:	685e      	ldr	r6, [r3, #4]
    4b88:	9510      	str	r5, [sp, #64]	; 0x40
    4b8a:	9611      	str	r6, [sp, #68]	; 0x44
    4b8c:	1126      	asrs	r6, r4, #4
    4b8e:	2502      	movs	r5, #2
    4b90:	4c28      	ldr	r4, [pc, #160]	; (4c34 <_dtoa_r+0x376>)
    4b92:	06f0      	lsls	r0, r6, #27
    4b94:	d517      	bpl.n	4bc6 <_dtoa_r+0x308>
    4b96:	9816      	ldr	r0, [sp, #88]	; 0x58
    4b98:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4b9a:	6a22      	ldr	r2, [r4, #32]
    4b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4b9e:	f002 fe9f 	bl	78e0 <__aeabi_ddiv>
    4ba2:	403e      	ands	r6, r7
    4ba4:	9008      	str	r0, [sp, #32]
    4ba6:	9109      	str	r1, [sp, #36]	; 0x24
    4ba8:	2503      	movs	r5, #3
    4baa:	e00c      	b.n	4bc6 <_dtoa_r+0x308>
    4bac:	07f1      	lsls	r1, r6, #31
    4bae:	d508      	bpl.n	4bc2 <_dtoa_r+0x304>
    4bb0:	9810      	ldr	r0, [sp, #64]	; 0x40
    4bb2:	9911      	ldr	r1, [sp, #68]	; 0x44
    4bb4:	6822      	ldr	r2, [r4, #0]
    4bb6:	6863      	ldr	r3, [r4, #4]
    4bb8:	f003 fa8c 	bl	80d4 <__aeabi_dmul>
    4bbc:	9010      	str	r0, [sp, #64]	; 0x40
    4bbe:	9111      	str	r1, [sp, #68]	; 0x44
    4bc0:	3501      	adds	r5, #1
    4bc2:	1076      	asrs	r6, r6, #1
    4bc4:	3408      	adds	r4, #8
    4bc6:	2e00      	cmp	r6, #0
    4bc8:	d1f0      	bne.n	4bac <_dtoa_r+0x2ee>
    4bca:	9808      	ldr	r0, [sp, #32]
    4bcc:	9909      	ldr	r1, [sp, #36]	; 0x24
    4bce:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4bd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4bd2:	f002 fe85 	bl	78e0 <__aeabi_ddiv>
    4bd6:	e04d      	b.n	4c74 <_dtoa_r+0x3b6>
	...
    4be4:	3ff80000 	.word	0x3ff80000
    4be8:	636f4361 	.word	0x636f4361
    4bec:	3fd287a7 	.word	0x3fd287a7
    4bf0:	8b60c8b3 	.word	0x8b60c8b3
    4bf4:	3fc68a28 	.word	0x3fc68a28
    4bf8:	509f79fb 	.word	0x509f79fb
    4bfc:	3fd34413 	.word	0x3fd34413
    4c00:	7ff00000 	.word	0x7ff00000
    4c04:	0000270f 	.word	0x0000270f
    4c08:	00009b77 	.word	0x00009b77
    4c0c:	00009b6e 	.word	0x00009b6e
    4c10:	00009b6d 	.word	0x00009b6d
    4c14:	3ff00000 	.word	0x3ff00000
    4c18:	fffffc01 	.word	0xfffffc01
    4c1c:	fffffbef 	.word	0xfffffbef
    4c20:	00000412 	.word	0x00000412
    4c24:	fffffc0e 	.word	0xfffffc0e
    4c28:	fffffbee 	.word	0xfffffbee
    4c2c:	fe100000 	.word	0xfe100000
    4c30:	00009b98 	.word	0x00009b98
    4c34:	00009c88 	.word	0x00009c88
    4c38:	9906      	ldr	r1, [sp, #24]
    4c3a:	2502      	movs	r5, #2
    4c3c:	424e      	negs	r6, r1
    4c3e:	2e00      	cmp	r6, #0
    4c40:	d01a      	beq.n	4c78 <_dtoa_r+0x3ba>
    4c42:	200f      	movs	r0, #15
    4c44:	4030      	ands	r0, r6
    4c46:	4ace      	ldr	r2, [pc, #824]	; (4f80 <_dtoa_r+0x6c2>)
    4c48:	00c7      	lsls	r7, r0, #3
    4c4a:	19d3      	adds	r3, r2, r7
    4c4c:	9816      	ldr	r0, [sp, #88]	; 0x58
    4c4e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4c50:	681a      	ldr	r2, [r3, #0]
    4c52:	685b      	ldr	r3, [r3, #4]
    4c54:	f003 fa3e 	bl	80d4 <__aeabi_dmul>
    4c58:	4cca      	ldr	r4, [pc, #808]	; (4f84 <_dtoa_r+0x6c6>)
    4c5a:	1136      	asrs	r6, r6, #4
    4c5c:	2e00      	cmp	r6, #0
    4c5e:	d009      	beq.n	4c74 <_dtoa_r+0x3b6>
    4c60:	07f2      	lsls	r2, r6, #31
    4c62:	d504      	bpl.n	4c6e <_dtoa_r+0x3b0>
    4c64:	6822      	ldr	r2, [r4, #0]
    4c66:	6863      	ldr	r3, [r4, #4]
    4c68:	3501      	adds	r5, #1
    4c6a:	f003 fa33 	bl	80d4 <__aeabi_dmul>
    4c6e:	1076      	asrs	r6, r6, #1
    4c70:	3408      	adds	r4, #8
    4c72:	e7f3      	b.n	4c5c <_dtoa_r+0x39e>
    4c74:	9008      	str	r0, [sp, #32]
    4c76:	9109      	str	r1, [sp, #36]	; 0x24
    4c78:	9e18      	ldr	r6, [sp, #96]	; 0x60
    4c7a:	2e00      	cmp	r6, #0
    4c7c:	d01e      	beq.n	4cbc <_dtoa_r+0x3fe>
    4c7e:	9e08      	ldr	r6, [sp, #32]
    4c80:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4c82:	4bb6      	ldr	r3, [pc, #728]	; (4f5c <_dtoa_r+0x69e>)
    4c84:	4ab4      	ldr	r2, [pc, #720]	; (4f58 <_dtoa_r+0x69a>)
    4c86:	1c30      	adds	r0, r6, #0
    4c88:	1c39      	adds	r1, r7, #0
    4c8a:	f002 fa51 	bl	7130 <__aeabi_dcmplt>
    4c8e:	2800      	cmp	r0, #0
    4c90:	d014      	beq.n	4cbc <_dtoa_r+0x3fe>
    4c92:	990c      	ldr	r1, [sp, #48]	; 0x30
    4c94:	2900      	cmp	r1, #0
    4c96:	d011      	beq.n	4cbc <_dtoa_r+0x3fe>
    4c98:	980e      	ldr	r0, [sp, #56]	; 0x38
    4c9a:	2800      	cmp	r0, #0
    4c9c:	dc00      	bgt.n	4ca0 <_dtoa_r+0x3e2>
    4c9e:	e0dc      	b.n	4e5a <_dtoa_r+0x59c>
    4ca0:	9a06      	ldr	r2, [sp, #24]
    4ca2:	1c30      	adds	r0, r6, #0
    4ca4:	3a01      	subs	r2, #1
    4ca6:	9210      	str	r2, [sp, #64]	; 0x40
    4ca8:	1c39      	adds	r1, r7, #0
    4caa:	4aad      	ldr	r2, [pc, #692]	; (4f60 <_dtoa_r+0x6a2>)
    4cac:	4bad      	ldr	r3, [pc, #692]	; (4f64 <_dtoa_r+0x6a6>)
    4cae:	f003 fa11 	bl	80d4 <__aeabi_dmul>
    4cb2:	3501      	adds	r5, #1
    4cb4:	9008      	str	r0, [sp, #32]
    4cb6:	9109      	str	r1, [sp, #36]	; 0x24
    4cb8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4cba:	e002      	b.n	4cc2 <_dtoa_r+0x404>
    4cbc:	9f06      	ldr	r7, [sp, #24]
    4cbe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    4cc0:	9710      	str	r7, [sp, #64]	; 0x40
    4cc2:	1c28      	adds	r0, r5, #0
    4cc4:	f004 f82e 	bl	8d24 <__aeabi_i2d>
    4cc8:	9a08      	ldr	r2, [sp, #32]
    4cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4ccc:	f003 fa02 	bl	80d4 <__aeabi_dmul>
    4cd0:	4aa5      	ldr	r2, [pc, #660]	; (4f68 <_dtoa_r+0x6aa>)
    4cd2:	4ba6      	ldr	r3, [pc, #664]	; (4f6c <_dtoa_r+0x6ae>)
    4cd4:	f002 fa54 	bl	7180 <__aeabi_dadd>
    4cd8:	4dab      	ldr	r5, [pc, #684]	; (4f88 <_dtoa_r+0x6ca>)
    4cda:	1c04      	adds	r4, r0, #0
    4cdc:	194f      	adds	r7, r1, r5
    4cde:	1c3d      	adds	r5, r7, #0
    4ce0:	2e00      	cmp	r6, #0
    4ce2:	d11a      	bne.n	4d1a <_dtoa_r+0x45c>
    4ce4:	4aa2      	ldr	r2, [pc, #648]	; (4f70 <_dtoa_r+0x6b2>)
    4ce6:	4ba3      	ldr	r3, [pc, #652]	; (4f74 <_dtoa_r+0x6b6>)
    4ce8:	9808      	ldr	r0, [sp, #32]
    4cea:	9909      	ldr	r1, [sp, #36]	; 0x24
    4cec:	f003 fc64 	bl	85b8 <__aeabi_dsub>
    4cf0:	1c22      	adds	r2, r4, #0
    4cf2:	1c3b      	adds	r3, r7, #0
    4cf4:	9008      	str	r0, [sp, #32]
    4cf6:	9109      	str	r1, [sp, #36]	; 0x24
    4cf8:	f002 fa2e 	bl	7158 <__aeabi_dcmpgt>
    4cfc:	2800      	cmp	r0, #0
    4cfe:	d000      	beq.n	4d02 <_dtoa_r+0x444>
    4d00:	e258      	b.n	51b4 <_dtoa_r+0x8f6>
    4d02:	1c22      	adds	r2, r4, #0
    4d04:	2480      	movs	r4, #128	; 0x80
    4d06:	0625      	lsls	r5, r4, #24
    4d08:	9808      	ldr	r0, [sp, #32]
    4d0a:	9909      	ldr	r1, [sp, #36]	; 0x24
    4d0c:	197b      	adds	r3, r7, r5
    4d0e:	f002 fa0f 	bl	7130 <__aeabi_dcmplt>
    4d12:	2800      	cmp	r0, #0
    4d14:	d000      	beq.n	4d18 <_dtoa_r+0x45a>
    4d16:	e244      	b.n	51a2 <_dtoa_r+0x8e4>
    4d18:	e09f      	b.n	4e5a <_dtoa_r+0x59c>
    4d1a:	4999      	ldr	r1, [pc, #612]	; (4f80 <_dtoa_r+0x6c2>)
    4d1c:	1e72      	subs	r2, r6, #1
    4d1e:	9814      	ldr	r0, [sp, #80]	; 0x50
    4d20:	00d3      	lsls	r3, r2, #3
    4d22:	18cf      	adds	r7, r1, r3
    4d24:	2800      	cmp	r0, #0
    4d26:	d04a      	beq.n	4dbe <_dtoa_r+0x500>
    4d28:	683a      	ldr	r2, [r7, #0]
    4d2a:	687b      	ldr	r3, [r7, #4]
    4d2c:	4892      	ldr	r0, [pc, #584]	; (4f78 <_dtoa_r+0x6ba>)
    4d2e:	4993      	ldr	r1, [pc, #588]	; (4f7c <_dtoa_r+0x6be>)
    4d30:	f002 fdd6 	bl	78e0 <__aeabi_ddiv>
    4d34:	1c22      	adds	r2, r4, #0
    4d36:	1c2b      	adds	r3, r5, #0
    4d38:	f003 fc3e 	bl	85b8 <__aeabi_dsub>
    4d3c:	9c08      	ldr	r4, [sp, #32]
    4d3e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4d40:	9012      	str	r0, [sp, #72]	; 0x48
    4d42:	9113      	str	r1, [sp, #76]	; 0x4c
    4d44:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    4d46:	1c29      	adds	r1, r5, #0
    4d48:	1c20      	adds	r0, r4, #0
    4d4a:	f003 ffb7 	bl	8cbc <__aeabi_d2iz>
    4d4e:	9008      	str	r0, [sp, #32]
    4d50:	f003 ffe8 	bl	8d24 <__aeabi_i2d>
    4d54:	1c02      	adds	r2, r0, #0
    4d56:	1c0b      	adds	r3, r1, #0
    4d58:	1c20      	adds	r0, r4, #0
    4d5a:	1c29      	adds	r1, r5, #0
    4d5c:	f003 fc2c 	bl	85b8 <__aeabi_dsub>
    4d60:	9a08      	ldr	r2, [sp, #32]
    4d62:	1c04      	adds	r4, r0, #0
    4d64:	3230      	adds	r2, #48	; 0x30
    4d66:	703a      	strb	r2, [r7, #0]
    4d68:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4d6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4d6c:	1c0d      	adds	r5, r1, #0
    4d6e:	3701      	adds	r7, #1
    4d70:	f002 f9de 	bl	7130 <__aeabi_dcmplt>
    4d74:	2800      	cmp	r0, #0
    4d76:	d000      	beq.n	4d7a <_dtoa_r+0x4bc>
    4d78:	e33e      	b.n	53f8 <_dtoa_r+0xb3a>
    4d7a:	1c22      	adds	r2, r4, #0
    4d7c:	1c2b      	adds	r3, r5, #0
    4d7e:	4977      	ldr	r1, [pc, #476]	; (4f5c <_dtoa_r+0x69e>)
    4d80:	4875      	ldr	r0, [pc, #468]	; (4f58 <_dtoa_r+0x69a>)
    4d82:	f003 fc19 	bl	85b8 <__aeabi_dsub>
    4d86:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4d88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4d8a:	f002 f9d1 	bl	7130 <__aeabi_dcmplt>
    4d8e:	2800      	cmp	r0, #0
    4d90:	d000      	beq.n	4d94 <_dtoa_r+0x4d6>
    4d92:	e0c8      	b.n	4f26 <_dtoa_r+0x668>
    4d94:	980a      	ldr	r0, [sp, #40]	; 0x28
    4d96:	1a3b      	subs	r3, r7, r0
    4d98:	42b3      	cmp	r3, r6
    4d9a:	da5e      	bge.n	4e5a <_dtoa_r+0x59c>
    4d9c:	9812      	ldr	r0, [sp, #72]	; 0x48
    4d9e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4da0:	4a6f      	ldr	r2, [pc, #444]	; (4f60 <_dtoa_r+0x6a2>)
    4da2:	4b70      	ldr	r3, [pc, #448]	; (4f64 <_dtoa_r+0x6a6>)
    4da4:	f003 f996 	bl	80d4 <__aeabi_dmul>
    4da8:	4a6d      	ldr	r2, [pc, #436]	; (4f60 <_dtoa_r+0x6a2>)
    4daa:	4b6e      	ldr	r3, [pc, #440]	; (4f64 <_dtoa_r+0x6a6>)
    4dac:	9012      	str	r0, [sp, #72]	; 0x48
    4dae:	9113      	str	r1, [sp, #76]	; 0x4c
    4db0:	1c20      	adds	r0, r4, #0
    4db2:	1c29      	adds	r1, r5, #0
    4db4:	f003 f98e 	bl	80d4 <__aeabi_dmul>
    4db8:	1c04      	adds	r4, r0, #0
    4dba:	1c0d      	adds	r5, r1, #0
    4dbc:	e7c3      	b.n	4d46 <_dtoa_r+0x488>
    4dbe:	6838      	ldr	r0, [r7, #0]
    4dc0:	6879      	ldr	r1, [r7, #4]
    4dc2:	1c22      	adds	r2, r4, #0
    4dc4:	1c2b      	adds	r3, r5, #0
    4dc6:	f003 f985 	bl	80d4 <__aeabi_dmul>
    4dca:	9c08      	ldr	r4, [sp, #32]
    4dcc:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4dce:	9012      	str	r0, [sp, #72]	; 0x48
    4dd0:	9113      	str	r1, [sp, #76]	; 0x4c
    4dd2:	990a      	ldr	r1, [sp, #40]	; 0x28
    4dd4:	198e      	adds	r6, r1, r6
    4dd6:	9608      	str	r6, [sp, #32]
    4dd8:	1c0f      	adds	r7, r1, #0
    4dda:	1c29      	adds	r1, r5, #0
    4ddc:	1c20      	adds	r0, r4, #0
    4dde:	f003 ff6d 	bl	8cbc <__aeabi_d2iz>
    4de2:	1c06      	adds	r6, r0, #0
    4de4:	f003 ff9e 	bl	8d24 <__aeabi_i2d>
    4de8:	1c02      	adds	r2, r0, #0
    4dea:	1c0b      	adds	r3, r1, #0
    4dec:	1c20      	adds	r0, r4, #0
    4dee:	1c29      	adds	r1, r5, #0
    4df0:	f003 fbe2 	bl	85b8 <__aeabi_dsub>
    4df4:	3630      	adds	r6, #48	; 0x30
    4df6:	9a08      	ldr	r2, [sp, #32]
    4df8:	703e      	strb	r6, [r7, #0]
    4dfa:	3701      	adds	r7, #1
    4dfc:	1c04      	adds	r4, r0, #0
    4dfe:	1c0d      	adds	r5, r1, #0
    4e00:	4297      	cmp	r7, r2
    4e02:	d123      	bne.n	4e4c <_dtoa_r+0x58e>
    4e04:	4a5c      	ldr	r2, [pc, #368]	; (4f78 <_dtoa_r+0x6ba>)
    4e06:	4b5d      	ldr	r3, [pc, #372]	; (4f7c <_dtoa_r+0x6be>)
    4e08:	9812      	ldr	r0, [sp, #72]	; 0x48
    4e0a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4e0c:	f002 f9b8 	bl	7180 <__aeabi_dadd>
    4e10:	1c02      	adds	r2, r0, #0
    4e12:	1c0b      	adds	r3, r1, #0
    4e14:	1c20      	adds	r0, r4, #0
    4e16:	1c29      	adds	r1, r5, #0
    4e18:	f002 f99e 	bl	7158 <__aeabi_dcmpgt>
    4e1c:	2800      	cmp	r0, #0
    4e1e:	d000      	beq.n	4e22 <_dtoa_r+0x564>
    4e20:	e084      	b.n	4f2c <_dtoa_r+0x66e>
    4e22:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4e24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4e26:	4854      	ldr	r0, [pc, #336]	; (4f78 <_dtoa_r+0x6ba>)
    4e28:	4954      	ldr	r1, [pc, #336]	; (4f7c <_dtoa_r+0x6be>)
    4e2a:	f003 fbc5 	bl	85b8 <__aeabi_dsub>
    4e2e:	1c02      	adds	r2, r0, #0
    4e30:	1c0b      	adds	r3, r1, #0
    4e32:	1c20      	adds	r0, r4, #0
    4e34:	1c29      	adds	r1, r5, #0
    4e36:	f002 f97b 	bl	7130 <__aeabi_dcmplt>
    4e3a:	2800      	cmp	r0, #0
    4e3c:	d00d      	beq.n	4e5a <_dtoa_r+0x59c>
    4e3e:	1e78      	subs	r0, r7, #1
    4e40:	7803      	ldrb	r3, [r0, #0]
    4e42:	2b30      	cmp	r3, #48	; 0x30
    4e44:	d000      	beq.n	4e48 <_dtoa_r+0x58a>
    4e46:	e2d7      	b.n	53f8 <_dtoa_r+0xb3a>
    4e48:	1c07      	adds	r7, r0, #0
    4e4a:	e7f8      	b.n	4e3e <_dtoa_r+0x580>
    4e4c:	4a44      	ldr	r2, [pc, #272]	; (4f60 <_dtoa_r+0x6a2>)
    4e4e:	4b45      	ldr	r3, [pc, #276]	; (4f64 <_dtoa_r+0x6a6>)
    4e50:	f003 f940 	bl	80d4 <__aeabi_dmul>
    4e54:	1c04      	adds	r4, r0, #0
    4e56:	1c0d      	adds	r5, r1, #0
    4e58:	e7bf      	b.n	4dda <_dtoa_r+0x51c>
    4e5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    4e5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4e5e:	9208      	str	r2, [sp, #32]
    4e60:	9309      	str	r3, [sp, #36]	; 0x24
    4e62:	981b      	ldr	r0, [sp, #108]	; 0x6c
    4e64:	2800      	cmp	r0, #0
    4e66:	da00      	bge.n	4e6a <_dtoa_r+0x5ac>
    4e68:	e09f      	b.n	4faa <_dtoa_r+0x6ec>
    4e6a:	9b06      	ldr	r3, [sp, #24]
    4e6c:	2b0e      	cmp	r3, #14
    4e6e:	dd00      	ble.n	4e72 <_dtoa_r+0x5b4>
    4e70:	e09b      	b.n	4faa <_dtoa_r+0x6ec>
    4e72:	4e43      	ldr	r6, [pc, #268]	; (4f80 <_dtoa_r+0x6c2>)
    4e74:	00dd      	lsls	r5, r3, #3
    4e76:	1977      	adds	r7, r6, r5
    4e78:	6839      	ldr	r1, [r7, #0]
    4e7a:	687a      	ldr	r2, [r7, #4]
    4e7c:	9104      	str	r1, [sp, #16]
    4e7e:	9205      	str	r2, [sp, #20]
    4e80:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    4e82:	2a00      	cmp	r2, #0
    4e84:	da14      	bge.n	4eb0 <_dtoa_r+0x5f2>
    4e86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e88:	2b00      	cmp	r3, #0
    4e8a:	dc11      	bgt.n	4eb0 <_dtoa_r+0x5f2>
    4e8c:	d000      	beq.n	4e90 <_dtoa_r+0x5d2>
    4e8e:	e18a      	b.n	51a6 <_dtoa_r+0x8e8>
    4e90:	4a37      	ldr	r2, [pc, #220]	; (4f70 <_dtoa_r+0x6b2>)
    4e92:	4b38      	ldr	r3, [pc, #224]	; (4f74 <_dtoa_r+0x6b6>)
    4e94:	9804      	ldr	r0, [sp, #16]
    4e96:	9905      	ldr	r1, [sp, #20]
    4e98:	f003 f91c 	bl	80d4 <__aeabi_dmul>
    4e9c:	9a08      	ldr	r2, [sp, #32]
    4e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4ea0:	f002 f964 	bl	716c <__aeabi_dcmpge>
    4ea4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4ea6:	1c2e      	adds	r6, r5, #0
    4ea8:	2800      	cmp	r0, #0
    4eaa:	d000      	beq.n	4eae <_dtoa_r+0x5f0>
    4eac:	e17d      	b.n	51aa <_dtoa_r+0x8ec>
    4eae:	e184      	b.n	51ba <_dtoa_r+0x8fc>
    4eb0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    4eb2:	9c08      	ldr	r4, [sp, #32]
    4eb4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4eb6:	9a04      	ldr	r2, [sp, #16]
    4eb8:	9b05      	ldr	r3, [sp, #20]
    4eba:	1c20      	adds	r0, r4, #0
    4ebc:	1c29      	adds	r1, r5, #0
    4ebe:	f002 fd0f 	bl	78e0 <__aeabi_ddiv>
    4ec2:	f003 fefb 	bl	8cbc <__aeabi_d2iz>
    4ec6:	1c06      	adds	r6, r0, #0
    4ec8:	f003 ff2c 	bl	8d24 <__aeabi_i2d>
    4ecc:	9a04      	ldr	r2, [sp, #16]
    4ece:	9b05      	ldr	r3, [sp, #20]
    4ed0:	f003 f900 	bl	80d4 <__aeabi_dmul>
    4ed4:	1c02      	adds	r2, r0, #0
    4ed6:	1c0b      	adds	r3, r1, #0
    4ed8:	1c20      	adds	r0, r4, #0
    4eda:	1c29      	adds	r1, r5, #0
    4edc:	f003 fb6c 	bl	85b8 <__aeabi_dsub>
    4ee0:	1c02      	adds	r2, r0, #0
    4ee2:	1c30      	adds	r0, r6, #0
    4ee4:	3030      	adds	r0, #48	; 0x30
    4ee6:	1c0b      	adds	r3, r1, #0
    4ee8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4eea:	990c      	ldr	r1, [sp, #48]	; 0x30
    4eec:	7038      	strb	r0, [r7, #0]
    4eee:	3701      	adds	r7, #1
    4ef0:	1b3d      	subs	r5, r7, r4
    4ef2:	1c10      	adds	r0, r2, #0
    4ef4:	428d      	cmp	r5, r1
    4ef6:	d149      	bne.n	4f8c <_dtoa_r+0x6ce>
    4ef8:	1c19      	adds	r1, r3, #0
    4efa:	f002 f941 	bl	7180 <__aeabi_dadd>
    4efe:	9a04      	ldr	r2, [sp, #16]
    4f00:	9b05      	ldr	r3, [sp, #20]
    4f02:	1c04      	adds	r4, r0, #0
    4f04:	1c0d      	adds	r5, r1, #0
    4f06:	f002 f927 	bl	7158 <__aeabi_dcmpgt>
    4f0a:	2800      	cmp	r0, #0
    4f0c:	d112      	bne.n	4f34 <_dtoa_r+0x676>
    4f0e:	1c20      	adds	r0, r4, #0
    4f10:	1c29      	adds	r1, r5, #0
    4f12:	9a04      	ldr	r2, [sp, #16]
    4f14:	9b05      	ldr	r3, [sp, #20]
    4f16:	f002 f905 	bl	7124 <__aeabi_dcmpeq>
    4f1a:	2800      	cmp	r0, #0
    4f1c:	d100      	bne.n	4f20 <_dtoa_r+0x662>
    4f1e:	e26d      	b.n	53fc <_dtoa_r+0xb3e>
    4f20:	07f5      	lsls	r5, r6, #31
    4f22:	d407      	bmi.n	4f34 <_dtoa_r+0x676>
    4f24:	e26a      	b.n	53fc <_dtoa_r+0xb3e>
    4f26:	9e10      	ldr	r6, [sp, #64]	; 0x40
    4f28:	9606      	str	r6, [sp, #24]
    4f2a:	e003      	b.n	4f34 <_dtoa_r+0x676>
    4f2c:	9910      	ldr	r1, [sp, #64]	; 0x40
    4f2e:	9106      	str	r1, [sp, #24]
    4f30:	e000      	b.n	4f34 <_dtoa_r+0x676>
    4f32:	1c1f      	adds	r7, r3, #0
    4f34:	1e7b      	subs	r3, r7, #1
    4f36:	781a      	ldrb	r2, [r3, #0]
    4f38:	2a39      	cmp	r2, #57	; 0x39
    4f3a:	d107      	bne.n	4f4c <_dtoa_r+0x68e>
    4f3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    4f3e:	42b3      	cmp	r3, r6
    4f40:	d1f7      	bne.n	4f32 <_dtoa_r+0x674>
    4f42:	9806      	ldr	r0, [sp, #24]
    4f44:	2130      	movs	r1, #48	; 0x30
    4f46:	3001      	adds	r0, #1
    4f48:	9006      	str	r0, [sp, #24]
    4f4a:	7031      	strb	r1, [r6, #0]
    4f4c:	781c      	ldrb	r4, [r3, #0]
    4f4e:	3401      	adds	r4, #1
    4f50:	701c      	strb	r4, [r3, #0]
    4f52:	e253      	b.n	53fc <_dtoa_r+0xb3e>
    4f54:	46c0      	nop			; (mov r8, r8)
    4f56:	46c0      	nop			; (mov r8, r8)
    4f58:	00000000 	.word	0x00000000
    4f5c:	3ff00000 	.word	0x3ff00000
    4f60:	00000000 	.word	0x00000000
    4f64:	40240000 	.word	0x40240000
    4f68:	00000000 	.word	0x00000000
    4f6c:	401c0000 	.word	0x401c0000
    4f70:	00000000 	.word	0x00000000
    4f74:	40140000 	.word	0x40140000
    4f78:	00000000 	.word	0x00000000
    4f7c:	3fe00000 	.word	0x3fe00000
    4f80:	00009b98 	.word	0x00009b98
    4f84:	00009c88 	.word	0x00009c88
    4f88:	fcc00000 	.word	0xfcc00000
    4f8c:	1c19      	adds	r1, r3, #0
    4f8e:	4bbd      	ldr	r3, [pc, #756]	; (5284 <_dtoa_r+0x9c6>)
    4f90:	4abb      	ldr	r2, [pc, #748]	; (5280 <_dtoa_r+0x9c2>)
    4f92:	f003 f89f 	bl	80d4 <__aeabi_dmul>
    4f96:	4abc      	ldr	r2, [pc, #752]	; (5288 <_dtoa_r+0x9ca>)
    4f98:	4bbc      	ldr	r3, [pc, #752]	; (528c <_dtoa_r+0x9ce>)
    4f9a:	1c04      	adds	r4, r0, #0
    4f9c:	1c0d      	adds	r5, r1, #0
    4f9e:	f002 f8c1 	bl	7124 <__aeabi_dcmpeq>
    4fa2:	2800      	cmp	r0, #0
    4fa4:	d100      	bne.n	4fa8 <_dtoa_r+0x6ea>
    4fa6:	e786      	b.n	4eb6 <_dtoa_r+0x5f8>
    4fa8:	e228      	b.n	53fc <_dtoa_r+0xb3e>
    4faa:	9e14      	ldr	r6, [sp, #80]	; 0x50
    4fac:	2e00      	cmp	r6, #0
    4fae:	d031      	beq.n	5014 <_dtoa_r+0x756>
    4fb0:	9922      	ldr	r1, [sp, #136]	; 0x88
    4fb2:	2901      	cmp	r1, #1
    4fb4:	dc0b      	bgt.n	4fce <_dtoa_r+0x710>
    4fb6:	9d19      	ldr	r5, [sp, #100]	; 0x64
    4fb8:	2d00      	cmp	r5, #0
    4fba:	d002      	beq.n	4fc2 <_dtoa_r+0x704>
    4fbc:	4bb4      	ldr	r3, [pc, #720]	; (5290 <_dtoa_r+0x9d2>)
    4fbe:	18c7      	adds	r7, r0, r3
    4fc0:	e002      	b.n	4fc8 <_dtoa_r+0x70a>
    4fc2:	981a      	ldr	r0, [sp, #104]	; 0x68
    4fc4:	2236      	movs	r2, #54	; 0x36
    4fc6:	1a17      	subs	r7, r2, r0
    4fc8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    4fca:	9c04      	ldr	r4, [sp, #16]
    4fcc:	e016      	b.n	4ffc <_dtoa_r+0x73e>
    4fce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    4fd0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    4fd2:	3f01      	subs	r7, #1
    4fd4:	42bc      	cmp	r4, r7
    4fd6:	db01      	blt.n	4fdc <_dtoa_r+0x71e>
    4fd8:	1be5      	subs	r5, r4, r7
    4fda:	e006      	b.n	4fea <_dtoa_r+0x72c>
    4fdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4fde:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4fe0:	1ab8      	subs	r0, r7, r2
    4fe2:	181e      	adds	r6, r3, r0
    4fe4:	9615      	str	r6, [sp, #84]	; 0x54
    4fe6:	970f      	str	r7, [sp, #60]	; 0x3c
    4fe8:	2500      	movs	r5, #0
    4fea:	990c      	ldr	r1, [sp, #48]	; 0x30
    4fec:	2900      	cmp	r1, #0
    4fee:	da03      	bge.n	4ff8 <_dtoa_r+0x73a>
    4ff0:	9c04      	ldr	r4, [sp, #16]
    4ff2:	2700      	movs	r7, #0
    4ff4:	1a64      	subs	r4, r4, r1
    4ff6:	e001      	b.n	4ffc <_dtoa_r+0x73e>
    4ff8:	9c04      	ldr	r4, [sp, #16]
    4ffa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    4ffc:	9e04      	ldr	r6, [sp, #16]
    4ffe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5000:	19f1      	adds	r1, r6, r7
    5002:	9104      	str	r1, [sp, #16]
    5004:	19d7      	adds	r7, r2, r7
    5006:	9807      	ldr	r0, [sp, #28]
    5008:	2101      	movs	r1, #1
    500a:	970d      	str	r7, [sp, #52]	; 0x34
    500c:	f000 fe5f 	bl	5cce <__i2b>
    5010:	1c06      	adds	r6, r0, #0
    5012:	e002      	b.n	501a <_dtoa_r+0x75c>
    5014:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    5016:	9c04      	ldr	r4, [sp, #16]
    5018:	9e14      	ldr	r6, [sp, #80]	; 0x50
    501a:	2c00      	cmp	r4, #0
    501c:	d00c      	beq.n	5038 <_dtoa_r+0x77a>
    501e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5020:	2b00      	cmp	r3, #0
    5022:	dd09      	ble.n	5038 <_dtoa_r+0x77a>
    5024:	42a3      	cmp	r3, r4
    5026:	dd00      	ble.n	502a <_dtoa_r+0x76c>
    5028:	1c23      	adds	r3, r4, #0
    502a:	9804      	ldr	r0, [sp, #16]
    502c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    502e:	1ac1      	subs	r1, r0, r3
    5030:	1ad7      	subs	r7, r2, r3
    5032:	9104      	str	r1, [sp, #16]
    5034:	1ae4      	subs	r4, r4, r3
    5036:	970d      	str	r7, [sp, #52]	; 0x34
    5038:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    503a:	2b00      	cmp	r3, #0
    503c:	dd21      	ble.n	5082 <_dtoa_r+0x7c4>
    503e:	9814      	ldr	r0, [sp, #80]	; 0x50
    5040:	2800      	cmp	r0, #0
    5042:	d018      	beq.n	5076 <_dtoa_r+0x7b8>
    5044:	2d00      	cmp	r5, #0
    5046:	dd10      	ble.n	506a <_dtoa_r+0x7ac>
    5048:	1c31      	adds	r1, r6, #0
    504a:	1c2a      	adds	r2, r5, #0
    504c:	9807      	ldr	r0, [sp, #28]
    504e:	f000 fed8 	bl	5e02 <__pow5mult>
    5052:	1c06      	adds	r6, r0, #0
    5054:	1c31      	adds	r1, r6, #0
    5056:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5058:	9807      	ldr	r0, [sp, #28]
    505a:	f000 fe41 	bl	5ce0 <__multiply>
    505e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5060:	1c07      	adds	r7, r0, #0
    5062:	9807      	ldr	r0, [sp, #28]
    5064:	f000 fd64 	bl	5b30 <_Bfree>
    5068:	970b      	str	r7, [sp, #44]	; 0x2c
    506a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    506c:	1b4a      	subs	r2, r1, r5
    506e:	d008      	beq.n	5082 <_dtoa_r+0x7c4>
    5070:	9807      	ldr	r0, [sp, #28]
    5072:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5074:	e002      	b.n	507c <_dtoa_r+0x7be>
    5076:	9807      	ldr	r0, [sp, #28]
    5078:	990b      	ldr	r1, [sp, #44]	; 0x2c
    507a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    507c:	f000 fec1 	bl	5e02 <__pow5mult>
    5080:	900b      	str	r0, [sp, #44]	; 0x2c
    5082:	9807      	ldr	r0, [sp, #28]
    5084:	2101      	movs	r1, #1
    5086:	f000 fe22 	bl	5cce <__i2b>
    508a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    508c:	1c05      	adds	r5, r0, #0
    508e:	2a00      	cmp	r2, #0
    5090:	dd05      	ble.n	509e <_dtoa_r+0x7e0>
    5092:	1c29      	adds	r1, r5, #0
    5094:	9807      	ldr	r0, [sp, #28]
    5096:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5098:	f000 feb3 	bl	5e02 <__pow5mult>
    509c:	1c05      	adds	r5, r0, #0
    509e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    50a0:	2700      	movs	r7, #0
    50a2:	2b01      	cmp	r3, #1
    50a4:	dc10      	bgt.n	50c8 <_dtoa_r+0x80a>
    50a6:	9808      	ldr	r0, [sp, #32]
    50a8:	42b8      	cmp	r0, r7
    50aa:	d10d      	bne.n	50c8 <_dtoa_r+0x80a>
    50ac:	9909      	ldr	r1, [sp, #36]	; 0x24
    50ae:	030a      	lsls	r2, r1, #12
    50b0:	42ba      	cmp	r2, r7
    50b2:	d109      	bne.n	50c8 <_dtoa_r+0x80a>
    50b4:	4b77      	ldr	r3, [pc, #476]	; (5294 <_dtoa_r+0x9d6>)
    50b6:	4219      	tst	r1, r3
    50b8:	d006      	beq.n	50c8 <_dtoa_r+0x80a>
    50ba:	9f04      	ldr	r7, [sp, #16]
    50bc:	980d      	ldr	r0, [sp, #52]	; 0x34
    50be:	3701      	adds	r7, #1
    50c0:	3001      	adds	r0, #1
    50c2:	9704      	str	r7, [sp, #16]
    50c4:	900d      	str	r0, [sp, #52]	; 0x34
    50c6:	2701      	movs	r7, #1
    50c8:	9915      	ldr	r1, [sp, #84]	; 0x54
    50ca:	2201      	movs	r2, #1
    50cc:	2900      	cmp	r1, #0
    50ce:	d008      	beq.n	50e2 <_dtoa_r+0x824>
    50d0:	692a      	ldr	r2, [r5, #16]
    50d2:	3203      	adds	r2, #3
    50d4:	0093      	lsls	r3, r2, #2
    50d6:	18e8      	adds	r0, r5, r3
    50d8:	6840      	ldr	r0, [r0, #4]
    50da:	f000 fdb1 	bl	5c40 <__hi0bits>
    50de:	2120      	movs	r1, #32
    50e0:	1a0a      	subs	r2, r1, r0
    50e2:	990d      	ldr	r1, [sp, #52]	; 0x34
    50e4:	231f      	movs	r3, #31
    50e6:	1850      	adds	r0, r2, r1
    50e8:	4018      	ands	r0, r3
    50ea:	d00d      	beq.n	5108 <_dtoa_r+0x84a>
    50ec:	2220      	movs	r2, #32
    50ee:	1a13      	subs	r3, r2, r0
    50f0:	2b04      	cmp	r3, #4
    50f2:	dd06      	ble.n	5102 <_dtoa_r+0x844>
    50f4:	231c      	movs	r3, #28
    50f6:	9a04      	ldr	r2, [sp, #16]
    50f8:	1a18      	subs	r0, r3, r0
    50fa:	1813      	adds	r3, r2, r0
    50fc:	9304      	str	r3, [sp, #16]
    50fe:	1824      	adds	r4, r4, r0
    5100:	e008      	b.n	5114 <_dtoa_r+0x856>
    5102:	2b04      	cmp	r3, #4
    5104:	d008      	beq.n	5118 <_dtoa_r+0x85a>
    5106:	1c18      	adds	r0, r3, #0
    5108:	9904      	ldr	r1, [sp, #16]
    510a:	301c      	adds	r0, #28
    510c:	180a      	adds	r2, r1, r0
    510e:	990d      	ldr	r1, [sp, #52]	; 0x34
    5110:	9204      	str	r2, [sp, #16]
    5112:	1824      	adds	r4, r4, r0
    5114:	1808      	adds	r0, r1, r0
    5116:	900d      	str	r0, [sp, #52]	; 0x34
    5118:	9a04      	ldr	r2, [sp, #16]
    511a:	2a00      	cmp	r2, #0
    511c:	dd04      	ble.n	5128 <_dtoa_r+0x86a>
    511e:	9807      	ldr	r0, [sp, #28]
    5120:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5122:	f000 feb1 	bl	5e88 <__lshift>
    5126:	900b      	str	r0, [sp, #44]	; 0x2c
    5128:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    512a:	2a00      	cmp	r2, #0
    512c:	dd04      	ble.n	5138 <_dtoa_r+0x87a>
    512e:	1c29      	adds	r1, r5, #0
    5130:	9807      	ldr	r0, [sp, #28]
    5132:	f000 fea9 	bl	5e88 <__lshift>
    5136:	1c05      	adds	r5, r0, #0
    5138:	9918      	ldr	r1, [sp, #96]	; 0x60
    513a:	2900      	cmp	r1, #0
    513c:	d01b      	beq.n	5176 <_dtoa_r+0x8b8>
    513e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5140:	1c29      	adds	r1, r5, #0
    5142:	f000 fef3 	bl	5f2c <__mcmp>
    5146:	2800      	cmp	r0, #0
    5148:	da15      	bge.n	5176 <_dtoa_r+0x8b8>
    514a:	9b06      	ldr	r3, [sp, #24]
    514c:	220a      	movs	r2, #10
    514e:	3b01      	subs	r3, #1
    5150:	9306      	str	r3, [sp, #24]
    5152:	9807      	ldr	r0, [sp, #28]
    5154:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5156:	2300      	movs	r3, #0
    5158:	f000 fcf4 	bl	5b44 <__multadd>
    515c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    515e:	900b      	str	r0, [sp, #44]	; 0x2c
    5160:	980e      	ldr	r0, [sp, #56]	; 0x38
    5162:	900c      	str	r0, [sp, #48]	; 0x30
    5164:	2a00      	cmp	r2, #0
    5166:	d006      	beq.n	5176 <_dtoa_r+0x8b8>
    5168:	1c31      	adds	r1, r6, #0
    516a:	9807      	ldr	r0, [sp, #28]
    516c:	220a      	movs	r2, #10
    516e:	2300      	movs	r3, #0
    5170:	f000 fce8 	bl	5b44 <__multadd>
    5174:	1c06      	adds	r6, r0, #0
    5176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5178:	2b00      	cmp	r3, #0
    517a:	dc29      	bgt.n	51d0 <_dtoa_r+0x912>
    517c:	9922      	ldr	r1, [sp, #136]	; 0x88
    517e:	2902      	cmp	r1, #2
    5180:	dd26      	ble.n	51d0 <_dtoa_r+0x912>
    5182:	2b00      	cmp	r3, #0
    5184:	d111      	bne.n	51aa <_dtoa_r+0x8ec>
    5186:	1c29      	adds	r1, r5, #0
    5188:	9807      	ldr	r0, [sp, #28]
    518a:	2205      	movs	r2, #5
    518c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    518e:	f000 fcd9 	bl	5b44 <__multadd>
    5192:	1c05      	adds	r5, r0, #0
    5194:	1c29      	adds	r1, r5, #0
    5196:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5198:	f000 fec8 	bl	5f2c <__mcmp>
    519c:	2800      	cmp	r0, #0
    519e:	dc0c      	bgt.n	51ba <_dtoa_r+0x8fc>
    51a0:	e003      	b.n	51aa <_dtoa_r+0x8ec>
    51a2:	1c35      	adds	r5, r6, #0
    51a4:	e000      	b.n	51a8 <_dtoa_r+0x8ea>
    51a6:	2500      	movs	r5, #0
    51a8:	1c2e      	adds	r6, r5, #0
    51aa:	9823      	ldr	r0, [sp, #140]	; 0x8c
    51ac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    51ae:	43c1      	mvns	r1, r0
    51b0:	9106      	str	r1, [sp, #24]
    51b2:	e00a      	b.n	51ca <_dtoa_r+0x90c>
    51b4:	9f10      	ldr	r7, [sp, #64]	; 0x40
    51b6:	1c35      	adds	r5, r6, #0
    51b8:	9706      	str	r7, [sp, #24]
    51ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    51bc:	9a06      	ldr	r2, [sp, #24]
    51be:	2731      	movs	r7, #49	; 0x31
    51c0:	701f      	strb	r7, [r3, #0]
    51c2:	3201      	adds	r2, #1
    51c4:	1c1f      	adds	r7, r3, #0
    51c6:	3701      	adds	r7, #1
    51c8:	9206      	str	r2, [sp, #24]
    51ca:	2400      	movs	r4, #0
    51cc:	9404      	str	r4, [sp, #16]
    51ce:	e0ff      	b.n	53d0 <_dtoa_r+0xb12>
    51d0:	9814      	ldr	r0, [sp, #80]	; 0x50
    51d2:	2800      	cmp	r0, #0
    51d4:	d101      	bne.n	51da <_dtoa_r+0x91c>
    51d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    51d8:	e0b6      	b.n	5348 <_dtoa_r+0xa8a>
    51da:	2c00      	cmp	r4, #0
    51dc:	dd05      	ble.n	51ea <_dtoa_r+0x92c>
    51de:	1c31      	adds	r1, r6, #0
    51e0:	9807      	ldr	r0, [sp, #28]
    51e2:	1c22      	adds	r2, r4, #0
    51e4:	f000 fe50 	bl	5e88 <__lshift>
    51e8:	1c06      	adds	r6, r0, #0
    51ea:	1c30      	adds	r0, r6, #0
    51ec:	2f00      	cmp	r7, #0
    51ee:	d011      	beq.n	5214 <_dtoa_r+0x956>
    51f0:	6871      	ldr	r1, [r6, #4]
    51f2:	9807      	ldr	r0, [sp, #28]
    51f4:	f000 fc74 	bl	5ae0 <_Balloc>
    51f8:	6933      	ldr	r3, [r6, #16]
    51fa:	1c31      	adds	r1, r6, #0
    51fc:	3302      	adds	r3, #2
    51fe:	1c04      	adds	r4, r0, #0
    5200:	310c      	adds	r1, #12
    5202:	009a      	lsls	r2, r3, #2
    5204:	300c      	adds	r0, #12
    5206:	f7fe faa7 	bl	3758 <memcpy>
    520a:	9807      	ldr	r0, [sp, #28]
    520c:	1c21      	adds	r1, r4, #0
    520e:	2201      	movs	r2, #1
    5210:	f000 fe3a 	bl	5e88 <__lshift>
    5214:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    5216:	9604      	str	r6, [sp, #16]
    5218:	1c06      	adds	r6, r0, #0
    521a:	1c29      	adds	r1, r5, #0
    521c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    521e:	f7ff fabb 	bl	4798 <quorem>
    5222:	9904      	ldr	r1, [sp, #16]
    5224:	900e      	str	r0, [sp, #56]	; 0x38
    5226:	1c04      	adds	r4, r0, #0
    5228:	980b      	ldr	r0, [sp, #44]	; 0x2c
    522a:	f000 fe7f 	bl	5f2c <__mcmp>
    522e:	1c29      	adds	r1, r5, #0
    5230:	900f      	str	r0, [sp, #60]	; 0x3c
    5232:	1c32      	adds	r2, r6, #0
    5234:	9807      	ldr	r0, [sp, #28]
    5236:	f000 fe95 	bl	5f64 <__mdiff>
    523a:	68c1      	ldr	r1, [r0, #12]
    523c:	9014      	str	r0, [sp, #80]	; 0x50
    523e:	2001      	movs	r0, #1
    5240:	3430      	adds	r4, #48	; 0x30
    5242:	900d      	str	r0, [sp, #52]	; 0x34
    5244:	2900      	cmp	r1, #0
    5246:	d104      	bne.n	5252 <_dtoa_r+0x994>
    5248:	980b      	ldr	r0, [sp, #44]	; 0x2c
    524a:	9914      	ldr	r1, [sp, #80]	; 0x50
    524c:	f000 fe6e 	bl	5f2c <__mcmp>
    5250:	900d      	str	r0, [sp, #52]	; 0x34
    5252:	9807      	ldr	r0, [sp, #28]
    5254:	9914      	ldr	r1, [sp, #80]	; 0x50
    5256:	f000 fc6b 	bl	5b30 <_Bfree>
    525a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    525c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    525e:	431a      	orrs	r2, r3
    5260:	d11a      	bne.n	5298 <_dtoa_r+0x9da>
    5262:	9908      	ldr	r1, [sp, #32]
    5264:	2001      	movs	r0, #1
    5266:	4208      	tst	r0, r1
    5268:	d116      	bne.n	5298 <_dtoa_r+0x9da>
    526a:	2c39      	cmp	r4, #57	; 0x39
    526c:	d03e      	beq.n	52ec <_dtoa_r+0xa2e>
    526e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5270:	2b00      	cmp	r3, #0
    5272:	dd32      	ble.n	52da <_dtoa_r+0xa1c>
    5274:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    5276:	3431      	adds	r4, #49	; 0x31
    5278:	e02f      	b.n	52da <_dtoa_r+0xa1c>
    527a:	46c0      	nop			; (mov r8, r8)
    527c:	46c0      	nop			; (mov r8, r8)
    527e:	46c0      	nop			; (mov r8, r8)
    5280:	00000000 	.word	0x00000000
    5284:	40240000 	.word	0x40240000
	...
    5290:	00000433 	.word	0x00000433
    5294:	7ff00000 	.word	0x7ff00000
    5298:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    529a:	2a00      	cmp	r2, #0
    529c:	db06      	blt.n	52ac <_dtoa_r+0x9ee>
    529e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    52a0:	431a      	orrs	r2, r3
    52a2:	d11d      	bne.n	52e0 <_dtoa_r+0xa22>
    52a4:	9908      	ldr	r1, [sp, #32]
    52a6:	2001      	movs	r0, #1
    52a8:	4208      	tst	r0, r1
    52aa:	d119      	bne.n	52e0 <_dtoa_r+0xa22>
    52ac:	990d      	ldr	r1, [sp, #52]	; 0x34
    52ae:	9408      	str	r4, [sp, #32]
    52b0:	2900      	cmp	r1, #0
    52b2:	dd12      	ble.n	52da <_dtoa_r+0xa1c>
    52b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    52b6:	9807      	ldr	r0, [sp, #28]
    52b8:	2201      	movs	r2, #1
    52ba:	f000 fde5 	bl	5e88 <__lshift>
    52be:	1c29      	adds	r1, r5, #0
    52c0:	900b      	str	r0, [sp, #44]	; 0x2c
    52c2:	f000 fe33 	bl	5f2c <__mcmp>
    52c6:	2800      	cmp	r0, #0
    52c8:	dc02      	bgt.n	52d0 <_dtoa_r+0xa12>
    52ca:	d106      	bne.n	52da <_dtoa_r+0xa1c>
    52cc:	07e3      	lsls	r3, r4, #31
    52ce:	d504      	bpl.n	52da <_dtoa_r+0xa1c>
    52d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    52d2:	9a08      	ldr	r2, [sp, #32]
    52d4:	3431      	adds	r4, #49	; 0x31
    52d6:	2a39      	cmp	r2, #57	; 0x39
    52d8:	d008      	beq.n	52ec <_dtoa_r+0xa2e>
    52da:	703c      	strb	r4, [r7, #0]
    52dc:	3701      	adds	r7, #1
    52de:	e077      	b.n	53d0 <_dtoa_r+0xb12>
    52e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    52e2:	1c7a      	adds	r2, r7, #1
    52e4:	2b00      	cmp	r3, #0
    52e6:	dd09      	ble.n	52fc <_dtoa_r+0xa3e>
    52e8:	2c39      	cmp	r4, #57	; 0x39
    52ea:	d103      	bne.n	52f4 <_dtoa_r+0xa36>
    52ec:	2439      	movs	r4, #57	; 0x39
    52ee:	703c      	strb	r4, [r7, #0]
    52f0:	3701      	adds	r7, #1
    52f2:	e056      	b.n	53a2 <_dtoa_r+0xae4>
    52f4:	3401      	adds	r4, #1
    52f6:	703c      	strb	r4, [r7, #0]
    52f8:	1c17      	adds	r7, r2, #0
    52fa:	e069      	b.n	53d0 <_dtoa_r+0xb12>
    52fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    52fe:	703c      	strb	r4, [r7, #0]
    5300:	1a11      	subs	r1, r2, r0
    5302:	1c17      	adds	r7, r2, #0
    5304:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5306:	4291      	cmp	r1, r2
    5308:	d03b      	beq.n	5382 <_dtoa_r+0xac4>
    530a:	9807      	ldr	r0, [sp, #28]
    530c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    530e:	220a      	movs	r2, #10
    5310:	2300      	movs	r3, #0
    5312:	f000 fc17 	bl	5b44 <__multadd>
    5316:	9c04      	ldr	r4, [sp, #16]
    5318:	900b      	str	r0, [sp, #44]	; 0x2c
    531a:	9807      	ldr	r0, [sp, #28]
    531c:	42b4      	cmp	r4, r6
    531e:	d106      	bne.n	532e <_dtoa_r+0xa70>
    5320:	1c21      	adds	r1, r4, #0
    5322:	220a      	movs	r2, #10
    5324:	2300      	movs	r3, #0
    5326:	f000 fc0d 	bl	5b44 <__multadd>
    532a:	9004      	str	r0, [sp, #16]
    532c:	e774      	b.n	5218 <_dtoa_r+0x95a>
    532e:	9904      	ldr	r1, [sp, #16]
    5330:	220a      	movs	r2, #10
    5332:	2300      	movs	r3, #0
    5334:	f000 fc06 	bl	5b44 <__multadd>
    5338:	1c31      	adds	r1, r6, #0
    533a:	9004      	str	r0, [sp, #16]
    533c:	220a      	movs	r2, #10
    533e:	9807      	ldr	r0, [sp, #28]
    5340:	2300      	movs	r3, #0
    5342:	f000 fbff 	bl	5b44 <__multadd>
    5346:	e767      	b.n	5218 <_dtoa_r+0x95a>
    5348:	1c29      	adds	r1, r5, #0
    534a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    534c:	f7ff fa24 	bl	4798 <quorem>
    5350:	1c04      	adds	r4, r0, #0
    5352:	3430      	adds	r4, #48	; 0x30
    5354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5356:	990c      	ldr	r1, [sp, #48]	; 0x30
    5358:	703c      	strb	r4, [r7, #0]
    535a:	3701      	adds	r7, #1
    535c:	1abb      	subs	r3, r7, r2
    535e:	428b      	cmp	r3, r1
    5360:	da07      	bge.n	5372 <_dtoa_r+0xab4>
    5362:	9807      	ldr	r0, [sp, #28]
    5364:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5366:	220a      	movs	r2, #10
    5368:	2300      	movs	r3, #0
    536a:	f000 fbeb 	bl	5b44 <__multadd>
    536e:	900b      	str	r0, [sp, #44]	; 0x2c
    5370:	e7ea      	b.n	5348 <_dtoa_r+0xa8a>
    5372:	980c      	ldr	r0, [sp, #48]	; 0x30
    5374:	2800      	cmp	r0, #0
    5376:	dc00      	bgt.n	537a <_dtoa_r+0xabc>
    5378:	2001      	movs	r0, #1
    537a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    537c:	2200      	movs	r2, #0
    537e:	183f      	adds	r7, r7, r0
    5380:	9204      	str	r2, [sp, #16]
    5382:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5384:	9807      	ldr	r0, [sp, #28]
    5386:	2201      	movs	r2, #1
    5388:	f000 fd7e 	bl	5e88 <__lshift>
    538c:	1c29      	adds	r1, r5, #0
    538e:	900b      	str	r0, [sp, #44]	; 0x2c
    5390:	f000 fdcc 	bl	5f2c <__mcmp>
    5394:	2800      	cmp	r0, #0
    5396:	dc04      	bgt.n	53a2 <_dtoa_r+0xae4>
    5398:	d114      	bne.n	53c4 <_dtoa_r+0xb06>
    539a:	07e0      	lsls	r0, r4, #31
    539c:	d401      	bmi.n	53a2 <_dtoa_r+0xae4>
    539e:	e011      	b.n	53c4 <_dtoa_r+0xb06>
    53a0:	1c07      	adds	r7, r0, #0
    53a2:	1e78      	subs	r0, r7, #1
    53a4:	7801      	ldrb	r1, [r0, #0]
    53a6:	2939      	cmp	r1, #57	; 0x39
    53a8:	d109      	bne.n	53be <_dtoa_r+0xb00>
    53aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    53ac:	4290      	cmp	r0, r2
    53ae:	d1f7      	bne.n	53a0 <_dtoa_r+0xae2>
    53b0:	9b06      	ldr	r3, [sp, #24]
    53b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    53b4:	3301      	adds	r3, #1
    53b6:	2031      	movs	r0, #49	; 0x31
    53b8:	9306      	str	r3, [sp, #24]
    53ba:	7020      	strb	r0, [r4, #0]
    53bc:	e008      	b.n	53d0 <_dtoa_r+0xb12>
    53be:	3101      	adds	r1, #1
    53c0:	7001      	strb	r1, [r0, #0]
    53c2:	e005      	b.n	53d0 <_dtoa_r+0xb12>
    53c4:	1e7b      	subs	r3, r7, #1
    53c6:	7818      	ldrb	r0, [r3, #0]
    53c8:	2830      	cmp	r0, #48	; 0x30
    53ca:	d101      	bne.n	53d0 <_dtoa_r+0xb12>
    53cc:	1c1f      	adds	r7, r3, #0
    53ce:	e7f9      	b.n	53c4 <_dtoa_r+0xb06>
    53d0:	9807      	ldr	r0, [sp, #28]
    53d2:	1c29      	adds	r1, r5, #0
    53d4:	f000 fbac 	bl	5b30 <_Bfree>
    53d8:	2e00      	cmp	r6, #0
    53da:	d00f      	beq.n	53fc <_dtoa_r+0xb3e>
    53dc:	9d04      	ldr	r5, [sp, #16]
    53de:	2d00      	cmp	r5, #0
    53e0:	d005      	beq.n	53ee <_dtoa_r+0xb30>
    53e2:	42b5      	cmp	r5, r6
    53e4:	d003      	beq.n	53ee <_dtoa_r+0xb30>
    53e6:	9807      	ldr	r0, [sp, #28]
    53e8:	1c29      	adds	r1, r5, #0
    53ea:	f000 fba1 	bl	5b30 <_Bfree>
    53ee:	9807      	ldr	r0, [sp, #28]
    53f0:	1c31      	adds	r1, r6, #0
    53f2:	f000 fb9d 	bl	5b30 <_Bfree>
    53f6:	e001      	b.n	53fc <_dtoa_r+0xb3e>
    53f8:	9910      	ldr	r1, [sp, #64]	; 0x40
    53fa:	9106      	str	r1, [sp, #24]
    53fc:	9807      	ldr	r0, [sp, #28]
    53fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5400:	f000 fb96 	bl	5b30 <_Bfree>
    5404:	9b06      	ldr	r3, [sp, #24]
    5406:	9a24      	ldr	r2, [sp, #144]	; 0x90
    5408:	9826      	ldr	r0, [sp, #152]	; 0x98
    540a:	2600      	movs	r6, #0
    540c:	3301      	adds	r3, #1
    540e:	703e      	strb	r6, [r7, #0]
    5410:	6013      	str	r3, [r2, #0]
    5412:	2800      	cmp	r0, #0
    5414:	d003      	beq.n	541e <_dtoa_r+0xb60>
    5416:	6007      	str	r7, [r0, #0]
    5418:	e001      	b.n	541e <_dtoa_r+0xb60>
    541a:	4e02      	ldr	r6, [pc, #8]	; (5424 <_dtoa_r+0xb66>)
    541c:	960a      	str	r6, [sp, #40]	; 0x28
    541e:	980a      	ldr	r0, [sp, #40]	; 0x28
    5420:	b01d      	add	sp, #116	; 0x74
    5422:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5424:	00009b6c 	.word	0x00009b6c

00005428 <_malloc_trim_r>:
    5428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    542a:	1c0d      	adds	r5, r1, #0
    542c:	1c04      	adds	r4, r0, #0
    542e:	f000 fb52 	bl	5ad6 <__malloc_lock>
    5432:	4e20      	ldr	r6, [pc, #128]	; (54b4 <_malloc_trim_r+0x8c>)
    5434:	2003      	movs	r0, #3
    5436:	68b3      	ldr	r3, [r6, #8]
    5438:	4a1f      	ldr	r2, [pc, #124]	; (54b8 <_malloc_trim_r+0x90>)
    543a:	685f      	ldr	r7, [r3, #4]
    543c:	4387      	bics	r7, r0
    543e:	18b9      	adds	r1, r7, r2
    5440:	1b4d      	subs	r5, r1, r5
    5442:	0b2b      	lsrs	r3, r5, #12
    5444:	481d      	ldr	r0, [pc, #116]	; (54bc <_malloc_trim_r+0x94>)
    5446:	3b01      	subs	r3, #1
    5448:	031d      	lsls	r5, r3, #12
    544a:	4285      	cmp	r5, r0
    544c:	dc04      	bgt.n	5458 <_malloc_trim_r+0x30>
    544e:	1c20      	adds	r0, r4, #0
    5450:	f000 fb42 	bl	5ad8 <__malloc_unlock>
    5454:	2000      	movs	r0, #0
    5456:	e02b      	b.n	54b0 <_malloc_trim_r+0x88>
    5458:	2100      	movs	r1, #0
    545a:	1c20      	adds	r0, r4, #0
    545c:	f000 ff60 	bl	6320 <_sbrk_r>
    5460:	68b2      	ldr	r2, [r6, #8]
    5462:	19d1      	adds	r1, r2, r7
    5464:	4288      	cmp	r0, r1
    5466:	d1f2      	bne.n	544e <_malloc_trim_r+0x26>
    5468:	4269      	negs	r1, r5
    546a:	1c20      	adds	r0, r4, #0
    546c:	f000 ff58 	bl	6320 <_sbrk_r>
    5470:	3001      	adds	r0, #1
    5472:	d110      	bne.n	5496 <_malloc_trim_r+0x6e>
    5474:	1c20      	adds	r0, r4, #0
    5476:	2100      	movs	r1, #0
    5478:	f000 ff52 	bl	6320 <_sbrk_r>
    547c:	68b3      	ldr	r3, [r6, #8]
    547e:	1ac7      	subs	r7, r0, r3
    5480:	2f0f      	cmp	r7, #15
    5482:	dde4      	ble.n	544e <_malloc_trim_r+0x26>
    5484:	490e      	ldr	r1, [pc, #56]	; (54c0 <_malloc_trim_r+0x98>)
    5486:	4a0f      	ldr	r2, [pc, #60]	; (54c4 <_malloc_trim_r+0x9c>)
    5488:	680e      	ldr	r6, [r1, #0]
    548a:	2501      	movs	r5, #1
    548c:	1b80      	subs	r0, r0, r6
    548e:	432f      	orrs	r7, r5
    5490:	6010      	str	r0, [r2, #0]
    5492:	605f      	str	r7, [r3, #4]
    5494:	e7db      	b.n	544e <_malloc_trim_r+0x26>
    5496:	480b      	ldr	r0, [pc, #44]	; (54c4 <_malloc_trim_r+0x9c>)
    5498:	68b3      	ldr	r3, [r6, #8]
    549a:	6802      	ldr	r2, [r0, #0]
    549c:	1b7f      	subs	r7, r7, r5
    549e:	2601      	movs	r6, #1
    54a0:	1b55      	subs	r5, r2, r5
    54a2:	4337      	orrs	r7, r6
    54a4:	6005      	str	r5, [r0, #0]
    54a6:	605f      	str	r7, [r3, #4]
    54a8:	1c20      	adds	r0, r4, #0
    54aa:	f000 fb15 	bl	5ad8 <__malloc_unlock>
    54ae:	1c30      	adds	r0, r6, #0
    54b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54b2:	46c0      	nop			; (mov r8, r8)
    54b4:	200004c4 	.word	0x200004c4
    54b8:	00000fef 	.word	0x00000fef
    54bc:	00000fff 	.word	0x00000fff
    54c0:	200008cc 	.word	0x200008cc
    54c4:	20000b40 	.word	0x20000b40

000054c8 <_free_r>:
    54c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    54ca:	1c04      	adds	r4, r0, #0
    54cc:	1e0d      	subs	r5, r1, #0
    54ce:	d100      	bne.n	54d2 <_free_r+0xa>
    54d0:	e0a8      	b.n	5624 <_free_r+0x15c>
    54d2:	f000 fb00 	bl	5ad6 <__malloc_lock>
    54d6:	1c29      	adds	r1, r5, #0
    54d8:	3908      	subs	r1, #8
    54da:	684f      	ldr	r7, [r1, #4]
    54dc:	2201      	movs	r2, #1
    54de:	1c3b      	adds	r3, r7, #0
    54e0:	4393      	bics	r3, r2
    54e2:	18c8      	adds	r0, r1, r3
    54e4:	6846      	ldr	r6, [r0, #4]
    54e6:	4a50      	ldr	r2, [pc, #320]	; (5628 <_free_r+0x160>)
    54e8:	2503      	movs	r5, #3
    54ea:	43ae      	bics	r6, r5
    54ec:	6895      	ldr	r5, [r2, #8]
    54ee:	46ac      	mov	ip, r5
    54f0:	2501      	movs	r5, #1
    54f2:	402f      	ands	r7, r5
    54f4:	4560      	cmp	r0, ip
    54f6:	d11a      	bne.n	552e <_free_r+0x66>
    54f8:	18f6      	adds	r6, r6, r3
    54fa:	2f00      	cmp	r7, #0
    54fc:	d106      	bne.n	550c <_free_r+0x44>
    54fe:	6808      	ldr	r0, [r1, #0]
    5500:	1a09      	subs	r1, r1, r0
    5502:	68cd      	ldr	r5, [r1, #12]
    5504:	688f      	ldr	r7, [r1, #8]
    5506:	1836      	adds	r6, r6, r0
    5508:	60fd      	str	r5, [r7, #12]
    550a:	60af      	str	r7, [r5, #8]
    550c:	2301      	movs	r3, #1
    550e:	4333      	orrs	r3, r6
    5510:	6091      	str	r1, [r2, #8]
    5512:	604b      	str	r3, [r1, #4]
    5514:	4945      	ldr	r1, [pc, #276]	; (562c <_free_r+0x164>)
    5516:	680a      	ldr	r2, [r1, #0]
    5518:	4296      	cmp	r6, r2
    551a:	d304      	bcc.n	5526 <_free_r+0x5e>
    551c:	4844      	ldr	r0, [pc, #272]	; (5630 <_free_r+0x168>)
    551e:	6801      	ldr	r1, [r0, #0]
    5520:	1c20      	adds	r0, r4, #0
    5522:	f7ff ff81 	bl	5428 <_malloc_trim_r>
    5526:	1c20      	adds	r0, r4, #0
    5528:	f000 fad6 	bl	5ad8 <__malloc_unlock>
    552c:	e07a      	b.n	5624 <_free_r+0x15c>
    552e:	2500      	movs	r5, #0
    5530:	6046      	str	r6, [r0, #4]
    5532:	9501      	str	r5, [sp, #4]
    5534:	42af      	cmp	r7, r5
    5536:	d10d      	bne.n	5554 <_free_r+0x8c>
    5538:	680f      	ldr	r7, [r1, #0]
    553a:	2508      	movs	r5, #8
    553c:	1bc9      	subs	r1, r1, r7
    553e:	19db      	adds	r3, r3, r7
    5540:	688f      	ldr	r7, [r1, #8]
    5542:	18ad      	adds	r5, r5, r2
    5544:	42af      	cmp	r7, r5
    5546:	d003      	beq.n	5550 <_free_r+0x88>
    5548:	68cd      	ldr	r5, [r1, #12]
    554a:	60fd      	str	r5, [r7, #12]
    554c:	60af      	str	r7, [r5, #8]
    554e:	e001      	b.n	5554 <_free_r+0x8c>
    5550:	2701      	movs	r7, #1
    5552:	9701      	str	r7, [sp, #4]
    5554:	1985      	adds	r5, r0, r6
    5556:	686d      	ldr	r5, [r5, #4]
    5558:	2701      	movs	r7, #1
    555a:	423d      	tst	r5, r7
    555c:	d110      	bne.n	5580 <_free_r+0xb8>
    555e:	9d01      	ldr	r5, [sp, #4]
    5560:	199b      	adds	r3, r3, r6
    5562:	6886      	ldr	r6, [r0, #8]
    5564:	2d00      	cmp	r5, #0
    5566:	d108      	bne.n	557a <_free_r+0xb2>
    5568:	4d32      	ldr	r5, [pc, #200]	; (5634 <_free_r+0x16c>)
    556a:	42ae      	cmp	r6, r5
    556c:	d105      	bne.n	557a <_free_r+0xb2>
    556e:	60f1      	str	r1, [r6, #12]
    5570:	60b1      	str	r1, [r6, #8]
    5572:	60ce      	str	r6, [r1, #12]
    5574:	608e      	str	r6, [r1, #8]
    5576:	9701      	str	r7, [sp, #4]
    5578:	e002      	b.n	5580 <_free_r+0xb8>
    557a:	68c0      	ldr	r0, [r0, #12]
    557c:	60f0      	str	r0, [r6, #12]
    557e:	6086      	str	r6, [r0, #8]
    5580:	2701      	movs	r7, #1
    5582:	1c3e      	adds	r6, r7, #0
    5584:	9801      	ldr	r0, [sp, #4]
    5586:	431e      	orrs	r6, r3
    5588:	604e      	str	r6, [r1, #4]
    558a:	50cb      	str	r3, [r1, r3]
    558c:	2800      	cmp	r0, #0
    558e:	d1ca      	bne.n	5526 <_free_r+0x5e>
    5590:	4d29      	ldr	r5, [pc, #164]	; (5638 <_free_r+0x170>)
    5592:	42ab      	cmp	r3, r5
    5594:	d80d      	bhi.n	55b2 <_free_r+0xea>
    5596:	08d8      	lsrs	r0, r3, #3
    5598:	6856      	ldr	r6, [r2, #4]
    559a:	1085      	asrs	r5, r0, #2
    559c:	40af      	lsls	r7, r5
    559e:	4337      	orrs	r7, r6
    55a0:	6057      	str	r7, [r2, #4]
    55a2:	00c7      	lsls	r7, r0, #3
    55a4:	19d2      	adds	r2, r2, r7
    55a6:	6893      	ldr	r3, [r2, #8]
    55a8:	60ca      	str	r2, [r1, #12]
    55aa:	608b      	str	r3, [r1, #8]
    55ac:	60d9      	str	r1, [r3, #12]
    55ae:	6091      	str	r1, [r2, #8]
    55b0:	e7b9      	b.n	5526 <_free_r+0x5e>
    55b2:	0a5f      	lsrs	r7, r3, #9
    55b4:	2f04      	cmp	r7, #4
    55b6:	d802      	bhi.n	55be <_free_r+0xf6>
    55b8:	099d      	lsrs	r5, r3, #6
    55ba:	3538      	adds	r5, #56	; 0x38
    55bc:	e016      	b.n	55ec <_free_r+0x124>
    55be:	2f14      	cmp	r7, #20
    55c0:	d802      	bhi.n	55c8 <_free_r+0x100>
    55c2:	1c3d      	adds	r5, r7, #0
    55c4:	355b      	adds	r5, #91	; 0x5b
    55c6:	e011      	b.n	55ec <_free_r+0x124>
    55c8:	2f54      	cmp	r7, #84	; 0x54
    55ca:	d802      	bhi.n	55d2 <_free_r+0x10a>
    55cc:	0b1d      	lsrs	r5, r3, #12
    55ce:	356e      	adds	r5, #110	; 0x6e
    55d0:	e00c      	b.n	55ec <_free_r+0x124>
    55d2:	26aa      	movs	r6, #170	; 0xaa
    55d4:	0070      	lsls	r0, r6, #1
    55d6:	4287      	cmp	r7, r0
    55d8:	d802      	bhi.n	55e0 <_free_r+0x118>
    55da:	0bdd      	lsrs	r5, r3, #15
    55dc:	3577      	adds	r5, #119	; 0x77
    55de:	e005      	b.n	55ec <_free_r+0x124>
    55e0:	4e16      	ldr	r6, [pc, #88]	; (563c <_free_r+0x174>)
    55e2:	257e      	movs	r5, #126	; 0x7e
    55e4:	42b7      	cmp	r7, r6
    55e6:	d801      	bhi.n	55ec <_free_r+0x124>
    55e8:	0c9d      	lsrs	r5, r3, #18
    55ea:	357c      	adds	r5, #124	; 0x7c
    55ec:	00ef      	lsls	r7, r5, #3
    55ee:	19d6      	adds	r6, r2, r7
    55f0:	68b0      	ldr	r0, [r6, #8]
    55f2:	42b0      	cmp	r0, r6
    55f4:	d10b      	bne.n	560e <_free_r+0x146>
    55f6:	10ad      	asrs	r5, r5, #2
    55f8:	2701      	movs	r7, #1
    55fa:	6853      	ldr	r3, [r2, #4]
    55fc:	40af      	lsls	r7, r5
    55fe:	1c3e      	adds	r6, r7, #0
    5600:	431e      	orrs	r6, r3
    5602:	6056      	str	r6, [r2, #4]
    5604:	1c02      	adds	r2, r0, #0
    5606:	e008      	b.n	561a <_free_r+0x152>
    5608:	6880      	ldr	r0, [r0, #8]
    560a:	42b0      	cmp	r0, r6
    560c:	d004      	beq.n	5618 <_free_r+0x150>
    560e:	6845      	ldr	r5, [r0, #4]
    5610:	2203      	movs	r2, #3
    5612:	4395      	bics	r5, r2
    5614:	42ab      	cmp	r3, r5
    5616:	d3f7      	bcc.n	5608 <_free_r+0x140>
    5618:	68c2      	ldr	r2, [r0, #12]
    561a:	60ca      	str	r2, [r1, #12]
    561c:	6088      	str	r0, [r1, #8]
    561e:	60c1      	str	r1, [r0, #12]
    5620:	6091      	str	r1, [r2, #8]
    5622:	e780      	b.n	5526 <_free_r+0x5e>
    5624:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5626:	46c0      	nop			; (mov r8, r8)
    5628:	200004c4 	.word	0x200004c4
    562c:	200008d0 	.word	0x200008d0
    5630:	20000b3c 	.word	0x20000b3c
    5634:	200004cc 	.word	0x200004cc
    5638:	000001ff 	.word	0x000001ff
    563c:	00000554 	.word	0x00000554

00005640 <_setlocale_r>:
    5640:	b538      	push	{r3, r4, r5, lr}
    5642:	1c14      	adds	r4, r2, #0
    5644:	4d0c      	ldr	r5, [pc, #48]	; (5678 <_setlocale_r+0x38>)
    5646:	d101      	bne.n	564c <_setlocale_r+0xc>
    5648:	1c28      	adds	r0, r5, #0
    564a:	e013      	b.n	5674 <_setlocale_r+0x34>
    564c:	1c10      	adds	r0, r2, #0
    564e:	490b      	ldr	r1, [pc, #44]	; (567c <_setlocale_r+0x3c>)
    5650:	f000 fe78 	bl	6344 <strcmp>
    5654:	2800      	cmp	r0, #0
    5656:	d0f7      	beq.n	5648 <_setlocale_r+0x8>
    5658:	1c20      	adds	r0, r4, #0
    565a:	1c29      	adds	r1, r5, #0
    565c:	f000 fe72 	bl	6344 <strcmp>
    5660:	2800      	cmp	r0, #0
    5662:	d0f1      	beq.n	5648 <_setlocale_r+0x8>
    5664:	1c20      	adds	r0, r4, #0
    5666:	4906      	ldr	r1, [pc, #24]	; (5680 <_setlocale_r+0x40>)
    5668:	f000 fe6c 	bl	6344 <strcmp>
    566c:	4243      	negs	r3, r0
    566e:	4158      	adcs	r0, r3
    5670:	4240      	negs	r0, r0
    5672:	4028      	ands	r0, r5
    5674:	bd38      	pop	{r3, r4, r5, pc}
    5676:	46c0      	nop			; (mov r8, r8)
    5678:	00009b18 	.word	0x00009b18
    567c:	00009b7b 	.word	0x00009b7b
    5680:	00009b82 	.word	0x00009b82

00005684 <__locale_charset>:
    5684:	4800      	ldr	r0, [pc, #0]	; (5688 <__locale_charset+0x4>)
    5686:	4770      	bx	lr
    5688:	20000448 	.word	0x20000448

0000568c <__locale_mb_cur_max>:
    568c:	4b01      	ldr	r3, [pc, #4]	; (5694 <__locale_mb_cur_max+0x8>)
    568e:	6a18      	ldr	r0, [r3, #32]
    5690:	4770      	bx	lr
    5692:	46c0      	nop			; (mov r8, r8)
    5694:	20000448 	.word	0x20000448

00005698 <__locale_msgcharset>:
    5698:	4801      	ldr	r0, [pc, #4]	; (56a0 <__locale_msgcharset+0x8>)
    569a:	3024      	adds	r0, #36	; 0x24
    569c:	4770      	bx	lr
    569e:	46c0      	nop			; (mov r8, r8)
    56a0:	20000448 	.word	0x20000448

000056a4 <__locale_cjk_lang>:
    56a4:	2000      	movs	r0, #0
    56a6:	4770      	bx	lr

000056a8 <_localeconv_r>:
    56a8:	4801      	ldr	r0, [pc, #4]	; (56b0 <_localeconv_r+0x8>)
    56aa:	3044      	adds	r0, #68	; 0x44
    56ac:	4770      	bx	lr
    56ae:	46c0      	nop			; (mov r8, r8)
    56b0:	20000448 	.word	0x20000448

000056b4 <setlocale>:
    56b4:	b508      	push	{r3, lr}
    56b6:	1c0a      	adds	r2, r1, #0
    56b8:	4903      	ldr	r1, [pc, #12]	; (56c8 <setlocale+0x14>)
    56ba:	1c03      	adds	r3, r0, #0
    56bc:	6808      	ldr	r0, [r1, #0]
    56be:	1c19      	adds	r1, r3, #0
    56c0:	f7ff ffbe 	bl	5640 <_setlocale_r>
    56c4:	bd08      	pop	{r3, pc}
    56c6:	46c0      	nop			; (mov r8, r8)
    56c8:	20000018 	.word	0x20000018

000056cc <localeconv>:
    56cc:	4801      	ldr	r0, [pc, #4]	; (56d4 <localeconv+0x8>)
    56ce:	3044      	adds	r0, #68	; 0x44
    56d0:	4770      	bx	lr
    56d2:	46c0      	nop			; (mov r8, r8)
    56d4:	20000448 	.word	0x20000448

000056d8 <_malloc_r>:
    56d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    56da:	1c0b      	adds	r3, r1, #0
    56dc:	b087      	sub	sp, #28
    56de:	330b      	adds	r3, #11
    56e0:	9003      	str	r0, [sp, #12]
    56e2:	2b16      	cmp	r3, #22
    56e4:	d904      	bls.n	56f0 <_malloc_r+0x18>
    56e6:	2207      	movs	r2, #7
    56e8:	4393      	bics	r3, r2
    56ea:	9301      	str	r3, [sp, #4]
    56ec:	d502      	bpl.n	56f4 <_malloc_r+0x1c>
    56ee:	e004      	b.n	56fa <_malloc_r+0x22>
    56f0:	2410      	movs	r4, #16
    56f2:	9401      	str	r4, [sp, #4]
    56f4:	9e01      	ldr	r6, [sp, #4]
    56f6:	428e      	cmp	r6, r1
    56f8:	d203      	bcs.n	5702 <_malloc_r+0x2a>
    56fa:	9903      	ldr	r1, [sp, #12]
    56fc:	250c      	movs	r5, #12
    56fe:	600d      	str	r5, [r1, #0]
    5700:	e1c6      	b.n	5a90 <_malloc_r+0x3b8>
    5702:	9803      	ldr	r0, [sp, #12]
    5704:	f000 f9e7 	bl	5ad6 <__malloc_lock>
    5708:	48ae      	ldr	r0, [pc, #696]	; (59c4 <_malloc_r+0x2ec>)
    570a:	9901      	ldr	r1, [sp, #4]
    570c:	4cae      	ldr	r4, [pc, #696]	; (59c8 <_malloc_r+0x2f0>)
    570e:	4281      	cmp	r1, r0
    5710:	d80f      	bhi.n	5732 <_malloc_r+0x5a>
    5712:	08ca      	lsrs	r2, r1, #3
    5714:	00d5      	lsls	r5, r2, #3
    5716:	1963      	adds	r3, r4, r5
    5718:	68dd      	ldr	r5, [r3, #12]
    571a:	429d      	cmp	r5, r3
    571c:	d105      	bne.n	572a <_malloc_r+0x52>
    571e:	1c28      	adds	r0, r5, #0
    5720:	696d      	ldr	r5, [r5, #20]
    5722:	3008      	adds	r0, #8
    5724:	3202      	adds	r2, #2
    5726:	4285      	cmp	r5, r0
    5728:	d041      	beq.n	57ae <_malloc_r+0xd6>
    572a:	6869      	ldr	r1, [r5, #4]
    572c:	2403      	movs	r4, #3
    572e:	43a1      	bics	r1, r4
    5730:	e028      	b.n	5784 <_malloc_r+0xac>
    5732:	9d01      	ldr	r5, [sp, #4]
    5734:	0a6f      	lsrs	r7, r5, #9
    5736:	08ea      	lsrs	r2, r5, #3
    5738:	2f00      	cmp	r7, #0
    573a:	d01f      	beq.n	577c <_malloc_r+0xa4>
    573c:	2f04      	cmp	r7, #4
    573e:	d803      	bhi.n	5748 <_malloc_r+0x70>
    5740:	9f01      	ldr	r7, [sp, #4]
    5742:	09ba      	lsrs	r2, r7, #6
    5744:	3238      	adds	r2, #56	; 0x38
    5746:	e019      	b.n	577c <_malloc_r+0xa4>
    5748:	2f14      	cmp	r7, #20
    574a:	d802      	bhi.n	5752 <_malloc_r+0x7a>
    574c:	1c3a      	adds	r2, r7, #0
    574e:	325b      	adds	r2, #91	; 0x5b
    5750:	e014      	b.n	577c <_malloc_r+0xa4>
    5752:	2f54      	cmp	r7, #84	; 0x54
    5754:	d803      	bhi.n	575e <_malloc_r+0x86>
    5756:	9d01      	ldr	r5, [sp, #4]
    5758:	0b2a      	lsrs	r2, r5, #12
    575a:	326e      	adds	r2, #110	; 0x6e
    575c:	e00e      	b.n	577c <_malloc_r+0xa4>
    575e:	23aa      	movs	r3, #170	; 0xaa
    5760:	005a      	lsls	r2, r3, #1
    5762:	4297      	cmp	r7, r2
    5764:	d803      	bhi.n	576e <_malloc_r+0x96>
    5766:	9901      	ldr	r1, [sp, #4]
    5768:	0bca      	lsrs	r2, r1, #15
    576a:	3277      	adds	r2, #119	; 0x77
    576c:	e006      	b.n	577c <_malloc_r+0xa4>
    576e:	4e97      	ldr	r6, [pc, #604]	; (59cc <_malloc_r+0x2f4>)
    5770:	227e      	movs	r2, #126	; 0x7e
    5772:	42b7      	cmp	r7, r6
    5774:	d802      	bhi.n	577c <_malloc_r+0xa4>
    5776:	9801      	ldr	r0, [sp, #4]
    5778:	0c82      	lsrs	r2, r0, #18
    577a:	327c      	adds	r2, #124	; 0x7c
    577c:	00d3      	lsls	r3, r2, #3
    577e:	18e3      	adds	r3, r4, r3
    5780:	68dd      	ldr	r5, [r3, #12]
    5782:	e008      	b.n	5796 <_malloc_r+0xbe>
    5784:	68ef      	ldr	r7, [r5, #12]
    5786:	68ab      	ldr	r3, [r5, #8]
    5788:	1869      	adds	r1, r5, r1
    578a:	60df      	str	r7, [r3, #12]
    578c:	60bb      	str	r3, [r7, #8]
    578e:	e02b      	b.n	57e8 <_malloc_r+0x110>
    5790:	2e00      	cmp	r6, #0
    5792:	daf7      	bge.n	5784 <_malloc_r+0xac>
    5794:	68ed      	ldr	r5, [r5, #12]
    5796:	429d      	cmp	r5, r3
    5798:	d008      	beq.n	57ac <_malloc_r+0xd4>
    579a:	6868      	ldr	r0, [r5, #4]
    579c:	2603      	movs	r6, #3
    579e:	9f01      	ldr	r7, [sp, #4]
    57a0:	43b0      	bics	r0, r6
    57a2:	1c01      	adds	r1, r0, #0
    57a4:	1bc6      	subs	r6, r0, r7
    57a6:	2e0f      	cmp	r6, #15
    57a8:	ddf2      	ble.n	5790 <_malloc_r+0xb8>
    57aa:	3a01      	subs	r2, #1
    57ac:	3201      	adds	r2, #1
    57ae:	1c27      	adds	r7, r4, #0
    57b0:	6925      	ldr	r5, [r4, #16]
    57b2:	3708      	adds	r7, #8
    57b4:	42bd      	cmp	r5, r7
    57b6:	d063      	beq.n	5880 <_malloc_r+0x1a8>
    57b8:	6869      	ldr	r1, [r5, #4]
    57ba:	2603      	movs	r6, #3
    57bc:	9801      	ldr	r0, [sp, #4]
    57be:	43b1      	bics	r1, r6
    57c0:	1c0b      	adds	r3, r1, #0
    57c2:	1a09      	subs	r1, r1, r0
    57c4:	290f      	cmp	r1, #15
    57c6:	dd0a      	ble.n	57de <_malloc_r+0x106>
    57c8:	2201      	movs	r2, #1
    57ca:	182b      	adds	r3, r5, r0
    57cc:	4310      	orrs	r0, r2
    57ce:	430a      	orrs	r2, r1
    57d0:	6068      	str	r0, [r5, #4]
    57d2:	6163      	str	r3, [r4, #20]
    57d4:	6123      	str	r3, [r4, #16]
    57d6:	60df      	str	r7, [r3, #12]
    57d8:	609f      	str	r7, [r3, #8]
    57da:	605a      	str	r2, [r3, #4]
    57dc:	e083      	b.n	58e6 <_malloc_r+0x20e>
    57de:	6167      	str	r7, [r4, #20]
    57e0:	6127      	str	r7, [r4, #16]
    57e2:	2900      	cmp	r1, #0
    57e4:	db05      	blt.n	57f2 <_malloc_r+0x11a>
    57e6:	18e9      	adds	r1, r5, r3
    57e8:	684e      	ldr	r6, [r1, #4]
    57ea:	2001      	movs	r0, #1
    57ec:	4330      	orrs	r0, r6
    57ee:	6048      	str	r0, [r1, #4]
    57f0:	e15b      	b.n	5aaa <_malloc_r+0x3d2>
    57f2:	4f77      	ldr	r7, [pc, #476]	; (59d0 <_malloc_r+0x2f8>)
    57f4:	42bb      	cmp	r3, r7
    57f6:	d80b      	bhi.n	5810 <_malloc_r+0x138>
    57f8:	08db      	lsrs	r3, r3, #3
    57fa:	1099      	asrs	r1, r3, #2
    57fc:	2001      	movs	r0, #1
    57fe:	6867      	ldr	r7, [r4, #4]
    5800:	4088      	lsls	r0, r1
    5802:	1c06      	adds	r6, r0, #0
    5804:	00db      	lsls	r3, r3, #3
    5806:	433e      	orrs	r6, r7
    5808:	18e7      	adds	r7, r4, r3
    580a:	6066      	str	r6, [r4, #4]
    580c:	68b9      	ldr	r1, [r7, #8]
    580e:	e033      	b.n	5878 <_malloc_r+0x1a0>
    5810:	0a59      	lsrs	r1, r3, #9
    5812:	2904      	cmp	r1, #4
    5814:	d802      	bhi.n	581c <_malloc_r+0x144>
    5816:	0998      	lsrs	r0, r3, #6
    5818:	3038      	adds	r0, #56	; 0x38
    581a:	e016      	b.n	584a <_malloc_r+0x172>
    581c:	2914      	cmp	r1, #20
    581e:	d802      	bhi.n	5826 <_malloc_r+0x14e>
    5820:	1c08      	adds	r0, r1, #0
    5822:	305b      	adds	r0, #91	; 0x5b
    5824:	e011      	b.n	584a <_malloc_r+0x172>
    5826:	2954      	cmp	r1, #84	; 0x54
    5828:	d802      	bhi.n	5830 <_malloc_r+0x158>
    582a:	0b18      	lsrs	r0, r3, #12
    582c:	306e      	adds	r0, #110	; 0x6e
    582e:	e00c      	b.n	584a <_malloc_r+0x172>
    5830:	26aa      	movs	r6, #170	; 0xaa
    5832:	0070      	lsls	r0, r6, #1
    5834:	4281      	cmp	r1, r0
    5836:	d802      	bhi.n	583e <_malloc_r+0x166>
    5838:	0bd8      	lsrs	r0, r3, #15
    583a:	3077      	adds	r0, #119	; 0x77
    583c:	e005      	b.n	584a <_malloc_r+0x172>
    583e:	4f63      	ldr	r7, [pc, #396]	; (59cc <_malloc_r+0x2f4>)
    5840:	207e      	movs	r0, #126	; 0x7e
    5842:	42b9      	cmp	r1, r7
    5844:	d801      	bhi.n	584a <_malloc_r+0x172>
    5846:	0c98      	lsrs	r0, r3, #18
    5848:	307c      	adds	r0, #124	; 0x7c
    584a:	00c1      	lsls	r1, r0, #3
    584c:	1866      	adds	r6, r4, r1
    584e:	68b1      	ldr	r1, [r6, #8]
    5850:	42b1      	cmp	r1, r6
    5852:	d10b      	bne.n	586c <_malloc_r+0x194>
    5854:	1080      	asrs	r0, r0, #2
    5856:	2301      	movs	r3, #1
    5858:	6867      	ldr	r7, [r4, #4]
    585a:	4083      	lsls	r3, r0
    585c:	1c1e      	adds	r6, r3, #0
    585e:	433e      	orrs	r6, r7
    5860:	6066      	str	r6, [r4, #4]
    5862:	1c0f      	adds	r7, r1, #0
    5864:	e008      	b.n	5878 <_malloc_r+0x1a0>
    5866:	6889      	ldr	r1, [r1, #8]
    5868:	42b1      	cmp	r1, r6
    586a:	d004      	beq.n	5876 <_malloc_r+0x19e>
    586c:	684f      	ldr	r7, [r1, #4]
    586e:	2003      	movs	r0, #3
    5870:	4387      	bics	r7, r0
    5872:	42bb      	cmp	r3, r7
    5874:	d3f7      	bcc.n	5866 <_malloc_r+0x18e>
    5876:	68cf      	ldr	r7, [r1, #12]
    5878:	60ef      	str	r7, [r5, #12]
    587a:	60a9      	str	r1, [r5, #8]
    587c:	60bd      	str	r5, [r7, #8]
    587e:	60cd      	str	r5, [r1, #12]
    5880:	1095      	asrs	r5, r2, #2
    5882:	2101      	movs	r1, #1
    5884:	6866      	ldr	r6, [r4, #4]
    5886:	40a9      	lsls	r1, r5
    5888:	1e0b      	subs	r3, r1, #0
    588a:	42b3      	cmp	r3, r6
    588c:	d858      	bhi.n	5940 <_malloc_r+0x268>
    588e:	420e      	tst	r6, r1
    5890:	d105      	bne.n	589e <_malloc_r+0x1c6>
    5892:	2003      	movs	r0, #3
    5894:	4382      	bics	r2, r0
    5896:	005b      	lsls	r3, r3, #1
    5898:	3204      	adds	r2, #4
    589a:	421e      	tst	r6, r3
    589c:	d0fb      	beq.n	5896 <_malloc_r+0x1be>
    589e:	00d7      	lsls	r7, r2, #3
    58a0:	193d      	adds	r5, r7, r4
    58a2:	46ac      	mov	ip, r5
    58a4:	9504      	str	r5, [sp, #16]
    58a6:	1c17      	adds	r7, r2, #0
    58a8:	9e04      	ldr	r6, [sp, #16]
    58aa:	68f5      	ldr	r5, [r6, #12]
    58ac:	e000      	b.n	58b0 <_malloc_r+0x1d8>
    58ae:	68ed      	ldr	r5, [r5, #12]
    58b0:	9804      	ldr	r0, [sp, #16]
    58b2:	2103      	movs	r1, #3
    58b4:	4285      	cmp	r5, r0
    58b6:	d025      	beq.n	5904 <_malloc_r+0x22c>
    58b8:	6868      	ldr	r0, [r5, #4]
    58ba:	9e01      	ldr	r6, [sp, #4]
    58bc:	4388      	bics	r0, r1
    58be:	9002      	str	r0, [sp, #8]
    58c0:	1b81      	subs	r1, r0, r6
    58c2:	290f      	cmp	r1, #15
    58c4:	dd11      	ble.n	58ea <_malloc_r+0x212>
    58c6:	19ab      	adds	r3, r5, r6
    58c8:	68e8      	ldr	r0, [r5, #12]
    58ca:	1c32      	adds	r2, r6, #0
    58cc:	68ae      	ldr	r6, [r5, #8]
    58ce:	2701      	movs	r7, #1
    58d0:	433a      	orrs	r2, r7
    58d2:	60f0      	str	r0, [r6, #12]
    58d4:	6086      	str	r6, [r0, #8]
    58d6:	6163      	str	r3, [r4, #20]
    58d8:	6123      	str	r3, [r4, #16]
    58da:	430f      	orrs	r7, r1
    58dc:	3408      	adds	r4, #8
    58de:	606a      	str	r2, [r5, #4]
    58e0:	60dc      	str	r4, [r3, #12]
    58e2:	609c      	str	r4, [r3, #8]
    58e4:	605f      	str	r7, [r3, #4]
    58e6:	5059      	str	r1, [r3, r1]
    58e8:	e0df      	b.n	5aaa <_malloc_r+0x3d2>
    58ea:	2900      	cmp	r1, #0
    58ec:	dbdf      	blt.n	58ae <_malloc_r+0x1d6>
    58ee:	9a02      	ldr	r2, [sp, #8]
    58f0:	68e8      	ldr	r0, [r5, #12]
    58f2:	18ac      	adds	r4, r5, r2
    58f4:	6867      	ldr	r7, [r4, #4]
    58f6:	68ae      	ldr	r6, [r5, #8]
    58f8:	2301      	movs	r3, #1
    58fa:	433b      	orrs	r3, r7
    58fc:	6063      	str	r3, [r4, #4]
    58fe:	60f0      	str	r0, [r6, #12]
    5900:	6086      	str	r6, [r0, #8]
    5902:	e0d2      	b.n	5aaa <_malloc_r+0x3d2>
    5904:	3508      	adds	r5, #8
    5906:	3701      	adds	r7, #1
    5908:	9504      	str	r5, [sp, #16]
    590a:	420f      	tst	r7, r1
    590c:	d1cc      	bne.n	58a8 <_malloc_r+0x1d0>
    590e:	4666      	mov	r6, ip
    5910:	0790      	lsls	r0, r2, #30
    5912:	d103      	bne.n	591c <_malloc_r+0x244>
    5914:	6862      	ldr	r2, [r4, #4]
    5916:	439a      	bics	r2, r3
    5918:	6062      	str	r2, [r4, #4]
    591a:	e005      	b.n	5928 <_malloc_r+0x250>
    591c:	1c35      	adds	r5, r6, #0
    591e:	6836      	ldr	r6, [r6, #0]
    5920:	3d08      	subs	r5, #8
    5922:	3a01      	subs	r2, #1
    5924:	42ae      	cmp	r6, r5
    5926:	d0f3      	beq.n	5910 <_malloc_r+0x238>
    5928:	6860      	ldr	r0, [r4, #4]
    592a:	005b      	lsls	r3, r3, #1
    592c:	4283      	cmp	r3, r0
    592e:	d807      	bhi.n	5940 <_malloc_r+0x268>
    5930:	2b00      	cmp	r3, #0
    5932:	d005      	beq.n	5940 <_malloc_r+0x268>
    5934:	1c3a      	adds	r2, r7, #0
    5936:	4218      	tst	r0, r3
    5938:	d1b1      	bne.n	589e <_malloc_r+0x1c6>
    593a:	3204      	adds	r2, #4
    593c:	005b      	lsls	r3, r3, #1
    593e:	e7fa      	b.n	5936 <_malloc_r+0x25e>
    5940:	68a6      	ldr	r6, [r4, #8]
    5942:	2303      	movs	r3, #3
    5944:	6871      	ldr	r1, [r6, #4]
    5946:	9f01      	ldr	r7, [sp, #4]
    5948:	4399      	bics	r1, r3
    594a:	9102      	str	r1, [sp, #8]
    594c:	42b9      	cmp	r1, r7
    594e:	d303      	bcc.n	5958 <_malloc_r+0x280>
    5950:	1bcb      	subs	r3, r1, r7
    5952:	2b0f      	cmp	r3, #15
    5954:	dd00      	ble.n	5958 <_malloc_r+0x280>
    5956:	e09d      	b.n	5a94 <_malloc_r+0x3bc>
    5958:	9802      	ldr	r0, [sp, #8]
    595a:	4f1e      	ldr	r7, [pc, #120]	; (59d4 <_malloc_r+0x2fc>)
    595c:	491e      	ldr	r1, [pc, #120]	; (59d8 <_malloc_r+0x300>)
    595e:	1835      	adds	r5, r6, r0
    5960:	9a01      	ldr	r2, [sp, #4]
    5962:	683b      	ldr	r3, [r7, #0]
    5964:	6888      	ldr	r0, [r1, #8]
    5966:	9505      	str	r5, [sp, #20]
    5968:	18d3      	adds	r3, r2, r3
    596a:	1c42      	adds	r2, r0, #1
    596c:	d101      	bne.n	5972 <_malloc_r+0x29a>
    596e:	3310      	adds	r3, #16
    5970:	e003      	b.n	597a <_malloc_r+0x2a2>
    5972:	4d1a      	ldr	r5, [pc, #104]	; (59dc <_malloc_r+0x304>)
    5974:	195a      	adds	r2, r3, r5
    5976:	0b13      	lsrs	r3, r2, #12
    5978:	031b      	lsls	r3, r3, #12
    597a:	9304      	str	r3, [sp, #16]
    597c:	9803      	ldr	r0, [sp, #12]
    597e:	9904      	ldr	r1, [sp, #16]
    5980:	f000 fcce 	bl	6320 <_sbrk_r>
    5984:	1c05      	adds	r5, r0, #0
    5986:	1c43      	adds	r3, r0, #1
    5988:	d074      	beq.n	5a74 <_malloc_r+0x39c>
    598a:	9905      	ldr	r1, [sp, #20]
    598c:	4288      	cmp	r0, r1
    598e:	d201      	bcs.n	5994 <_malloc_r+0x2bc>
    5990:	42a6      	cmp	r6, r4
    5992:	d16f      	bne.n	5a74 <_malloc_r+0x39c>
    5994:	687a      	ldr	r2, [r7, #4]
    5996:	9804      	ldr	r0, [sp, #16]
    5998:	1883      	adds	r3, r0, r2
    599a:	607b      	str	r3, [r7, #4]
    599c:	9f05      	ldr	r7, [sp, #20]
    599e:	42bd      	cmp	r5, r7
    59a0:	d108      	bne.n	59b4 <_malloc_r+0x2dc>
    59a2:	0529      	lsls	r1, r5, #20
    59a4:	d106      	bne.n	59b4 <_malloc_r+0x2dc>
    59a6:	9e02      	ldr	r6, [sp, #8]
    59a8:	68a5      	ldr	r5, [r4, #8]
    59aa:	2201      	movs	r2, #1
    59ac:	1984      	adds	r4, r0, r6
    59ae:	4314      	orrs	r4, r2
    59b0:	606c      	str	r4, [r5, #4]
    59b2:	e055      	b.n	5a60 <_malloc_r+0x388>
    59b4:	4c08      	ldr	r4, [pc, #32]	; (59d8 <_malloc_r+0x300>)
    59b6:	4f07      	ldr	r7, [pc, #28]	; (59d4 <_malloc_r+0x2fc>)
    59b8:	68a0      	ldr	r0, [r4, #8]
    59ba:	3001      	adds	r0, #1
    59bc:	d110      	bne.n	59e0 <_malloc_r+0x308>
    59be:	60a5      	str	r5, [r4, #8]
    59c0:	e012      	b.n	59e8 <_malloc_r+0x310>
    59c2:	46c0      	nop			; (mov r8, r8)
    59c4:	000001f7 	.word	0x000001f7
    59c8:	200004c4 	.word	0x200004c4
    59cc:	00000554 	.word	0x00000554
    59d0:	000001ff 	.word	0x000001ff
    59d4:	20000b3c 	.word	0x20000b3c
    59d8:	200008c4 	.word	0x200008c4
    59dc:	0000100f 	.word	0x0000100f
    59e0:	9a05      	ldr	r2, [sp, #20]
    59e2:	1aa9      	subs	r1, r5, r2
    59e4:	185b      	adds	r3, r3, r1
    59e6:	607b      	str	r3, [r7, #4]
    59e8:	2007      	movs	r0, #7
    59ea:	2200      	movs	r2, #0
    59ec:	4028      	ands	r0, r5
    59ee:	4290      	cmp	r0, r2
    59f0:	d002      	beq.n	59f8 <_malloc_r+0x320>
    59f2:	2408      	movs	r4, #8
    59f4:	1a22      	subs	r2, r4, r0
    59f6:	18ad      	adds	r5, r5, r2
    59f8:	2180      	movs	r1, #128	; 0x80
    59fa:	9c04      	ldr	r4, [sp, #16]
    59fc:	014b      	lsls	r3, r1, #5
    59fe:	18d0      	adds	r0, r2, r3
    5a00:	192a      	adds	r2, r5, r4
    5a02:	0511      	lsls	r1, r2, #20
    5a04:	0d0b      	lsrs	r3, r1, #20
    5a06:	1ac4      	subs	r4, r0, r3
    5a08:	1c21      	adds	r1, r4, #0
    5a0a:	9803      	ldr	r0, [sp, #12]
    5a0c:	f000 fc88 	bl	6320 <_sbrk_r>
    5a10:	1c42      	adds	r2, r0, #1
    5a12:	d101      	bne.n	5a18 <_malloc_r+0x340>
    5a14:	1c28      	adds	r0, r5, #0
    5a16:	2400      	movs	r4, #0
    5a18:	687a      	ldr	r2, [r7, #4]
    5a1a:	1b40      	subs	r0, r0, r5
    5a1c:	18a1      	adds	r1, r4, r2
    5a1e:	6079      	str	r1, [r7, #4]
    5a20:	1903      	adds	r3, r0, r4
    5a22:	4f25      	ldr	r7, [pc, #148]	; (5ab8 <_malloc_r+0x3e0>)
    5a24:	2201      	movs	r2, #1
    5a26:	4313      	orrs	r3, r2
    5a28:	60bd      	str	r5, [r7, #8]
    5a2a:	606b      	str	r3, [r5, #4]
    5a2c:	42be      	cmp	r6, r7
    5a2e:	d017      	beq.n	5a60 <_malloc_r+0x388>
    5a30:	9c02      	ldr	r4, [sp, #8]
    5a32:	2c0f      	cmp	r4, #15
    5a34:	d801      	bhi.n	5a3a <_malloc_r+0x362>
    5a36:	606a      	str	r2, [r5, #4]
    5a38:	e01c      	b.n	5a74 <_malloc_r+0x39c>
    5a3a:	9d02      	ldr	r5, [sp, #8]
    5a3c:	6877      	ldr	r7, [r6, #4]
    5a3e:	3d0c      	subs	r5, #12
    5a40:	2107      	movs	r1, #7
    5a42:	438d      	bics	r5, r1
    5a44:	403a      	ands	r2, r7
    5a46:	1970      	adds	r0, r6, r5
    5a48:	2305      	movs	r3, #5
    5a4a:	432a      	orrs	r2, r5
    5a4c:	6072      	str	r2, [r6, #4]
    5a4e:	6043      	str	r3, [r0, #4]
    5a50:	6083      	str	r3, [r0, #8]
    5a52:	2d0f      	cmp	r5, #15
    5a54:	d904      	bls.n	5a60 <_malloc_r+0x388>
    5a56:	1c31      	adds	r1, r6, #0
    5a58:	3108      	adds	r1, #8
    5a5a:	9803      	ldr	r0, [sp, #12]
    5a5c:	f7ff fd34 	bl	54c8 <_free_r>
    5a60:	4f16      	ldr	r7, [pc, #88]	; (5abc <_malloc_r+0x3e4>)
    5a62:	687b      	ldr	r3, [r7, #4]
    5a64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    5a66:	428b      	cmp	r3, r1
    5a68:	d900      	bls.n	5a6c <_malloc_r+0x394>
    5a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    5a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    5a6e:	4283      	cmp	r3, r0
    5a70:	d900      	bls.n	5a74 <_malloc_r+0x39c>
    5a72:	633b      	str	r3, [r7, #48]	; 0x30
    5a74:	4d10      	ldr	r5, [pc, #64]	; (5ab8 <_malloc_r+0x3e0>)
    5a76:	2403      	movs	r4, #3
    5a78:	68ae      	ldr	r6, [r5, #8]
    5a7a:	9f01      	ldr	r7, [sp, #4]
    5a7c:	6872      	ldr	r2, [r6, #4]
    5a7e:	43a2      	bics	r2, r4
    5a80:	1bd3      	subs	r3, r2, r7
    5a82:	42ba      	cmp	r2, r7
    5a84:	d301      	bcc.n	5a8a <_malloc_r+0x3b2>
    5a86:	2b0f      	cmp	r3, #15
    5a88:	dc04      	bgt.n	5a94 <_malloc_r+0x3bc>
    5a8a:	9803      	ldr	r0, [sp, #12]
    5a8c:	f000 f824 	bl	5ad8 <__malloc_unlock>
    5a90:	2000      	movs	r0, #0
    5a92:	e00f      	b.n	5ab4 <_malloc_r+0x3dc>
    5a94:	4808      	ldr	r0, [pc, #32]	; (5ab8 <_malloc_r+0x3e0>)
    5a96:	9e01      	ldr	r6, [sp, #4]
    5a98:	6885      	ldr	r5, [r0, #8]
    5a9a:	9a01      	ldr	r2, [sp, #4]
    5a9c:	2101      	movs	r1, #1
    5a9e:	18ac      	adds	r4, r5, r2
    5aa0:	430e      	orrs	r6, r1
    5aa2:	430b      	orrs	r3, r1
    5aa4:	606e      	str	r6, [r5, #4]
    5aa6:	6084      	str	r4, [r0, #8]
    5aa8:	6063      	str	r3, [r4, #4]
    5aaa:	9803      	ldr	r0, [sp, #12]
    5aac:	f000 f814 	bl	5ad8 <__malloc_unlock>
    5ab0:	1c28      	adds	r0, r5, #0
    5ab2:	3008      	adds	r0, #8
    5ab4:	b007      	add	sp, #28
    5ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ab8:	200004c4 	.word	0x200004c4
    5abc:	20000b3c 	.word	0x20000b3c

00005ac0 <memchr>:
    5ac0:	b2c9      	uxtb	r1, r1
    5ac2:	1882      	adds	r2, r0, r2
    5ac4:	4290      	cmp	r0, r2
    5ac6:	d004      	beq.n	5ad2 <memchr+0x12>
    5ac8:	7803      	ldrb	r3, [r0, #0]
    5aca:	428b      	cmp	r3, r1
    5acc:	d002      	beq.n	5ad4 <memchr+0x14>
    5ace:	3001      	adds	r0, #1
    5ad0:	e7f8      	b.n	5ac4 <memchr+0x4>
    5ad2:	2000      	movs	r0, #0
    5ad4:	4770      	bx	lr

00005ad6 <__malloc_lock>:
    5ad6:	4770      	bx	lr

00005ad8 <__malloc_unlock>:
    5ad8:	4770      	bx	lr
    5ada:	0000      	movs	r0, r0
    5adc:	0000      	movs	r0, r0
	...

00005ae0 <_Balloc>:
    5ae0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    5ae2:	b570      	push	{r4, r5, r6, lr}
    5ae4:	1c04      	adds	r4, r0, #0
    5ae6:	1c0d      	adds	r5, r1, #0
    5ae8:	2b00      	cmp	r3, #0
    5aea:	d008      	beq.n	5afe <_Balloc+0x1e>
    5aec:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    5aee:	00aa      	lsls	r2, r5, #2
    5af0:	1881      	adds	r1, r0, r2
    5af2:	6808      	ldr	r0, [r1, #0]
    5af4:	2800      	cmp	r0, #0
    5af6:	d00b      	beq.n	5b10 <_Balloc+0x30>
    5af8:	6804      	ldr	r4, [r0, #0]
    5afa:	600c      	str	r4, [r1, #0]
    5afc:	e014      	b.n	5b28 <_Balloc+0x48>
    5afe:	2104      	movs	r1, #4
    5b00:	2221      	movs	r2, #33	; 0x21
    5b02:	f001 f8a3 	bl	6c4c <_calloc_r>
    5b06:	64e0      	str	r0, [r4, #76]	; 0x4c
    5b08:	2800      	cmp	r0, #0
    5b0a:	d1ef      	bne.n	5aec <_Balloc+0xc>
    5b0c:	2000      	movs	r0, #0
    5b0e:	e00e      	b.n	5b2e <_Balloc+0x4e>
    5b10:	2101      	movs	r1, #1
    5b12:	1c0e      	adds	r6, r1, #0
    5b14:	40ae      	lsls	r6, r5
    5b16:	1d73      	adds	r3, r6, #5
    5b18:	009a      	lsls	r2, r3, #2
    5b1a:	1c20      	adds	r0, r4, #0
    5b1c:	f001 f896 	bl	6c4c <_calloc_r>
    5b20:	2800      	cmp	r0, #0
    5b22:	d0f3      	beq.n	5b0c <_Balloc+0x2c>
    5b24:	6045      	str	r5, [r0, #4]
    5b26:	6086      	str	r6, [r0, #8]
    5b28:	2500      	movs	r5, #0
    5b2a:	6105      	str	r5, [r0, #16]
    5b2c:	60c5      	str	r5, [r0, #12]
    5b2e:	bd70      	pop	{r4, r5, r6, pc}

00005b30 <_Bfree>:
    5b30:	2900      	cmp	r1, #0
    5b32:	d006      	beq.n	5b42 <_Bfree+0x12>
    5b34:	684a      	ldr	r2, [r1, #4]
    5b36:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    5b38:	0093      	lsls	r3, r2, #2
    5b3a:	18c3      	adds	r3, r0, r3
    5b3c:	681a      	ldr	r2, [r3, #0]
    5b3e:	600a      	str	r2, [r1, #0]
    5b40:	6019      	str	r1, [r3, #0]
    5b42:	4770      	bx	lr

00005b44 <__multadd>:
    5b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5b46:	1c0c      	adds	r4, r1, #0
    5b48:	1c1e      	adds	r6, r3, #0
    5b4a:	690d      	ldr	r5, [r1, #16]
    5b4c:	1c07      	adds	r7, r0, #0
    5b4e:	3114      	adds	r1, #20
    5b50:	2300      	movs	r3, #0
    5b52:	6808      	ldr	r0, [r1, #0]
    5b54:	3301      	adds	r3, #1
    5b56:	b280      	uxth	r0, r0
    5b58:	4350      	muls	r0, r2
    5b5a:	1986      	adds	r6, r0, r6
    5b5c:	6808      	ldr	r0, [r1, #0]
    5b5e:	46b4      	mov	ip, r6
    5b60:	0c00      	lsrs	r0, r0, #16
    5b62:	4350      	muls	r0, r2
    5b64:	0c36      	lsrs	r6, r6, #16
    5b66:	1830      	adds	r0, r6, r0
    5b68:	0c06      	lsrs	r6, r0, #16
    5b6a:	0400      	lsls	r0, r0, #16
    5b6c:	9001      	str	r0, [sp, #4]
    5b6e:	4660      	mov	r0, ip
    5b70:	b280      	uxth	r0, r0
    5b72:	4684      	mov	ip, r0
    5b74:	9801      	ldr	r0, [sp, #4]
    5b76:	4484      	add	ip, r0
    5b78:	4660      	mov	r0, ip
    5b7a:	c101      	stmia	r1!, {r0}
    5b7c:	42ab      	cmp	r3, r5
    5b7e:	dbe8      	blt.n	5b52 <__multadd+0xe>
    5b80:	2e00      	cmp	r6, #0
    5b82:	d01b      	beq.n	5bbc <__multadd+0x78>
    5b84:	68a1      	ldr	r1, [r4, #8]
    5b86:	428d      	cmp	r5, r1
    5b88:	db12      	blt.n	5bb0 <__multadd+0x6c>
    5b8a:	6861      	ldr	r1, [r4, #4]
    5b8c:	1c38      	adds	r0, r7, #0
    5b8e:	3101      	adds	r1, #1
    5b90:	f7ff ffa6 	bl	5ae0 <_Balloc>
    5b94:	6922      	ldr	r2, [r4, #16]
    5b96:	1c21      	adds	r1, r4, #0
    5b98:	3202      	adds	r2, #2
    5b9a:	9001      	str	r0, [sp, #4]
    5b9c:	310c      	adds	r1, #12
    5b9e:	0092      	lsls	r2, r2, #2
    5ba0:	300c      	adds	r0, #12
    5ba2:	f7fd fdd9 	bl	3758 <memcpy>
    5ba6:	1c21      	adds	r1, r4, #0
    5ba8:	1c38      	adds	r0, r7, #0
    5baa:	f7ff ffc1 	bl	5b30 <_Bfree>
    5bae:	9c01      	ldr	r4, [sp, #4]
    5bb0:	1d2f      	adds	r7, r5, #4
    5bb2:	00bb      	lsls	r3, r7, #2
    5bb4:	18e0      	adds	r0, r4, r3
    5bb6:	3501      	adds	r5, #1
    5bb8:	6046      	str	r6, [r0, #4]
    5bba:	6125      	str	r5, [r4, #16]
    5bbc:	1c20      	adds	r0, r4, #0
    5bbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005bc0 <__s2b>:
    5bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5bc2:	1c06      	adds	r6, r0, #0
    5bc4:	1c18      	adds	r0, r3, #0
    5bc6:	1c0f      	adds	r7, r1, #0
    5bc8:	3008      	adds	r0, #8
    5bca:	2109      	movs	r1, #9
    5bcc:	9301      	str	r3, [sp, #4]
    5bce:	1c15      	adds	r5, r2, #0
    5bd0:	f001 fa38 	bl	7044 <__aeabi_idiv>
    5bd4:	2301      	movs	r3, #1
    5bd6:	2100      	movs	r1, #0
    5bd8:	4298      	cmp	r0, r3
    5bda:	dd02      	ble.n	5be2 <__s2b+0x22>
    5bdc:	005b      	lsls	r3, r3, #1
    5bde:	3101      	adds	r1, #1
    5be0:	e7fa      	b.n	5bd8 <__s2b+0x18>
    5be2:	1c30      	adds	r0, r6, #0
    5be4:	f7ff ff7c 	bl	5ae0 <_Balloc>
    5be8:	9b08      	ldr	r3, [sp, #32]
    5bea:	1c01      	adds	r1, r0, #0
    5bec:	6143      	str	r3, [r0, #20]
    5bee:	2001      	movs	r0, #1
    5bf0:	6108      	str	r0, [r1, #16]
    5bf2:	2d09      	cmp	r5, #9
    5bf4:	dd12      	ble.n	5c1c <__s2b+0x5c>
    5bf6:	1c3a      	adds	r2, r7, #0
    5bf8:	3209      	adds	r2, #9
    5bfa:	9200      	str	r2, [sp, #0]
    5bfc:	197f      	adds	r7, r7, r5
    5bfe:	1c14      	adds	r4, r2, #0
    5c00:	7823      	ldrb	r3, [r4, #0]
    5c02:	1c30      	adds	r0, r6, #0
    5c04:	3b30      	subs	r3, #48	; 0x30
    5c06:	220a      	movs	r2, #10
    5c08:	f7ff ff9c 	bl	5b44 <__multadd>
    5c0c:	3401      	adds	r4, #1
    5c0e:	1c01      	adds	r1, r0, #0
    5c10:	42bc      	cmp	r4, r7
    5c12:	d1f5      	bne.n	5c00 <__s2b+0x40>
    5c14:	9b00      	ldr	r3, [sp, #0]
    5c16:	195f      	adds	r7, r3, r5
    5c18:	3f08      	subs	r7, #8
    5c1a:	e001      	b.n	5c20 <__s2b+0x60>
    5c1c:	370a      	adds	r7, #10
    5c1e:	2509      	movs	r5, #9
    5c20:	1c2c      	adds	r4, r5, #0
    5c22:	9801      	ldr	r0, [sp, #4]
    5c24:	4284      	cmp	r4, r0
    5c26:	da09      	bge.n	5c3c <__s2b+0x7c>
    5c28:	1b7a      	subs	r2, r7, r5
    5c2a:	5d13      	ldrb	r3, [r2, r4]
    5c2c:	1c30      	adds	r0, r6, #0
    5c2e:	3b30      	subs	r3, #48	; 0x30
    5c30:	220a      	movs	r2, #10
    5c32:	f7ff ff87 	bl	5b44 <__multadd>
    5c36:	3401      	adds	r4, #1
    5c38:	1c01      	adds	r1, r0, #0
    5c3a:	e7f2      	b.n	5c22 <__s2b+0x62>
    5c3c:	1c08      	adds	r0, r1, #0
    5c3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005c40 <__hi0bits>:
    5c40:	1c03      	adds	r3, r0, #0
    5c42:	0c02      	lsrs	r2, r0, #16
    5c44:	2000      	movs	r0, #0
    5c46:	4282      	cmp	r2, r0
    5c48:	d101      	bne.n	5c4e <__hi0bits+0xe>
    5c4a:	041b      	lsls	r3, r3, #16
    5c4c:	2010      	movs	r0, #16
    5c4e:	0e19      	lsrs	r1, r3, #24
    5c50:	d101      	bne.n	5c56 <__hi0bits+0x16>
    5c52:	3008      	adds	r0, #8
    5c54:	021b      	lsls	r3, r3, #8
    5c56:	0f1a      	lsrs	r2, r3, #28
    5c58:	d101      	bne.n	5c5e <__hi0bits+0x1e>
    5c5a:	3004      	adds	r0, #4
    5c5c:	011b      	lsls	r3, r3, #4
    5c5e:	0f99      	lsrs	r1, r3, #30
    5c60:	d101      	bne.n	5c66 <__hi0bits+0x26>
    5c62:	3002      	adds	r0, #2
    5c64:	009b      	lsls	r3, r3, #2
    5c66:	2b00      	cmp	r3, #0
    5c68:	db03      	blt.n	5c72 <__hi0bits+0x32>
    5c6a:	3001      	adds	r0, #1
    5c6c:	005a      	lsls	r2, r3, #1
    5c6e:	d400      	bmi.n	5c72 <__hi0bits+0x32>
    5c70:	2020      	movs	r0, #32
    5c72:	4770      	bx	lr

00005c74 <__lo0bits>:
    5c74:	6803      	ldr	r3, [r0, #0]
    5c76:	1c02      	adds	r2, r0, #0
    5c78:	2007      	movs	r0, #7
    5c7a:	4018      	ands	r0, r3
    5c7c:	d00c      	beq.n	5c98 <__lo0bits+0x24>
    5c7e:	2101      	movs	r1, #1
    5c80:	2000      	movs	r0, #0
    5c82:	420b      	tst	r3, r1
    5c84:	d122      	bne.n	5ccc <__lo0bits+0x58>
    5c86:	2002      	movs	r0, #2
    5c88:	4203      	tst	r3, r0
    5c8a:	d003      	beq.n	5c94 <__lo0bits+0x20>
    5c8c:	40cb      	lsrs	r3, r1
    5c8e:	6013      	str	r3, [r2, #0]
    5c90:	1c08      	adds	r0, r1, #0
    5c92:	e01b      	b.n	5ccc <__lo0bits+0x58>
    5c94:	089b      	lsrs	r3, r3, #2
    5c96:	e016      	b.n	5cc6 <__lo0bits+0x52>
    5c98:	b299      	uxth	r1, r3
    5c9a:	2900      	cmp	r1, #0
    5c9c:	d101      	bne.n	5ca2 <__lo0bits+0x2e>
    5c9e:	0c1b      	lsrs	r3, r3, #16
    5ca0:	2010      	movs	r0, #16
    5ca2:	b2d9      	uxtb	r1, r3
    5ca4:	2900      	cmp	r1, #0
    5ca6:	d101      	bne.n	5cac <__lo0bits+0x38>
    5ca8:	3008      	adds	r0, #8
    5caa:	0a1b      	lsrs	r3, r3, #8
    5cac:	0719      	lsls	r1, r3, #28
    5cae:	d101      	bne.n	5cb4 <__lo0bits+0x40>
    5cb0:	3004      	adds	r0, #4
    5cb2:	091b      	lsrs	r3, r3, #4
    5cb4:	0799      	lsls	r1, r3, #30
    5cb6:	d101      	bne.n	5cbc <__lo0bits+0x48>
    5cb8:	3002      	adds	r0, #2
    5cba:	089b      	lsrs	r3, r3, #2
    5cbc:	07d9      	lsls	r1, r3, #31
    5cbe:	d402      	bmi.n	5cc6 <__lo0bits+0x52>
    5cc0:	085b      	lsrs	r3, r3, #1
    5cc2:	d002      	beq.n	5cca <__lo0bits+0x56>
    5cc4:	3001      	adds	r0, #1
    5cc6:	6013      	str	r3, [r2, #0]
    5cc8:	e000      	b.n	5ccc <__lo0bits+0x58>
    5cca:	2020      	movs	r0, #32
    5ccc:	4770      	bx	lr

00005cce <__i2b>:
    5cce:	b510      	push	{r4, lr}
    5cd0:	1c0c      	adds	r4, r1, #0
    5cd2:	2101      	movs	r1, #1
    5cd4:	f7ff ff04 	bl	5ae0 <_Balloc>
    5cd8:	2301      	movs	r3, #1
    5cda:	6144      	str	r4, [r0, #20]
    5cdc:	6103      	str	r3, [r0, #16]
    5cde:	bd10      	pop	{r4, pc}

00005ce0 <__multiply>:
    5ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ce2:	1c0c      	adds	r4, r1, #0
    5ce4:	1c15      	adds	r5, r2, #0
    5ce6:	6909      	ldr	r1, [r1, #16]
    5ce8:	6912      	ldr	r2, [r2, #16]
    5cea:	b089      	sub	sp, #36	; 0x24
    5cec:	4291      	cmp	r1, r2
    5cee:	da02      	bge.n	5cf6 <__multiply+0x16>
    5cf0:	1c23      	adds	r3, r4, #0
    5cf2:	1c2c      	adds	r4, r5, #0
    5cf4:	1c1d      	adds	r5, r3, #0
    5cf6:	6927      	ldr	r7, [r4, #16]
    5cf8:	692e      	ldr	r6, [r5, #16]
    5cfa:	68a2      	ldr	r2, [r4, #8]
    5cfc:	19bb      	adds	r3, r7, r6
    5cfe:	6861      	ldr	r1, [r4, #4]
    5d00:	9301      	str	r3, [sp, #4]
    5d02:	4293      	cmp	r3, r2
    5d04:	dd00      	ble.n	5d08 <__multiply+0x28>
    5d06:	3101      	adds	r1, #1
    5d08:	f7ff feea 	bl	5ae0 <_Balloc>
    5d0c:	9901      	ldr	r1, [sp, #4]
    5d0e:	1c03      	adds	r3, r0, #0
    5d10:	3104      	adds	r1, #4
    5d12:	008a      	lsls	r2, r1, #2
    5d14:	1881      	adds	r1, r0, r2
    5d16:	3314      	adds	r3, #20
    5d18:	3104      	adds	r1, #4
    5d1a:	9103      	str	r1, [sp, #12]
    5d1c:	1c1a      	adds	r2, r3, #0
    5d1e:	9903      	ldr	r1, [sp, #12]
    5d20:	428a      	cmp	r2, r1
    5d22:	d202      	bcs.n	5d2a <__multiply+0x4a>
    5d24:	2100      	movs	r1, #0
    5d26:	c202      	stmia	r2!, {r1}
    5d28:	e7f9      	b.n	5d1e <__multiply+0x3e>
    5d2a:	3704      	adds	r7, #4
    5d2c:	3604      	adds	r6, #4
    5d2e:	00bf      	lsls	r7, r7, #2
    5d30:	00b6      	lsls	r6, r6, #2
    5d32:	1c22      	adds	r2, r4, #0
    5d34:	19a9      	adds	r1, r5, r6
    5d36:	19e4      	adds	r4, r4, r7
    5d38:	3214      	adds	r2, #20
    5d3a:	3404      	adds	r4, #4
    5d3c:	3104      	adds	r1, #4
    5d3e:	3514      	adds	r5, #20
    5d40:	9204      	str	r2, [sp, #16]
    5d42:	9405      	str	r4, [sp, #20]
    5d44:	9106      	str	r1, [sp, #24]
    5d46:	9500      	str	r5, [sp, #0]
    5d48:	469c      	mov	ip, r3
    5d4a:	9d00      	ldr	r5, [sp, #0]
    5d4c:	9b06      	ldr	r3, [sp, #24]
    5d4e:	9507      	str	r5, [sp, #28]
    5d50:	429d      	cmp	r5, r3
    5d52:	d246      	bcs.n	5de2 <__multiply+0x102>
    5d54:	9d00      	ldr	r5, [sp, #0]
    5d56:	882c      	ldrh	r4, [r5, #0]
    5d58:	2c00      	cmp	r4, #0
    5d5a:	d01b      	beq.n	5d94 <__multiply+0xb4>
    5d5c:	9904      	ldr	r1, [sp, #16]
    5d5e:	4663      	mov	r3, ip
    5d60:	2200      	movs	r2, #0
    5d62:	c940      	ldmia	r1!, {r6}
    5d64:	681d      	ldr	r5, [r3, #0]
    5d66:	b2b7      	uxth	r7, r6
    5d68:	4367      	muls	r7, r4
    5d6a:	9702      	str	r7, [sp, #8]
    5d6c:	b2af      	uxth	r7, r5
    5d6e:	9d02      	ldr	r5, [sp, #8]
    5d70:	0c36      	lsrs	r6, r6, #16
    5d72:	19ef      	adds	r7, r5, r7
    5d74:	4366      	muls	r6, r4
    5d76:	18bf      	adds	r7, r7, r2
    5d78:	681a      	ldr	r2, [r3, #0]
    5d7a:	0c15      	lsrs	r5, r2, #16
    5d7c:	1976      	adds	r6, r6, r5
    5d7e:	0c3a      	lsrs	r2, r7, #16
    5d80:	18b5      	adds	r5, r6, r2
    5d82:	042e      	lsls	r6, r5, #16
    5d84:	0c2a      	lsrs	r2, r5, #16
    5d86:	b2bf      	uxth	r7, r7
    5d88:	9d05      	ldr	r5, [sp, #20]
    5d8a:	433e      	orrs	r6, r7
    5d8c:	c340      	stmia	r3!, {r6}
    5d8e:	428d      	cmp	r5, r1
    5d90:	d8e7      	bhi.n	5d62 <__multiply+0x82>
    5d92:	601a      	str	r2, [r3, #0]
    5d94:	9c00      	ldr	r4, [sp, #0]
    5d96:	9907      	ldr	r1, [sp, #28]
    5d98:	3404      	adds	r4, #4
    5d9a:	9400      	str	r4, [sp, #0]
    5d9c:	884c      	ldrh	r4, [r1, #2]
    5d9e:	2c00      	cmp	r4, #0
    5da0:	d01c      	beq.n	5ddc <__multiply+0xfc>
    5da2:	4663      	mov	r3, ip
    5da4:	681a      	ldr	r2, [r3, #0]
    5da6:	9904      	ldr	r1, [sp, #16]
    5da8:	2500      	movs	r5, #0
    5daa:	9107      	str	r1, [sp, #28]
    5dac:	c940      	ldmia	r1!, {r6}
    5dae:	b292      	uxth	r2, r2
    5db0:	b2b7      	uxth	r7, r6
    5db2:	4367      	muls	r7, r4
    5db4:	9702      	str	r7, [sp, #8]
    5db6:	9e02      	ldr	r6, [sp, #8]
    5db8:	885f      	ldrh	r7, [r3, #2]
    5dba:	19f7      	adds	r7, r6, r7
    5dbc:	197d      	adds	r5, r7, r5
    5dbe:	042e      	lsls	r6, r5, #16
    5dc0:	4332      	orrs	r2, r6
    5dc2:	9e07      	ldr	r6, [sp, #28]
    5dc4:	c304      	stmia	r3!, {r2}
    5dc6:	8872      	ldrh	r2, [r6, #2]
    5dc8:	881f      	ldrh	r7, [r3, #0]
    5dca:	4362      	muls	r2, r4
    5dcc:	0c2d      	lsrs	r5, r5, #16
    5dce:	18bf      	adds	r7, r7, r2
    5dd0:	9e05      	ldr	r6, [sp, #20]
    5dd2:	197a      	adds	r2, r7, r5
    5dd4:	0c15      	lsrs	r5, r2, #16
    5dd6:	428e      	cmp	r6, r1
    5dd8:	d8e7      	bhi.n	5daa <__multiply+0xca>
    5dda:	601a      	str	r2, [r3, #0]
    5ddc:	2404      	movs	r4, #4
    5dde:	44a4      	add	ip, r4
    5de0:	e7b3      	b.n	5d4a <__multiply+0x6a>
    5de2:	9e03      	ldr	r6, [sp, #12]
    5de4:	9a01      	ldr	r2, [sp, #4]
    5de6:	2a00      	cmp	r2, #0
    5de8:	dc03      	bgt.n	5df2 <__multiply+0x112>
    5dea:	9c01      	ldr	r4, [sp, #4]
    5dec:	6104      	str	r4, [r0, #16]
    5dee:	b009      	add	sp, #36	; 0x24
    5df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5df2:	3e04      	subs	r6, #4
    5df4:	6837      	ldr	r7, [r6, #0]
    5df6:	2f00      	cmp	r7, #0
    5df8:	d1f7      	bne.n	5dea <__multiply+0x10a>
    5dfa:	9901      	ldr	r1, [sp, #4]
    5dfc:	3901      	subs	r1, #1
    5dfe:	9101      	str	r1, [sp, #4]
    5e00:	e7f0      	b.n	5de4 <__multiply+0x104>

00005e02 <__pow5mult>:
    5e02:	2303      	movs	r3, #3
    5e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5e06:	4013      	ands	r3, r2
    5e08:	1c05      	adds	r5, r0, #0
    5e0a:	1c0e      	adds	r6, r1, #0
    5e0c:	1c17      	adds	r7, r2, #0
    5e0e:	2b00      	cmp	r3, #0
    5e10:	d008      	beq.n	5e24 <__pow5mult+0x22>
    5e12:	3b01      	subs	r3, #1
    5e14:	4a1a      	ldr	r2, [pc, #104]	; (5e80 <__pow5mult+0x7e>)
    5e16:	0098      	lsls	r0, r3, #2
    5e18:	5882      	ldr	r2, [r0, r2]
    5e1a:	2300      	movs	r3, #0
    5e1c:	1c28      	adds	r0, r5, #0
    5e1e:	f7ff fe91 	bl	5b44 <__multadd>
    5e22:	1c06      	adds	r6, r0, #0
    5e24:	10bf      	asrs	r7, r7, #2
    5e26:	d029      	beq.n	5e7c <__pow5mult+0x7a>
    5e28:	6cac      	ldr	r4, [r5, #72]	; 0x48
    5e2a:	2c00      	cmp	r4, #0
    5e2c:	d10f      	bne.n	5e4e <__pow5mult+0x4c>
    5e2e:	4915      	ldr	r1, [pc, #84]	; (5e84 <__pow5mult+0x82>)
    5e30:	1c28      	adds	r0, r5, #0
    5e32:	f7ff ff4c 	bl	5cce <__i2b>
    5e36:	2100      	movs	r1, #0
    5e38:	64a8      	str	r0, [r5, #72]	; 0x48
    5e3a:	1c04      	adds	r4, r0, #0
    5e3c:	6001      	str	r1, [r0, #0]
    5e3e:	e006      	b.n	5e4e <__pow5mult+0x4c>
    5e40:	107f      	asrs	r7, r7, #1
    5e42:	d01b      	beq.n	5e7c <__pow5mult+0x7a>
    5e44:	6820      	ldr	r0, [r4, #0]
    5e46:	9001      	str	r0, [sp, #4]
    5e48:	2800      	cmp	r0, #0
    5e4a:	d00e      	beq.n	5e6a <__pow5mult+0x68>
    5e4c:	1c04      	adds	r4, r0, #0
    5e4e:	07fb      	lsls	r3, r7, #31
    5e50:	d5f6      	bpl.n	5e40 <__pow5mult+0x3e>
    5e52:	1c31      	adds	r1, r6, #0
    5e54:	1c22      	adds	r2, r4, #0
    5e56:	1c28      	adds	r0, r5, #0
    5e58:	f7ff ff42 	bl	5ce0 <__multiply>
    5e5c:	1c31      	adds	r1, r6, #0
    5e5e:	9001      	str	r0, [sp, #4]
    5e60:	1c28      	adds	r0, r5, #0
    5e62:	f7ff fe65 	bl	5b30 <_Bfree>
    5e66:	9e01      	ldr	r6, [sp, #4]
    5e68:	e7ea      	b.n	5e40 <__pow5mult+0x3e>
    5e6a:	1c21      	adds	r1, r4, #0
    5e6c:	1c22      	adds	r2, r4, #0
    5e6e:	1c28      	adds	r0, r5, #0
    5e70:	f7ff ff36 	bl	5ce0 <__multiply>
    5e74:	6020      	str	r0, [r4, #0]
    5e76:	9c01      	ldr	r4, [sp, #4]
    5e78:	6004      	str	r4, [r0, #0]
    5e7a:	e7e7      	b.n	5e4c <__pow5mult+0x4a>
    5e7c:	1c30      	adds	r0, r6, #0
    5e7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5e80:	00009b88 	.word	0x00009b88
    5e84:	00000271 	.word	0x00000271

00005e88 <__lshift>:
    5e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e8a:	1c0c      	adds	r4, r1, #0
    5e8c:	1156      	asrs	r6, r2, #5
    5e8e:	1c17      	adds	r7, r2, #0
    5e90:	6922      	ldr	r2, [r4, #16]
    5e92:	b085      	sub	sp, #20
    5e94:	9003      	str	r0, [sp, #12]
    5e96:	18b0      	adds	r0, r6, r2
    5e98:	9002      	str	r0, [sp, #8]
    5e9a:	6849      	ldr	r1, [r1, #4]
    5e9c:	3001      	adds	r0, #1
    5e9e:	68a3      	ldr	r3, [r4, #8]
    5ea0:	9001      	str	r0, [sp, #4]
    5ea2:	9d01      	ldr	r5, [sp, #4]
    5ea4:	429d      	cmp	r5, r3
    5ea6:	dd02      	ble.n	5eae <__lshift+0x26>
    5ea8:	3101      	adds	r1, #1
    5eaa:	005b      	lsls	r3, r3, #1
    5eac:	e7f9      	b.n	5ea2 <__lshift+0x1a>
    5eae:	9803      	ldr	r0, [sp, #12]
    5eb0:	f7ff fe16 	bl	5ae0 <_Balloc>
    5eb4:	2200      	movs	r2, #0
    5eb6:	1c05      	adds	r5, r0, #0
    5eb8:	3014      	adds	r0, #20
    5eba:	42b2      	cmp	r2, r6
    5ebc:	da03      	bge.n	5ec6 <__lshift+0x3e>
    5ebe:	2100      	movs	r1, #0
    5ec0:	c002      	stmia	r0!, {r1}
    5ec2:	3201      	adds	r2, #1
    5ec4:	e7f9      	b.n	5eba <__lshift+0x32>
    5ec6:	43f3      	mvns	r3, r6
    5ec8:	17d9      	asrs	r1, r3, #31
    5eca:	6922      	ldr	r2, [r4, #16]
    5ecc:	400e      	ands	r6, r1
    5ece:	3604      	adds	r6, #4
    5ed0:	3204      	adds	r2, #4
    5ed2:	00b6      	lsls	r6, r6, #2
    5ed4:	0090      	lsls	r0, r2, #2
    5ed6:	19ae      	adds	r6, r5, r6
    5ed8:	1c23      	adds	r3, r4, #0
    5eda:	1820      	adds	r0, r4, r0
    5edc:	211f      	movs	r1, #31
    5ede:	3604      	adds	r6, #4
    5ee0:	3314      	adds	r3, #20
    5ee2:	3004      	adds	r0, #4
    5ee4:	400f      	ands	r7, r1
    5ee6:	d013      	beq.n	5f10 <__lshift+0x88>
    5ee8:	2220      	movs	r2, #32
    5eea:	1bd1      	subs	r1, r2, r7
    5eec:	468c      	mov	ip, r1
    5eee:	2200      	movs	r2, #0
    5ef0:	6819      	ldr	r1, [r3, #0]
    5ef2:	40b9      	lsls	r1, r7
    5ef4:	430a      	orrs	r2, r1
    5ef6:	c604      	stmia	r6!, {r2}
    5ef8:	cb04      	ldmia	r3!, {r2}
    5efa:	4661      	mov	r1, ip
    5efc:	40ca      	lsrs	r2, r1
    5efe:	4283      	cmp	r3, r0
    5f00:	d3f6      	bcc.n	5ef0 <__lshift+0x68>
    5f02:	6032      	str	r2, [r6, #0]
    5f04:	2a00      	cmp	r2, #0
    5f06:	d007      	beq.n	5f18 <__lshift+0x90>
    5f08:	9e02      	ldr	r6, [sp, #8]
    5f0a:	3602      	adds	r6, #2
    5f0c:	9601      	str	r6, [sp, #4]
    5f0e:	e003      	b.n	5f18 <__lshift+0x90>
    5f10:	cb80      	ldmia	r3!, {r7}
    5f12:	c680      	stmia	r6!, {r7}
    5f14:	4298      	cmp	r0, r3
    5f16:	d8fb      	bhi.n	5f10 <__lshift+0x88>
    5f18:	9b01      	ldr	r3, [sp, #4]
    5f1a:	9803      	ldr	r0, [sp, #12]
    5f1c:	3b01      	subs	r3, #1
    5f1e:	612b      	str	r3, [r5, #16]
    5f20:	1c21      	adds	r1, r4, #0
    5f22:	f7ff fe05 	bl	5b30 <_Bfree>
    5f26:	1c28      	adds	r0, r5, #0
    5f28:	b005      	add	sp, #20
    5f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005f2c <__mcmp>:
    5f2c:	b530      	push	{r4, r5, lr}
    5f2e:	690a      	ldr	r2, [r1, #16]
    5f30:	6904      	ldr	r4, [r0, #16]
    5f32:	1c03      	adds	r3, r0, #0
    5f34:	1aa0      	subs	r0, r4, r2
    5f36:	d114      	bne.n	5f62 <__mcmp+0x36>
    5f38:	3204      	adds	r2, #4
    5f3a:	0092      	lsls	r2, r2, #2
    5f3c:	1c1d      	adds	r5, r3, #0
    5f3e:	1889      	adds	r1, r1, r2
    5f40:	189b      	adds	r3, r3, r2
    5f42:	3514      	adds	r5, #20
    5f44:	3304      	adds	r3, #4
    5f46:	3104      	adds	r1, #4
    5f48:	3b04      	subs	r3, #4
    5f4a:	3904      	subs	r1, #4
    5f4c:	681c      	ldr	r4, [r3, #0]
    5f4e:	680a      	ldr	r2, [r1, #0]
    5f50:	4294      	cmp	r4, r2
    5f52:	d004      	beq.n	5f5e <__mcmp+0x32>
    5f54:	4294      	cmp	r4, r2
    5f56:	41ad      	sbcs	r5, r5
    5f58:	2001      	movs	r0, #1
    5f5a:	4328      	orrs	r0, r5
    5f5c:	e001      	b.n	5f62 <__mcmp+0x36>
    5f5e:	42ab      	cmp	r3, r5
    5f60:	d8f2      	bhi.n	5f48 <__mcmp+0x1c>
    5f62:	bd30      	pop	{r4, r5, pc}

00005f64 <__mdiff>:
    5f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f66:	1c07      	adds	r7, r0, #0
    5f68:	b085      	sub	sp, #20
    5f6a:	1c08      	adds	r0, r1, #0
    5f6c:	1c0c      	adds	r4, r1, #0
    5f6e:	1c11      	adds	r1, r2, #0
    5f70:	1c15      	adds	r5, r2, #0
    5f72:	f7ff ffdb 	bl	5f2c <__mcmp>
    5f76:	1e06      	subs	r6, r0, #0
    5f78:	d107      	bne.n	5f8a <__mdiff+0x26>
    5f7a:	1c38      	adds	r0, r7, #0
    5f7c:	1c31      	adds	r1, r6, #0
    5f7e:	f7ff fdaf 	bl	5ae0 <_Balloc>
    5f82:	2701      	movs	r7, #1
    5f84:	6107      	str	r7, [r0, #16]
    5f86:	6146      	str	r6, [r0, #20]
    5f88:	e051      	b.n	602e <__mdiff+0xca>
    5f8a:	2800      	cmp	r0, #0
    5f8c:	db01      	blt.n	5f92 <__mdiff+0x2e>
    5f8e:	2600      	movs	r6, #0
    5f90:	e003      	b.n	5f9a <__mdiff+0x36>
    5f92:	1c23      	adds	r3, r4, #0
    5f94:	2601      	movs	r6, #1
    5f96:	1c2c      	adds	r4, r5, #0
    5f98:	1c1d      	adds	r5, r3, #0
    5f9a:	6861      	ldr	r1, [r4, #4]
    5f9c:	1c38      	adds	r0, r7, #0
    5f9e:	f7ff fd9f 	bl	5ae0 <_Balloc>
    5fa2:	6921      	ldr	r1, [r4, #16]
    5fa4:	60c6      	str	r6, [r0, #12]
    5fa6:	692e      	ldr	r6, [r5, #16]
    5fa8:	1c0a      	adds	r2, r1, #0
    5faa:	3204      	adds	r2, #4
    5fac:	3604      	adds	r6, #4
    5fae:	0097      	lsls	r7, r2, #2
    5fb0:	9101      	str	r1, [sp, #4]
    5fb2:	00b1      	lsls	r1, r6, #2
    5fb4:	19e3      	adds	r3, r4, r7
    5fb6:	186a      	adds	r2, r5, r1
    5fb8:	3204      	adds	r2, #4
    5fba:	3304      	adds	r3, #4
    5fbc:	1c06      	adds	r6, r0, #0
    5fbe:	9203      	str	r2, [sp, #12]
    5fc0:	9302      	str	r3, [sp, #8]
    5fc2:	3414      	adds	r4, #20
    5fc4:	3514      	adds	r5, #20
    5fc6:	3614      	adds	r6, #20
    5fc8:	2200      	movs	r2, #0
    5fca:	cc80      	ldmia	r4!, {r7}
    5fcc:	cd02      	ldmia	r5!, {r1}
    5fce:	46bc      	mov	ip, r7
    5fd0:	b2bf      	uxth	r7, r7
    5fd2:	18ba      	adds	r2, r7, r2
    5fd4:	b28b      	uxth	r3, r1
    5fd6:	4667      	mov	r7, ip
    5fd8:	1ad3      	subs	r3, r2, r3
    5fda:	0c09      	lsrs	r1, r1, #16
    5fdc:	0c3a      	lsrs	r2, r7, #16
    5fde:	1a57      	subs	r7, r2, r1
    5fe0:	141a      	asrs	r2, r3, #16
    5fe2:	18b9      	adds	r1, r7, r2
    5fe4:	468c      	mov	ip, r1
    5fe6:	4667      	mov	r7, ip
    5fe8:	143a      	asrs	r2, r7, #16
    5fea:	b29b      	uxth	r3, r3
    5fec:	043f      	lsls	r7, r7, #16
    5fee:	433b      	orrs	r3, r7
    5ff0:	c608      	stmia	r6!, {r3}
    5ff2:	9b03      	ldr	r3, [sp, #12]
    5ff4:	1c21      	adds	r1, r4, #0
    5ff6:	1c37      	adds	r7, r6, #0
    5ff8:	42ab      	cmp	r3, r5
    5ffa:	d8e6      	bhi.n	5fca <__mdiff+0x66>
    5ffc:	9c02      	ldr	r4, [sp, #8]
    5ffe:	42a1      	cmp	r1, r4
    6000:	d20b      	bcs.n	601a <__mdiff+0xb6>
    6002:	c908      	ldmia	r1!, {r3}
    6004:	b29c      	uxth	r4, r3
    6006:	18a4      	adds	r4, r4, r2
    6008:	1425      	asrs	r5, r4, #16
    600a:	0c1e      	lsrs	r6, r3, #16
    600c:	19ab      	adds	r3, r5, r6
    600e:	041d      	lsls	r5, r3, #16
    6010:	b2a4      	uxth	r4, r4
    6012:	432c      	orrs	r4, r5
    6014:	141a      	asrs	r2, r3, #16
    6016:	c710      	stmia	r7!, {r4}
    6018:	e7f0      	b.n	5ffc <__mdiff+0x98>
    601a:	3f04      	subs	r7, #4
    601c:	683d      	ldr	r5, [r7, #0]
    601e:	2d00      	cmp	r5, #0
    6020:	d103      	bne.n	602a <__mdiff+0xc6>
    6022:	9a01      	ldr	r2, [sp, #4]
    6024:	3a01      	subs	r2, #1
    6026:	9201      	str	r2, [sp, #4]
    6028:	e7f7      	b.n	601a <__mdiff+0xb6>
    602a:	9e01      	ldr	r6, [sp, #4]
    602c:	6106      	str	r6, [r0, #16]
    602e:	b005      	add	sp, #20
    6030:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006032 <__ulp>:
    6032:	4b0e      	ldr	r3, [pc, #56]	; (606c <__ulp+0x3a>)
    6034:	4a0e      	ldr	r2, [pc, #56]	; (6070 <__ulp+0x3e>)
    6036:	400b      	ands	r3, r1
    6038:	1898      	adds	r0, r3, r2
    603a:	b510      	push	{r4, lr}
    603c:	2800      	cmp	r0, #0
    603e:	dd01      	ble.n	6044 <__ulp+0x12>
    6040:	1c01      	adds	r1, r0, #0
    6042:	e009      	b.n	6058 <__ulp+0x26>
    6044:	4241      	negs	r1, r0
    6046:	150b      	asrs	r3, r1, #20
    6048:	2000      	movs	r0, #0
    604a:	2100      	movs	r1, #0
    604c:	2b13      	cmp	r3, #19
    604e:	dc05      	bgt.n	605c <__ulp+0x2a>
    6050:	2180      	movs	r1, #128	; 0x80
    6052:	030a      	lsls	r2, r1, #12
    6054:	1c11      	adds	r1, r2, #0
    6056:	4119      	asrs	r1, r3
    6058:	2000      	movs	r0, #0
    605a:	e006      	b.n	606a <__ulp+0x38>
    605c:	2201      	movs	r2, #1
    605e:	2b32      	cmp	r3, #50	; 0x32
    6060:	dc02      	bgt.n	6068 <__ulp+0x36>
    6062:	2433      	movs	r4, #51	; 0x33
    6064:	1ae0      	subs	r0, r4, r3
    6066:	4082      	lsls	r2, r0
    6068:	1c10      	adds	r0, r2, #0
    606a:	bd10      	pop	{r4, pc}
    606c:	7ff00000 	.word	0x7ff00000
    6070:	fcc00000 	.word	0xfcc00000

00006074 <__b2d>:
    6074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6076:	6904      	ldr	r4, [r0, #16]
    6078:	1c0f      	adds	r7, r1, #0
    607a:	3404      	adds	r4, #4
    607c:	00a1      	lsls	r1, r4, #2
    607e:	1844      	adds	r4, r0, r1
    6080:	6825      	ldr	r5, [r4, #0]
    6082:	1c06      	adds	r6, r0, #0
    6084:	1c28      	adds	r0, r5, #0
    6086:	f7ff fddb 	bl	5c40 <__hi0bits>
    608a:	2320      	movs	r3, #32
    608c:	1a1a      	subs	r2, r3, r0
    608e:	603a      	str	r2, [r7, #0]
    6090:	3614      	adds	r6, #20
    6092:	4f1c      	ldr	r7, [pc, #112]	; (6104 <__b2d+0x90>)
    6094:	280a      	cmp	r0, #10
    6096:	dc11      	bgt.n	60bc <__b2d+0x48>
    6098:	210b      	movs	r1, #11
    609a:	1a09      	subs	r1, r1, r0
    609c:	1c2a      	adds	r2, r5, #0
    609e:	40ca      	lsrs	r2, r1
    60a0:	4694      	mov	ip, r2
    60a2:	4663      	mov	r3, ip
    60a4:	433b      	orrs	r3, r7
    60a6:	2700      	movs	r7, #0
    60a8:	42b4      	cmp	r4, r6
    60aa:	d901      	bls.n	60b0 <__b2d+0x3c>
    60ac:	3c04      	subs	r4, #4
    60ae:	6827      	ldr	r7, [r4, #0]
    60b0:	3015      	adds	r0, #21
    60b2:	40cf      	lsrs	r7, r1
    60b4:	4085      	lsls	r5, r0
    60b6:	1c38      	adds	r0, r7, #0
    60b8:	4328      	orrs	r0, r5
    60ba:	e020      	b.n	60fe <__b2d+0x8a>
    60bc:	2100      	movs	r1, #0
    60be:	42a6      	cmp	r6, r4
    60c0:	d201      	bcs.n	60c6 <__b2d+0x52>
    60c2:	3c04      	subs	r4, #4
    60c4:	6821      	ldr	r1, [r4, #0]
    60c6:	230b      	movs	r3, #11
    60c8:	425a      	negs	r2, r3
    60ca:	1813      	adds	r3, r2, r0
    60cc:	469c      	mov	ip, r3
    60ce:	2b00      	cmp	r3, #0
    60d0:	d012      	beq.n	60f8 <__b2d+0x84>
    60d2:	409d      	lsls	r5, r3
    60d4:	222b      	movs	r2, #43	; 0x2b
    60d6:	432f      	orrs	r7, r5
    60d8:	1a10      	subs	r0, r2, r0
    60da:	1c0d      	adds	r5, r1, #0
    60dc:	1c3b      	adds	r3, r7, #0
    60de:	40c5      	lsrs	r5, r0
    60e0:	432b      	orrs	r3, r5
    60e2:	2700      	movs	r7, #0
    60e4:	42b4      	cmp	r4, r6
    60e6:	d901      	bls.n	60ec <__b2d+0x78>
    60e8:	3c04      	subs	r4, #4
    60ea:	6827      	ldr	r7, [r4, #0]
    60ec:	40c7      	lsrs	r7, r0
    60ee:	4664      	mov	r4, ip
    60f0:	40a1      	lsls	r1, r4
    60f2:	1c38      	adds	r0, r7, #0
    60f4:	4308      	orrs	r0, r1
    60f6:	e002      	b.n	60fe <__b2d+0x8a>
    60f8:	1c3b      	adds	r3, r7, #0
    60fa:	432b      	orrs	r3, r5
    60fc:	1c08      	adds	r0, r1, #0
    60fe:	1c19      	adds	r1, r3, #0
    6100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6102:	46c0      	nop			; (mov r8, r8)
    6104:	3ff00000 	.word	0x3ff00000

00006108 <__d2b>:
    6108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    610a:	2101      	movs	r1, #1
    610c:	1c1d      	adds	r5, r3, #0
    610e:	1c14      	adds	r4, r2, #0
    6110:	f7ff fce6 	bl	5ae0 <_Balloc>
    6114:	032b      	lsls	r3, r5, #12
    6116:	0069      	lsls	r1, r5, #1
    6118:	1c06      	adds	r6, r0, #0
    611a:	0d4d      	lsrs	r5, r1, #21
    611c:	0b18      	lsrs	r0, r3, #12
    611e:	2d00      	cmp	r5, #0
    6120:	d002      	beq.n	6128 <__d2b+0x20>
    6122:	2280      	movs	r2, #128	; 0x80
    6124:	0357      	lsls	r7, r2, #13
    6126:	4338      	orrs	r0, r7
    6128:	9001      	str	r0, [sp, #4]
    612a:	2c00      	cmp	r4, #0
    612c:	d019      	beq.n	6162 <__d2b+0x5a>
    612e:	4668      	mov	r0, sp
    6130:	9400      	str	r4, [sp, #0]
    6132:	f7ff fd9f 	bl	5c74 <__lo0bits>
    6136:	9a00      	ldr	r2, [sp, #0]
    6138:	2800      	cmp	r0, #0
    613a:	d009      	beq.n	6150 <__d2b+0x48>
    613c:	9b01      	ldr	r3, [sp, #4]
    613e:	2120      	movs	r1, #32
    6140:	1c1c      	adds	r4, r3, #0
    6142:	1a0f      	subs	r7, r1, r0
    6144:	40bc      	lsls	r4, r7
    6146:	4322      	orrs	r2, r4
    6148:	40c3      	lsrs	r3, r0
    614a:	6172      	str	r2, [r6, #20]
    614c:	9301      	str	r3, [sp, #4]
    614e:	e000      	b.n	6152 <__d2b+0x4a>
    6150:	6172      	str	r2, [r6, #20]
    6152:	9a01      	ldr	r2, [sp, #4]
    6154:	2702      	movs	r7, #2
    6156:	4253      	negs	r3, r2
    6158:	4153      	adcs	r3, r2
    615a:	1aff      	subs	r7, r7, r3
    615c:	61b2      	str	r2, [r6, #24]
    615e:	6137      	str	r7, [r6, #16]
    6160:	e007      	b.n	6172 <__d2b+0x6a>
    6162:	a801      	add	r0, sp, #4
    6164:	f7ff fd86 	bl	5c74 <__lo0bits>
    6168:	9c01      	ldr	r4, [sp, #4]
    616a:	2701      	movs	r7, #1
    616c:	6174      	str	r4, [r6, #20]
    616e:	6137      	str	r7, [r6, #16]
    6170:	3020      	adds	r0, #32
    6172:	2d00      	cmp	r5, #0
    6174:	d009      	beq.n	618a <__d2b+0x82>
    6176:	4c0d      	ldr	r4, [pc, #52]	; (61ac <__d2b+0xa4>)
    6178:	2735      	movs	r7, #53	; 0x35
    617a:	1929      	adds	r1, r5, r4
    617c:	180a      	adds	r2, r1, r0
    617e:	1a3d      	subs	r5, r7, r0
    6180:	9b08      	ldr	r3, [sp, #32]
    6182:	9809      	ldr	r0, [sp, #36]	; 0x24
    6184:	601a      	str	r2, [r3, #0]
    6186:	6005      	str	r5, [r0, #0]
    6188:	e00d      	b.n	61a6 <__d2b+0x9e>
    618a:	1cf9      	adds	r1, r7, #3
    618c:	4d08      	ldr	r5, [pc, #32]	; (61b0 <__d2b+0xa8>)
    618e:	008a      	lsls	r2, r1, #2
    6190:	9c08      	ldr	r4, [sp, #32]
    6192:	1940      	adds	r0, r0, r5
    6194:	18b3      	adds	r3, r6, r2
    6196:	6020      	str	r0, [r4, #0]
    6198:	6858      	ldr	r0, [r3, #4]
    619a:	f7ff fd51 	bl	5c40 <__hi0bits>
    619e:	017f      	lsls	r7, r7, #5
    61a0:	1a3d      	subs	r5, r7, r0
    61a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    61a4:	6005      	str	r5, [r0, #0]
    61a6:	1c30      	adds	r0, r6, #0
    61a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    61aa:	46c0      	nop			; (mov r8, r8)
    61ac:	fffffbcd 	.word	0xfffffbcd
    61b0:	fffffbce 	.word	0xfffffbce

000061b4 <__ratio>:
    61b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    61b6:	1c0e      	adds	r6, r1, #0
    61b8:	4669      	mov	r1, sp
    61ba:	1c07      	adds	r7, r0, #0
    61bc:	f7ff ff5a 	bl	6074 <__b2d>
    61c0:	1c04      	adds	r4, r0, #0
    61c2:	1c0d      	adds	r5, r1, #0
    61c4:	1c30      	adds	r0, r6, #0
    61c6:	a901      	add	r1, sp, #4
    61c8:	f7ff ff54 	bl	6074 <__b2d>
    61cc:	693f      	ldr	r7, [r7, #16]
    61ce:	1c02      	adds	r2, r0, #0
    61d0:	1c0b      	adds	r3, r1, #0
    61d2:	9800      	ldr	r0, [sp, #0]
    61d4:	9901      	ldr	r1, [sp, #4]
    61d6:	6936      	ldr	r6, [r6, #16]
    61d8:	1a40      	subs	r0, r0, r1
    61da:	1bb9      	subs	r1, r7, r6
    61dc:	4684      	mov	ip, r0
    61de:	0148      	lsls	r0, r1, #5
    61e0:	4460      	add	r0, ip
    61e2:	2800      	cmp	r0, #0
    61e4:	dd02      	ble.n	61ec <__ratio+0x38>
    61e6:	0506      	lsls	r6, r0, #20
    61e8:	1975      	adds	r5, r6, r5
    61ea:	e001      	b.n	61f0 <__ratio+0x3c>
    61ec:	0507      	lsls	r7, r0, #20
    61ee:	1bdb      	subs	r3, r3, r7
    61f0:	1c20      	adds	r0, r4, #0
    61f2:	1c29      	adds	r1, r5, #0
    61f4:	f001 fb74 	bl	78e0 <__aeabi_ddiv>
    61f8:	b003      	add	sp, #12
    61fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000061fc <_mprec_log10>:
    61fc:	b510      	push	{r4, lr}
    61fe:	1e04      	subs	r4, r0, #0
    6200:	2c17      	cmp	r4, #23
    6202:	dc05      	bgt.n	6210 <_mprec_log10+0x14>
    6204:	4b0c      	ldr	r3, [pc, #48]	; (6238 <_mprec_log10+0x3c>)
    6206:	00c0      	lsls	r0, r0, #3
    6208:	1819      	adds	r1, r3, r0
    620a:	6908      	ldr	r0, [r1, #16]
    620c:	6949      	ldr	r1, [r1, #20]
    620e:	e008      	b.n	6222 <_mprec_log10+0x26>
    6210:	4906      	ldr	r1, [pc, #24]	; (622c <_mprec_log10+0x30>)
    6212:	4805      	ldr	r0, [pc, #20]	; (6228 <_mprec_log10+0x2c>)
    6214:	4a06      	ldr	r2, [pc, #24]	; (6230 <_mprec_log10+0x34>)
    6216:	4b07      	ldr	r3, [pc, #28]	; (6234 <_mprec_log10+0x38>)
    6218:	3c01      	subs	r4, #1
    621a:	f001 ff5b 	bl	80d4 <__aeabi_dmul>
    621e:	2c00      	cmp	r4, #0
    6220:	d1f8      	bne.n	6214 <_mprec_log10+0x18>
    6222:	bd10      	pop	{r4, pc}
    6224:	46c0      	nop			; (mov r8, r8)
    6226:	46c0      	nop			; (mov r8, r8)
    6228:	00000000 	.word	0x00000000
    622c:	3ff00000 	.word	0x3ff00000
    6230:	00000000 	.word	0x00000000
    6234:	40240000 	.word	0x40240000
    6238:	00009b88 	.word	0x00009b88

0000623c <__copybits>:
    623c:	3901      	subs	r1, #1
    623e:	b510      	push	{r4, lr}
    6240:	1149      	asrs	r1, r1, #5
    6242:	6914      	ldr	r4, [r2, #16]
    6244:	3101      	adds	r1, #1
    6246:	008b      	lsls	r3, r1, #2
    6248:	3404      	adds	r4, #4
    624a:	18c1      	adds	r1, r0, r3
    624c:	00a3      	lsls	r3, r4, #2
    624e:	18d3      	adds	r3, r2, r3
    6250:	3304      	adds	r3, #4
    6252:	3214      	adds	r2, #20
    6254:	429a      	cmp	r2, r3
    6256:	d202      	bcs.n	625e <__copybits+0x22>
    6258:	ca10      	ldmia	r2!, {r4}
    625a:	c010      	stmia	r0!, {r4}
    625c:	e7fa      	b.n	6254 <__copybits+0x18>
    625e:	4288      	cmp	r0, r1
    6260:	d202      	bcs.n	6268 <__copybits+0x2c>
    6262:	2200      	movs	r2, #0
    6264:	c004      	stmia	r0!, {r2}
    6266:	e7fa      	b.n	625e <__copybits+0x22>
    6268:	bd10      	pop	{r4, pc}

0000626a <__any_on>:
    626a:	b530      	push	{r4, r5, lr}
    626c:	1c02      	adds	r2, r0, #0
    626e:	1c05      	adds	r5, r0, #0
    6270:	6900      	ldr	r0, [r0, #16]
    6272:	3514      	adds	r5, #20
    6274:	114b      	asrs	r3, r1, #5
    6276:	4283      	cmp	r3, r0
    6278:	dc0f      	bgt.n	629a <__any_on+0x30>
    627a:	da0f      	bge.n	629c <__any_on+0x32>
    627c:	241f      	movs	r4, #31
    627e:	4021      	ands	r1, r4
    6280:	d00c      	beq.n	629c <__any_on+0x32>
    6282:	1d18      	adds	r0, r3, #4
    6284:	0084      	lsls	r4, r0, #2
    6286:	1910      	adds	r0, r2, r4
    6288:	6844      	ldr	r4, [r0, #4]
    628a:	1c20      	adds	r0, r4, #0
    628c:	40c8      	lsrs	r0, r1
    628e:	4088      	lsls	r0, r1
    6290:	1c01      	adds	r1, r0, #0
    6292:	2001      	movs	r0, #1
    6294:	42a1      	cmp	r1, r4
    6296:	d10e      	bne.n	62b6 <__any_on+0x4c>
    6298:	e000      	b.n	629c <__any_on+0x32>
    629a:	1c03      	adds	r3, r0, #0
    629c:	3304      	adds	r3, #4
    629e:	009c      	lsls	r4, r3, #2
    62a0:	1912      	adds	r2, r2, r4
    62a2:	3204      	adds	r2, #4
    62a4:	42aa      	cmp	r2, r5
    62a6:	d905      	bls.n	62b4 <__any_on+0x4a>
    62a8:	3a04      	subs	r2, #4
    62aa:	6810      	ldr	r0, [r2, #0]
    62ac:	2800      	cmp	r0, #0
    62ae:	d0f9      	beq.n	62a4 <__any_on+0x3a>
    62b0:	2001      	movs	r0, #1
    62b2:	e000      	b.n	62b6 <__any_on+0x4c>
    62b4:	2000      	movs	r0, #0
    62b6:	bd30      	pop	{r4, r5, pc}

000062b8 <__fpclassifyd>:
    62b8:	1c0b      	adds	r3, r1, #0
    62ba:	1c01      	adds	r1, r0, #0
    62bc:	1c02      	adds	r2, r0, #0
    62be:	b530      	push	{r4, r5, lr}
    62c0:	4319      	orrs	r1, r3
    62c2:	2002      	movs	r0, #2
    62c4:	2900      	cmp	r1, #0
    62c6:	d021      	beq.n	630c <__fpclassifyd+0x54>
    62c8:	2480      	movs	r4, #128	; 0x80
    62ca:	0625      	lsls	r5, r4, #24
    62cc:	42ab      	cmp	r3, r5
    62ce:	d101      	bne.n	62d4 <__fpclassifyd+0x1c>
    62d0:	2a00      	cmp	r2, #0
    62d2:	d01b      	beq.n	630c <__fpclassifyd+0x54>
    62d4:	480e      	ldr	r0, [pc, #56]	; (6310 <__fpclassifyd+0x58>)
    62d6:	490f      	ldr	r1, [pc, #60]	; (6314 <__fpclassifyd+0x5c>)
    62d8:	181c      	adds	r4, r3, r0
    62da:	2004      	movs	r0, #4
    62dc:	428c      	cmp	r4, r1
    62de:	d915      	bls.n	630c <__fpclassifyd+0x54>
    62e0:	4d0d      	ldr	r5, [pc, #52]	; (6318 <__fpclassifyd+0x60>)
    62e2:	195c      	adds	r4, r3, r5
    62e4:	428c      	cmp	r4, r1
    62e6:	d911      	bls.n	630c <__fpclassifyd+0x54>
    62e8:	490c      	ldr	r1, [pc, #48]	; (631c <__fpclassifyd+0x64>)
    62ea:	2003      	movs	r0, #3
    62ec:	428b      	cmp	r3, r1
    62ee:	d90d      	bls.n	630c <__fpclassifyd+0x54>
    62f0:	2580      	movs	r5, #128	; 0x80
    62f2:	062c      	lsls	r4, r5, #24
    62f4:	191d      	adds	r5, r3, r4
    62f6:	428d      	cmp	r5, r1
    62f8:	d908      	bls.n	630c <__fpclassifyd+0x54>
    62fa:	4807      	ldr	r0, [pc, #28]	; (6318 <__fpclassifyd+0x60>)
    62fc:	4283      	cmp	r3, r0
    62fe:	d003      	beq.n	6308 <__fpclassifyd+0x50>
    6300:	4903      	ldr	r1, [pc, #12]	; (6310 <__fpclassifyd+0x58>)
    6302:	2000      	movs	r0, #0
    6304:	428b      	cmp	r3, r1
    6306:	d101      	bne.n	630c <__fpclassifyd+0x54>
    6308:	4250      	negs	r0, r2
    630a:	4150      	adcs	r0, r2
    630c:	bd30      	pop	{r4, r5, pc}
    630e:	46c0      	nop			; (mov r8, r8)
    6310:	fff00000 	.word	0xfff00000
    6314:	7fdfffff 	.word	0x7fdfffff
    6318:	7ff00000 	.word	0x7ff00000
    631c:	000fffff 	.word	0x000fffff

00006320 <_sbrk_r>:
    6320:	b538      	push	{r3, r4, r5, lr}
    6322:	4c07      	ldr	r4, [pc, #28]	; (6340 <_sbrk_r+0x20>)
    6324:	2300      	movs	r3, #0
    6326:	1c05      	adds	r5, r0, #0
    6328:	1c08      	adds	r0, r1, #0
    632a:	6023      	str	r3, [r4, #0]
    632c:	f7fc fb20 	bl	2970 <_sbrk>
    6330:	1c43      	adds	r3, r0, #1
    6332:	d103      	bne.n	633c <_sbrk_r+0x1c>
    6334:	6821      	ldr	r1, [r4, #0]
    6336:	2900      	cmp	r1, #0
    6338:	d000      	beq.n	633c <_sbrk_r+0x1c>
    633a:	6029      	str	r1, [r5, #0]
    633c:	bd38      	pop	{r3, r4, r5, pc}
    633e:	46c0      	nop			; (mov r8, r8)
    6340:	20000ca4 	.word	0x20000ca4

00006344 <strcmp>:
    6344:	7802      	ldrb	r2, [r0, #0]
    6346:	780b      	ldrb	r3, [r1, #0]
    6348:	3001      	adds	r0, #1
    634a:	3101      	adds	r1, #1
    634c:	2a00      	cmp	r2, #0
    634e:	d001      	beq.n	6354 <strcmp+0x10>
    6350:	429a      	cmp	r2, r3
    6352:	d0f7      	beq.n	6344 <strcmp>
    6354:	1ad0      	subs	r0, r2, r3
    6356:	4770      	bx	lr

00006358 <strlen>:
    6358:	2300      	movs	r3, #0
    635a:	5cc2      	ldrb	r2, [r0, r3]
    635c:	3301      	adds	r3, #1
    635e:	2a00      	cmp	r2, #0
    6360:	d1fb      	bne.n	635a <strlen+0x2>
    6362:	1e58      	subs	r0, r3, #1
    6364:	4770      	bx	lr
	...

00006368 <__ssprint_r>:
    6368:	b5f0      	push	{r4, r5, r6, r7, lr}
    636a:	b087      	sub	sp, #28
    636c:	9002      	str	r0, [sp, #8]
    636e:	6810      	ldr	r0, [r2, #0]
    6370:	1c0c      	adds	r4, r1, #0
    6372:	9003      	str	r0, [sp, #12]
    6374:	6890      	ldr	r0, [r2, #8]
    6376:	1c15      	adds	r5, r2, #0
    6378:	2800      	cmp	r0, #0
    637a:	d065      	beq.n	6448 <__ssprint_r+0xe0>
    637c:	2300      	movs	r3, #0
    637e:	9305      	str	r3, [sp, #20]
    6380:	1c1f      	adds	r7, r3, #0
    6382:	2f00      	cmp	r7, #0
    6384:	d107      	bne.n	6396 <__ssprint_r+0x2e>
    6386:	9a03      	ldr	r2, [sp, #12]
    6388:	9903      	ldr	r1, [sp, #12]
    638a:	6816      	ldr	r6, [r2, #0]
    638c:	684f      	ldr	r7, [r1, #4]
    638e:	3108      	adds	r1, #8
    6390:	9605      	str	r6, [sp, #20]
    6392:	9103      	str	r1, [sp, #12]
    6394:	e7f5      	b.n	6382 <__ssprint_r+0x1a>
    6396:	68a6      	ldr	r6, [r4, #8]
    6398:	42b7      	cmp	r7, r6
    639a:	d345      	bcc.n	6428 <__ssprint_r+0xc0>
    639c:	2290      	movs	r2, #144	; 0x90
    639e:	89a3      	ldrh	r3, [r4, #12]
    63a0:	00d1      	lsls	r1, r2, #3
    63a2:	420b      	tst	r3, r1
    63a4:	d03e      	beq.n	6424 <__ssprint_r+0xbc>
    63a6:	6826      	ldr	r6, [r4, #0]
    63a8:	6921      	ldr	r1, [r4, #16]
    63aa:	2203      	movs	r2, #3
    63ac:	1a70      	subs	r0, r6, r1
    63ae:	6966      	ldr	r6, [r4, #20]
    63b0:	9004      	str	r0, [sp, #16]
    63b2:	4372      	muls	r2, r6
    63b4:	0fd0      	lsrs	r0, r2, #31
    63b6:	1882      	adds	r2, r0, r2
    63b8:	1056      	asrs	r6, r2, #1
    63ba:	9804      	ldr	r0, [sp, #16]
    63bc:	9601      	str	r6, [sp, #4]
    63be:	3001      	adds	r0, #1
    63c0:	9e01      	ldr	r6, [sp, #4]
    63c2:	19c2      	adds	r2, r0, r7
    63c4:	4296      	cmp	r6, r2
    63c6:	d200      	bcs.n	63ca <__ssprint_r+0x62>
    63c8:	9201      	str	r2, [sp, #4]
    63ca:	9802      	ldr	r0, [sp, #8]
    63cc:	055a      	lsls	r2, r3, #21
    63ce:	d513      	bpl.n	63f8 <__ssprint_r+0x90>
    63d0:	9901      	ldr	r1, [sp, #4]
    63d2:	f7ff f981 	bl	56d8 <_malloc_r>
    63d6:	1e06      	subs	r6, r0, #0
    63d8:	d103      	bne.n	63e2 <__ssprint_r+0x7a>
    63da:	9902      	ldr	r1, [sp, #8]
    63dc:	270c      	movs	r7, #12
    63de:	600f      	str	r7, [r1, #0]
    63e0:	e034      	b.n	644c <__ssprint_r+0xe4>
    63e2:	6921      	ldr	r1, [r4, #16]
    63e4:	9a04      	ldr	r2, [sp, #16]
    63e6:	f7fd f9b7 	bl	3758 <memcpy>
    63ea:	89a1      	ldrh	r1, [r4, #12]
    63ec:	481d      	ldr	r0, [pc, #116]	; (6464 <__ssprint_r+0xfc>)
    63ee:	2280      	movs	r2, #128	; 0x80
    63f0:	4008      	ands	r0, r1
    63f2:	4310      	orrs	r0, r2
    63f4:	81a0      	strh	r0, [r4, #12]
    63f6:	e00c      	b.n	6412 <__ssprint_r+0xaa>
    63f8:	9a01      	ldr	r2, [sp, #4]
    63fa:	f000 fc6f 	bl	6cdc <_realloc_r>
    63fe:	1e06      	subs	r6, r0, #0
    6400:	d107      	bne.n	6412 <__ssprint_r+0xaa>
    6402:	9802      	ldr	r0, [sp, #8]
    6404:	6921      	ldr	r1, [r4, #16]
    6406:	f7ff f85f 	bl	54c8 <_free_r>
    640a:	9b02      	ldr	r3, [sp, #8]
    640c:	270c      	movs	r7, #12
    640e:	601f      	str	r7, [r3, #0]
    6410:	e01c      	b.n	644c <__ssprint_r+0xe4>
    6412:	9904      	ldr	r1, [sp, #16]
    6414:	9b01      	ldr	r3, [sp, #4]
    6416:	6126      	str	r6, [r4, #16]
    6418:	1a5a      	subs	r2, r3, r1
    641a:	1876      	adds	r6, r6, r1
    641c:	6026      	str	r6, [r4, #0]
    641e:	6163      	str	r3, [r4, #20]
    6420:	1c3e      	adds	r6, r7, #0
    6422:	60a2      	str	r2, [r4, #8]
    6424:	42b7      	cmp	r7, r6
    6426:	d200      	bcs.n	642a <__ssprint_r+0xc2>
    6428:	1c3e      	adds	r6, r7, #0
    642a:	1c32      	adds	r2, r6, #0
    642c:	9905      	ldr	r1, [sp, #20]
    642e:	6820      	ldr	r0, [r4, #0]
    6430:	f000 fc3b 	bl	6caa <memmove>
    6434:	6820      	ldr	r0, [r4, #0]
    6436:	68a1      	ldr	r1, [r4, #8]
    6438:	1982      	adds	r2, r0, r6
    643a:	1b8b      	subs	r3, r1, r6
    643c:	68ae      	ldr	r6, [r5, #8]
    643e:	60a3      	str	r3, [r4, #8]
    6440:	1bf0      	subs	r0, r6, r7
    6442:	6022      	str	r2, [r4, #0]
    6444:	60a8      	str	r0, [r5, #8]
    6446:	d19e      	bne.n	6386 <__ssprint_r+0x1e>
    6448:	6068      	str	r0, [r5, #4]
    644a:	e008      	b.n	645e <__ssprint_r+0xf6>
    644c:	89a3      	ldrh	r3, [r4, #12]
    644e:	2040      	movs	r0, #64	; 0x40
    6450:	4303      	orrs	r3, r0
    6452:	81a3      	strh	r3, [r4, #12]
    6454:	2400      	movs	r4, #0
    6456:	60ac      	str	r4, [r5, #8]
    6458:	606c      	str	r4, [r5, #4]
    645a:	2501      	movs	r5, #1
    645c:	4268      	negs	r0, r5
    645e:	b007      	add	sp, #28
    6460:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6462:	46c0      	nop			; (mov r8, r8)
    6464:	fffffb7f 	.word	0xfffffb7f

00006468 <_svfiprintf_r>:
    6468:	b5f0      	push	{r4, r5, r6, r7, lr}
    646a:	b0b1      	sub	sp, #196	; 0xc4
    646c:	9008      	str	r0, [sp, #32]
    646e:	9105      	str	r1, [sp, #20]
    6470:	1c1c      	adds	r4, r3, #0
    6472:	898b      	ldrh	r3, [r1, #12]
    6474:	1c16      	adds	r6, r2, #0
    6476:	0618      	lsls	r0, r3, #24
    6478:	d512      	bpl.n	64a0 <_svfiprintf_r+0x38>
    647a:	6909      	ldr	r1, [r1, #16]
    647c:	2900      	cmp	r1, #0
    647e:	d10f      	bne.n	64a0 <_svfiprintf_r+0x38>
    6480:	9808      	ldr	r0, [sp, #32]
    6482:	2140      	movs	r1, #64	; 0x40
    6484:	f7ff f928 	bl	56d8 <_malloc_r>
    6488:	9f05      	ldr	r7, [sp, #20]
    648a:	6038      	str	r0, [r7, #0]
    648c:	6138      	str	r0, [r7, #16]
    648e:	2800      	cmp	r0, #0
    6490:	d103      	bne.n	649a <_svfiprintf_r+0x32>
    6492:	9f08      	ldr	r7, [sp, #32]
    6494:	220c      	movs	r2, #12
    6496:	603a      	str	r2, [r7, #0]
    6498:	e3d0      	b.n	6c3c <_svfiprintf_r+0x7d4>
    649a:	9a05      	ldr	r2, [sp, #20]
    649c:	2040      	movs	r0, #64	; 0x40
    649e:	6150      	str	r0, [r2, #20]
    64a0:	2300      	movs	r3, #0
    64a2:	ad20      	add	r5, sp, #128	; 0x80
    64a4:	9513      	str	r5, [sp, #76]	; 0x4c
    64a6:	9315      	str	r3, [sp, #84]	; 0x54
    64a8:	9314      	str	r3, [sp, #80]	; 0x50
    64aa:	9606      	str	r6, [sp, #24]
    64ac:	930e      	str	r3, [sp, #56]	; 0x38
    64ae:	930a      	str	r3, [sp, #40]	; 0x28
    64b0:	9e06      	ldr	r6, [sp, #24]
    64b2:	7831      	ldrb	r1, [r6, #0]
    64b4:	2900      	cmp	r1, #0
    64b6:	d103      	bne.n	64c0 <_svfiprintf_r+0x58>
    64b8:	9f06      	ldr	r7, [sp, #24]
    64ba:	1bf7      	subs	r7, r6, r7
    64bc:	d104      	bne.n	64c8 <_svfiprintf_r+0x60>
    64be:	e01c      	b.n	64fa <_svfiprintf_r+0x92>
    64c0:	2925      	cmp	r1, #37	; 0x25
    64c2:	d0f9      	beq.n	64b8 <_svfiprintf_r+0x50>
    64c4:	3601      	adds	r6, #1
    64c6:	e7f4      	b.n	64b2 <_svfiprintf_r+0x4a>
    64c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
    64ca:	9914      	ldr	r1, [sp, #80]	; 0x50
    64cc:	9806      	ldr	r0, [sp, #24]
    64ce:	19d3      	adds	r3, r2, r7
    64d0:	3101      	adds	r1, #1
    64d2:	6028      	str	r0, [r5, #0]
    64d4:	606f      	str	r7, [r5, #4]
    64d6:	9315      	str	r3, [sp, #84]	; 0x54
    64d8:	9114      	str	r1, [sp, #80]	; 0x50
    64da:	2907      	cmp	r1, #7
    64dc:	dc01      	bgt.n	64e2 <_svfiprintf_r+0x7a>
    64de:	3508      	adds	r5, #8
    64e0:	e008      	b.n	64f4 <_svfiprintf_r+0x8c>
    64e2:	9808      	ldr	r0, [sp, #32]
    64e4:	9905      	ldr	r1, [sp, #20]
    64e6:	aa13      	add	r2, sp, #76	; 0x4c
    64e8:	f7ff ff3e 	bl	6368 <__ssprint_r>
    64ec:	2800      	cmp	r0, #0
    64ee:	d000      	beq.n	64f2 <_svfiprintf_r+0x8a>
    64f0:	e3a0      	b.n	6c34 <_svfiprintf_r+0x7cc>
    64f2:	ad20      	add	r5, sp, #128	; 0x80
    64f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    64f6:	19c7      	adds	r7, r0, r7
    64f8:	970a      	str	r7, [sp, #40]	; 0x28
    64fa:	7832      	ldrb	r2, [r6, #0]
    64fc:	2a00      	cmp	r2, #0
    64fe:	d100      	bne.n	6502 <_svfiprintf_r+0x9a>
    6500:	e390      	b.n	6c24 <_svfiprintf_r+0x7bc>
    6502:	3601      	adds	r6, #1
    6504:	9606      	str	r6, [sp, #24]
    6506:	2301      	movs	r3, #1
    6508:	466e      	mov	r6, sp
    650a:	2200      	movs	r2, #0
    650c:	3647      	adds	r6, #71	; 0x47
    650e:	4259      	negs	r1, r3
    6510:	7032      	strb	r2, [r6, #0]
    6512:	9104      	str	r1, [sp, #16]
    6514:	920c      	str	r2, [sp, #48]	; 0x30
    6516:	1c16      	adds	r6, r2, #0
    6518:	9806      	ldr	r0, [sp, #24]
    651a:	7803      	ldrb	r3, [r0, #0]
    651c:	3001      	adds	r0, #1
    651e:	9006      	str	r0, [sp, #24]
    6520:	2b63      	cmp	r3, #99	; 0x63
    6522:	d100      	bne.n	6526 <_svfiprintf_r+0xbe>
    6524:	e0b4      	b.n	6690 <_svfiprintf_r+0x228>
    6526:	dc32      	bgt.n	658e <_svfiprintf_r+0x126>
    6528:	2b39      	cmp	r3, #57	; 0x39
    652a:	dc19      	bgt.n	6560 <_svfiprintf_r+0xf8>
    652c:	2b31      	cmp	r3, #49	; 0x31
    652e:	db00      	blt.n	6532 <_svfiprintf_r+0xca>
    6530:	e093      	b.n	665a <_svfiprintf_r+0x1f2>
    6532:	2b2b      	cmp	r3, #43	; 0x2b
    6534:	d101      	bne.n	653a <_svfiprintf_r+0xd2>
    6536:	1c1a      	adds	r2, r3, #0
    6538:	e7ee      	b.n	6518 <_svfiprintf_r+0xb0>
    653a:	2b2b      	cmp	r3, #43	; 0x2b
    653c:	dc07      	bgt.n	654e <_svfiprintf_r+0xe6>
    653e:	2b23      	cmp	r3, #35	; 0x23
    6540:	d057      	beq.n	65f2 <_svfiprintf_r+0x18a>
    6542:	2b2a      	cmp	r3, #42	; 0x2a
    6544:	d057      	beq.n	65f6 <_svfiprintf_r+0x18e>
    6546:	2b20      	cmp	r3, #32
    6548:	d000      	beq.n	654c <_svfiprintf_r+0xe4>
    654a:	e20d      	b.n	6968 <_svfiprintf_r+0x500>
    654c:	e04d      	b.n	65ea <_svfiprintf_r+0x182>
    654e:	2b2e      	cmp	r3, #46	; 0x2e
    6550:	d05a      	beq.n	6608 <_svfiprintf_r+0x1a0>
    6552:	2b30      	cmp	r3, #48	; 0x30
    6554:	d100      	bne.n	6558 <_svfiprintf_r+0xf0>
    6556:	e07e      	b.n	6656 <_svfiprintf_r+0x1ee>
    6558:	2b2d      	cmp	r3, #45	; 0x2d
    655a:	d000      	beq.n	655e <_svfiprintf_r+0xf6>
    655c:	e204      	b.n	6968 <_svfiprintf_r+0x500>
    655e:	e051      	b.n	6604 <_svfiprintf_r+0x19c>
    6560:	2b4f      	cmp	r3, #79	; 0x4f
    6562:	d100      	bne.n	6566 <_svfiprintf_r+0xfe>
    6564:	e0e4      	b.n	6730 <_svfiprintf_r+0x2c8>
    6566:	4669      	mov	r1, sp
    6568:	3147      	adds	r1, #71	; 0x47
    656a:	2b4f      	cmp	r3, #79	; 0x4f
    656c:	dc06      	bgt.n	657c <_svfiprintf_r+0x114>
    656e:	2b44      	cmp	r3, #68	; 0x44
    6570:	d000      	beq.n	6574 <_svfiprintf_r+0x10c>
    6572:	e1f9      	b.n	6968 <_svfiprintf_r+0x500>
    6574:	700a      	strb	r2, [r1, #0]
    6576:	2210      	movs	r2, #16
    6578:	4316      	orrs	r6, r2
    657a:	e096      	b.n	66aa <_svfiprintf_r+0x242>
    657c:	2b55      	cmp	r3, #85	; 0x55
    657e:	d100      	bne.n	6582 <_svfiprintf_r+0x11a>
    6580:	e12b      	b.n	67da <_svfiprintf_r+0x372>
    6582:	2b58      	cmp	r3, #88	; 0x58
    6584:	d000      	beq.n	6588 <_svfiprintf_r+0x120>
    6586:	e1ef      	b.n	6968 <_svfiprintf_r+0x500>
    6588:	700a      	strb	r2, [r1, #0]
    658a:	48bc      	ldr	r0, [pc, #752]	; (687c <_svfiprintf_r+0x414>)
    658c:	e146      	b.n	681c <_svfiprintf_r+0x3b4>
    658e:	2b6f      	cmp	r3, #111	; 0x6f
    6590:	d100      	bne.n	6594 <_svfiprintf_r+0x12c>
    6592:	e0cf      	b.n	6734 <_svfiprintf_r+0x2cc>
    6594:	dc0f      	bgt.n	65b6 <_svfiprintf_r+0x14e>
    6596:	2b69      	cmp	r3, #105	; 0x69
    6598:	d023      	beq.n	65e2 <_svfiprintf_r+0x17a>
    659a:	dc06      	bgt.n	65aa <_svfiprintf_r+0x142>
    659c:	2b64      	cmp	r3, #100	; 0x64
    659e:	d020      	beq.n	65e2 <_svfiprintf_r+0x17a>
    65a0:	2b68      	cmp	r3, #104	; 0x68
    65a2:	d000      	beq.n	65a6 <_svfiprintf_r+0x13e>
    65a4:	e1e0      	b.n	6968 <_svfiprintf_r+0x500>
    65a6:	2740      	movs	r7, #64	; 0x40
    65a8:	e070      	b.n	668c <_svfiprintf_r+0x224>
    65aa:	2b6c      	cmp	r3, #108	; 0x6c
    65ac:	d064      	beq.n	6678 <_svfiprintf_r+0x210>
    65ae:	2b6e      	cmp	r3, #110	; 0x6e
    65b0:	d000      	beq.n	65b4 <_svfiprintf_r+0x14c>
    65b2:	e1d9      	b.n	6968 <_svfiprintf_r+0x500>
    65b4:	e0a0      	b.n	66f8 <_svfiprintf_r+0x290>
    65b6:	2b73      	cmp	r3, #115	; 0x73
    65b8:	d100      	bne.n	65bc <_svfiprintf_r+0x154>
    65ba:	e0ee      	b.n	679a <_svfiprintf_r+0x332>
    65bc:	dc06      	bgt.n	65cc <_svfiprintf_r+0x164>
    65be:	2b70      	cmp	r3, #112	; 0x70
    65c0:	d100      	bne.n	65c4 <_svfiprintf_r+0x15c>
    65c2:	e0db      	b.n	677c <_svfiprintf_r+0x314>
    65c4:	2b71      	cmp	r3, #113	; 0x71
    65c6:	d000      	beq.n	65ca <_svfiprintf_r+0x162>
    65c8:	e1ce      	b.n	6968 <_svfiprintf_r+0x500>
    65ca:	e05e      	b.n	668a <_svfiprintf_r+0x222>
    65cc:	2b75      	cmp	r3, #117	; 0x75
    65ce:	d100      	bne.n	65d2 <_svfiprintf_r+0x16a>
    65d0:	e105      	b.n	67de <_svfiprintf_r+0x376>
    65d2:	2b78      	cmp	r3, #120	; 0x78
    65d4:	d000      	beq.n	65d8 <_svfiprintf_r+0x170>
    65d6:	e1c7      	b.n	6968 <_svfiprintf_r+0x500>
    65d8:	4669      	mov	r1, sp
    65da:	3147      	adds	r1, #71	; 0x47
    65dc:	700a      	strb	r2, [r1, #0]
    65de:	48a8      	ldr	r0, [pc, #672]	; (6880 <_svfiprintf_r+0x418>)
    65e0:	e11c      	b.n	681c <_svfiprintf_r+0x3b4>
    65e2:	466f      	mov	r7, sp
    65e4:	3747      	adds	r7, #71	; 0x47
    65e6:	703a      	strb	r2, [r7, #0]
    65e8:	e05f      	b.n	66aa <_svfiprintf_r+0x242>
    65ea:	2a00      	cmp	r2, #0
    65ec:	d194      	bne.n	6518 <_svfiprintf_r+0xb0>
    65ee:	2220      	movs	r2, #32
    65f0:	e792      	b.n	6518 <_svfiprintf_r+0xb0>
    65f2:	2701      	movs	r7, #1
    65f4:	e04a      	b.n	668c <_svfiprintf_r+0x224>
    65f6:	6827      	ldr	r7, [r4, #0]
    65f8:	3404      	adds	r4, #4
    65fa:	970c      	str	r7, [sp, #48]	; 0x30
    65fc:	2f00      	cmp	r7, #0
    65fe:	da8b      	bge.n	6518 <_svfiprintf_r+0xb0>
    6600:	427b      	negs	r3, r7
    6602:	930c      	str	r3, [sp, #48]	; 0x30
    6604:	2704      	movs	r7, #4
    6606:	e041      	b.n	668c <_svfiprintf_r+0x224>
    6608:	9906      	ldr	r1, [sp, #24]
    660a:	780b      	ldrb	r3, [r1, #0]
    660c:	3101      	adds	r1, #1
    660e:	9106      	str	r1, [sp, #24]
    6610:	2b2a      	cmp	r3, #42	; 0x2a
    6612:	d10b      	bne.n	662c <_svfiprintf_r+0x1c4>
    6614:	1d21      	adds	r1, r4, #4
    6616:	6824      	ldr	r4, [r4, #0]
    6618:	9404      	str	r4, [sp, #16]
    661a:	2c00      	cmp	r4, #0
    661c:	da04      	bge.n	6628 <_svfiprintf_r+0x1c0>
    661e:	2701      	movs	r7, #1
    6620:	427b      	negs	r3, r7
    6622:	1c0c      	adds	r4, r1, #0
    6624:	9304      	str	r3, [sp, #16]
    6626:	e777      	b.n	6518 <_svfiprintf_r+0xb0>
    6628:	1c0c      	adds	r4, r1, #0
    662a:	e775      	b.n	6518 <_svfiprintf_r+0xb0>
    662c:	2700      	movs	r7, #0
    662e:	1c18      	adds	r0, r3, #0
    6630:	3830      	subs	r0, #48	; 0x30
    6632:	2809      	cmp	r0, #9
    6634:	d807      	bhi.n	6646 <_svfiprintf_r+0x1de>
    6636:	230a      	movs	r3, #10
    6638:	435f      	muls	r7, r3
    663a:	183f      	adds	r7, r7, r0
    663c:	9806      	ldr	r0, [sp, #24]
    663e:	7803      	ldrb	r3, [r0, #0]
    6640:	3001      	adds	r0, #1
    6642:	9006      	str	r0, [sp, #24]
    6644:	e7f3      	b.n	662e <_svfiprintf_r+0x1c6>
    6646:	9704      	str	r7, [sp, #16]
    6648:	2f00      	cmp	r7, #0
    664a:	db00      	blt.n	664e <_svfiprintf_r+0x1e6>
    664c:	e768      	b.n	6520 <_svfiprintf_r+0xb8>
    664e:	2101      	movs	r1, #1
    6650:	424f      	negs	r7, r1
    6652:	9704      	str	r7, [sp, #16]
    6654:	e764      	b.n	6520 <_svfiprintf_r+0xb8>
    6656:	2780      	movs	r7, #128	; 0x80
    6658:	e018      	b.n	668c <_svfiprintf_r+0x224>
    665a:	2100      	movs	r1, #0
    665c:	200a      	movs	r0, #10
    665e:	4341      	muls	r1, r0
    6660:	9f06      	ldr	r7, [sp, #24]
    6662:	3b30      	subs	r3, #48	; 0x30
    6664:	18c9      	adds	r1, r1, r3
    6666:	783b      	ldrb	r3, [r7, #0]
    6668:	3701      	adds	r7, #1
    666a:	1c18      	adds	r0, r3, #0
    666c:	3830      	subs	r0, #48	; 0x30
    666e:	9706      	str	r7, [sp, #24]
    6670:	2809      	cmp	r0, #9
    6672:	d9f3      	bls.n	665c <_svfiprintf_r+0x1f4>
    6674:	910c      	str	r1, [sp, #48]	; 0x30
    6676:	e753      	b.n	6520 <_svfiprintf_r+0xb8>
    6678:	9806      	ldr	r0, [sp, #24]
    667a:	7803      	ldrb	r3, [r0, #0]
    667c:	2b6c      	cmp	r3, #108	; 0x6c
    667e:	d102      	bne.n	6686 <_svfiprintf_r+0x21e>
    6680:	3001      	adds	r0, #1
    6682:	9006      	str	r0, [sp, #24]
    6684:	e001      	b.n	668a <_svfiprintf_r+0x222>
    6686:	2710      	movs	r7, #16
    6688:	e000      	b.n	668c <_svfiprintf_r+0x224>
    668a:	2720      	movs	r7, #32
    668c:	433e      	orrs	r6, r7
    668e:	e743      	b.n	6518 <_svfiprintf_r+0xb0>
    6690:	6820      	ldr	r0, [r4, #0]
    6692:	466a      	mov	r2, sp
    6694:	ab16      	add	r3, sp, #88	; 0x58
    6696:	2700      	movs	r7, #0
    6698:	3247      	adds	r2, #71	; 0x47
    669a:	2101      	movs	r1, #1
    669c:	7018      	strb	r0, [r3, #0]
    669e:	7017      	strb	r7, [r2, #0]
    66a0:	3404      	adds	r4, #4
    66a2:	910b      	str	r1, [sp, #44]	; 0x2c
    66a4:	9704      	str	r7, [sp, #16]
    66a6:	9307      	str	r3, [sp, #28]
    66a8:	e173      	b.n	6992 <_svfiprintf_r+0x52a>
    66aa:	06b2      	lsls	r2, r6, #26
    66ac:	d509      	bpl.n	66c2 <_svfiprintf_r+0x25a>
    66ae:	1de1      	adds	r1, r4, #7
    66b0:	2307      	movs	r3, #7
    66b2:	4399      	bics	r1, r3
    66b4:	1c0c      	adds	r4, r1, #0
    66b6:	3408      	adds	r4, #8
    66b8:	6808      	ldr	r0, [r1, #0]
    66ba:	6849      	ldr	r1, [r1, #4]
    66bc:	9002      	str	r0, [sp, #8]
    66be:	9103      	str	r1, [sp, #12]
    66c0:	e00a      	b.n	66d8 <_svfiprintf_r+0x270>
    66c2:	1d20      	adds	r0, r4, #4
    66c4:	6822      	ldr	r2, [r4, #0]
    66c6:	06f1      	lsls	r1, r6, #27
    66c8:	d402      	bmi.n	66d0 <_svfiprintf_r+0x268>
    66ca:	0677      	lsls	r7, r6, #25
    66cc:	d500      	bpl.n	66d0 <_svfiprintf_r+0x268>
    66ce:	b212      	sxth	r2, r2
    66d0:	17d4      	asrs	r4, r2, #31
    66d2:	9403      	str	r4, [sp, #12]
    66d4:	9202      	str	r2, [sp, #8]
    66d6:	1c04      	adds	r4, r0, #0
    66d8:	9f03      	ldr	r7, [sp, #12]
    66da:	2f00      	cmp	r7, #0
    66dc:	db00      	blt.n	66e0 <_svfiprintf_r+0x278>
    66de:	e0d1      	b.n	6884 <_svfiprintf_r+0x41c>
    66e0:	9802      	ldr	r0, [sp, #8]
    66e2:	9903      	ldr	r1, [sp, #12]
    66e4:	2300      	movs	r3, #0
    66e6:	4242      	negs	r2, r0
    66e8:	418b      	sbcs	r3, r1
    66ea:	9202      	str	r2, [sp, #8]
    66ec:	9303      	str	r3, [sp, #12]
    66ee:	466b      	mov	r3, sp
    66f0:	212d      	movs	r1, #45	; 0x2d
    66f2:	3347      	adds	r3, #71	; 0x47
    66f4:	7019      	strb	r1, [r3, #0]
    66f6:	e0c5      	b.n	6884 <_svfiprintf_r+0x41c>
    66f8:	4668      	mov	r0, sp
    66fa:	3047      	adds	r0, #71	; 0x47
    66fc:	7002      	strb	r2, [r0, #0]
    66fe:	1d23      	adds	r3, r4, #4
    6700:	06b1      	lsls	r1, r6, #26
    6702:	d505      	bpl.n	6710 <_svfiprintf_r+0x2a8>
    6704:	6826      	ldr	r6, [r4, #0]
    6706:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    6708:	17e1      	asrs	r1, r4, #31
    670a:	6034      	str	r4, [r6, #0]
    670c:	6071      	str	r1, [r6, #4]
    670e:	e00d      	b.n	672c <_svfiprintf_r+0x2c4>
    6710:	06f0      	lsls	r0, r6, #27
    6712:	d408      	bmi.n	6726 <_svfiprintf_r+0x2be>
    6714:	1d23      	adds	r3, r4, #4
    6716:	0670      	lsls	r0, r6, #25
    6718:	d505      	bpl.n	6726 <_svfiprintf_r+0x2be>
    671a:	6826      	ldr	r6, [r4, #0]
    671c:	2128      	movs	r1, #40	; 0x28
    671e:	466c      	mov	r4, sp
    6720:	5b0a      	ldrh	r2, [r1, r4]
    6722:	8032      	strh	r2, [r6, #0]
    6724:	e002      	b.n	672c <_svfiprintf_r+0x2c4>
    6726:	6820      	ldr	r0, [r4, #0]
    6728:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    672a:	6007      	str	r7, [r0, #0]
    672c:	1c1c      	adds	r4, r3, #0
    672e:	e6bf      	b.n	64b0 <_svfiprintf_r+0x48>
    6730:	2310      	movs	r3, #16
    6732:	431e      	orrs	r6, r3
    6734:	2220      	movs	r2, #32
    6736:	4032      	ands	r2, r6
    6738:	d00a      	beq.n	6750 <_svfiprintf_r+0x2e8>
    673a:	1de1      	adds	r1, r4, #7
    673c:	2207      	movs	r2, #7
    673e:	4391      	bics	r1, r2
    6740:	1c0c      	adds	r4, r1, #0
    6742:	6808      	ldr	r0, [r1, #0]
    6744:	6849      	ldr	r1, [r1, #4]
    6746:	9002      	str	r0, [sp, #8]
    6748:	9103      	str	r1, [sp, #12]
    674a:	3408      	adds	r4, #8
    674c:	2200      	movs	r2, #0
    674e:	e08f      	b.n	6870 <_svfiprintf_r+0x408>
    6750:	2710      	movs	r7, #16
    6752:	4037      	ands	r7, r6
    6754:	1d21      	adds	r1, r4, #4
    6756:	2f00      	cmp	r7, #0
    6758:	d004      	beq.n	6764 <_svfiprintf_r+0x2fc>
    675a:	6827      	ldr	r7, [r4, #0]
    675c:	9203      	str	r2, [sp, #12]
    675e:	9702      	str	r7, [sp, #8]
    6760:	1c0c      	adds	r4, r1, #0
    6762:	e085      	b.n	6870 <_svfiprintf_r+0x408>
    6764:	2340      	movs	r3, #64	; 0x40
    6766:	4033      	ands	r3, r6
    6768:	d003      	beq.n	6772 <_svfiprintf_r+0x30a>
    676a:	8820      	ldrh	r0, [r4, #0]
    676c:	9703      	str	r7, [sp, #12]
    676e:	9002      	str	r0, [sp, #8]
    6770:	e002      	b.n	6778 <_svfiprintf_r+0x310>
    6772:	6824      	ldr	r4, [r4, #0]
    6774:	9303      	str	r3, [sp, #12]
    6776:	9402      	str	r4, [sp, #8]
    6778:	1c0c      	adds	r4, r1, #0
    677a:	e7e7      	b.n	674c <_svfiprintf_r+0x2e4>
    677c:	6820      	ldr	r0, [r4, #0]
    677e:	2100      	movs	r1, #0
    6780:	9103      	str	r1, [sp, #12]
    6782:	493f      	ldr	r1, [pc, #252]	; (6880 <_svfiprintf_r+0x418>)
    6784:	ab12      	add	r3, sp, #72	; 0x48
    6786:	9002      	str	r0, [sp, #8]
    6788:	2202      	movs	r2, #2
    678a:	2730      	movs	r7, #48	; 0x30
    678c:	2078      	movs	r0, #120	; 0x78
    678e:	4316      	orrs	r6, r2
    6790:	701f      	strb	r7, [r3, #0]
    6792:	7058      	strb	r0, [r3, #1]
    6794:	3404      	adds	r4, #4
    6796:	910e      	str	r1, [sp, #56]	; 0x38
    6798:	e06a      	b.n	6870 <_svfiprintf_r+0x408>
    679a:	1c23      	adds	r3, r4, #0
    679c:	4669      	mov	r1, sp
    679e:	681a      	ldr	r2, [r3, #0]
    67a0:	9804      	ldr	r0, [sp, #16]
    67a2:	2700      	movs	r7, #0
    67a4:	3147      	adds	r1, #71	; 0x47
    67a6:	700f      	strb	r7, [r1, #0]
    67a8:	3404      	adds	r4, #4
    67aa:	9207      	str	r2, [sp, #28]
    67ac:	42b8      	cmp	r0, r7
    67ae:	db10      	blt.n	67d2 <_svfiprintf_r+0x36a>
    67b0:	1c10      	adds	r0, r2, #0
    67b2:	1c39      	adds	r1, r7, #0
    67b4:	9a04      	ldr	r2, [sp, #16]
    67b6:	f7ff f983 	bl	5ac0 <memchr>
    67ba:	42b8      	cmp	r0, r7
    67bc:	d100      	bne.n	67c0 <_svfiprintf_r+0x358>
    67be:	e0e2      	b.n	6986 <_svfiprintf_r+0x51e>
    67c0:	9907      	ldr	r1, [sp, #28]
    67c2:	9a04      	ldr	r2, [sp, #16]
    67c4:	1a40      	subs	r0, r0, r1
    67c6:	900b      	str	r0, [sp, #44]	; 0x2c
    67c8:	4290      	cmp	r0, r2
    67ca:	dc00      	bgt.n	67ce <_svfiprintf_r+0x366>
    67cc:	e0e0      	b.n	6990 <_svfiprintf_r+0x528>
    67ce:	9804      	ldr	r0, [sp, #16]
    67d0:	e0dd      	b.n	698e <_svfiprintf_r+0x526>
    67d2:	9807      	ldr	r0, [sp, #28]
    67d4:	f7ff fdc0 	bl	6358 <strlen>
    67d8:	e0d9      	b.n	698e <_svfiprintf_r+0x526>
    67da:	2710      	movs	r7, #16
    67dc:	433e      	orrs	r6, r7
    67de:	2220      	movs	r2, #32
    67e0:	4032      	ands	r2, r6
    67e2:	d009      	beq.n	67f8 <_svfiprintf_r+0x390>
    67e4:	1de0      	adds	r0, r4, #7
    67e6:	2707      	movs	r7, #7
    67e8:	43b8      	bics	r0, r7
    67ea:	1c04      	adds	r4, r0, #0
    67ec:	6802      	ldr	r2, [r0, #0]
    67ee:	6843      	ldr	r3, [r0, #4]
    67f0:	3408      	adds	r4, #8
    67f2:	9202      	str	r2, [sp, #8]
    67f4:	9303      	str	r3, [sp, #12]
    67f6:	e00f      	b.n	6818 <_svfiprintf_r+0x3b0>
    67f8:	2710      	movs	r7, #16
    67fa:	4037      	ands	r7, r6
    67fc:	1d23      	adds	r3, r4, #4
    67fe:	2f00      	cmp	r7, #0
    6800:	d106      	bne.n	6810 <_svfiprintf_r+0x3a8>
    6802:	2240      	movs	r2, #64	; 0x40
    6804:	4032      	ands	r2, r6
    6806:	d003      	beq.n	6810 <_svfiprintf_r+0x3a8>
    6808:	8824      	ldrh	r4, [r4, #0]
    680a:	9703      	str	r7, [sp, #12]
    680c:	9402      	str	r4, [sp, #8]
    680e:	e002      	b.n	6816 <_svfiprintf_r+0x3ae>
    6810:	6821      	ldr	r1, [r4, #0]
    6812:	9203      	str	r2, [sp, #12]
    6814:	9102      	str	r1, [sp, #8]
    6816:	1c1c      	adds	r4, r3, #0
    6818:	2201      	movs	r2, #1
    681a:	e029      	b.n	6870 <_svfiprintf_r+0x408>
    681c:	2120      	movs	r1, #32
    681e:	900e      	str	r0, [sp, #56]	; 0x38
    6820:	4031      	ands	r1, r6
    6822:	d009      	beq.n	6838 <_svfiprintf_r+0x3d0>
    6824:	1de7      	adds	r7, r4, #7
    6826:	2207      	movs	r2, #7
    6828:	4397      	bics	r7, r2
    682a:	1c3c      	adds	r4, r7, #0
    682c:	6839      	ldr	r1, [r7, #0]
    682e:	687a      	ldr	r2, [r7, #4]
    6830:	3408      	adds	r4, #8
    6832:	9102      	str	r1, [sp, #8]
    6834:	9203      	str	r2, [sp, #12]
    6836:	e00f      	b.n	6858 <_svfiprintf_r+0x3f0>
    6838:	2710      	movs	r7, #16
    683a:	4037      	ands	r7, r6
    683c:	1d22      	adds	r2, r4, #4
    683e:	2f00      	cmp	r7, #0
    6840:	d106      	bne.n	6850 <_svfiprintf_r+0x3e8>
    6842:	2140      	movs	r1, #64	; 0x40
    6844:	4031      	ands	r1, r6
    6846:	d003      	beq.n	6850 <_svfiprintf_r+0x3e8>
    6848:	8824      	ldrh	r4, [r4, #0]
    684a:	9703      	str	r7, [sp, #12]
    684c:	9402      	str	r4, [sp, #8]
    684e:	e002      	b.n	6856 <_svfiprintf_r+0x3ee>
    6850:	6820      	ldr	r0, [r4, #0]
    6852:	9103      	str	r1, [sp, #12]
    6854:	9002      	str	r0, [sp, #8]
    6856:	1c14      	adds	r4, r2, #0
    6858:	2202      	movs	r2, #2
    685a:	07f1      	lsls	r1, r6, #31
    685c:	d508      	bpl.n	6870 <_svfiprintf_r+0x408>
    685e:	9802      	ldr	r0, [sp, #8]
    6860:	9f03      	ldr	r7, [sp, #12]
    6862:	4338      	orrs	r0, r7
    6864:	d004      	beq.n	6870 <_svfiprintf_r+0x408>
    6866:	a912      	add	r1, sp, #72	; 0x48
    6868:	2030      	movs	r0, #48	; 0x30
    686a:	7008      	strb	r0, [r1, #0]
    686c:	704b      	strb	r3, [r1, #1]
    686e:	4316      	orrs	r6, r2
    6870:	466b      	mov	r3, sp
    6872:	2700      	movs	r7, #0
    6874:	3347      	adds	r3, #71	; 0x47
    6876:	701f      	strb	r7, [r3, #0]
    6878:	e005      	b.n	6886 <_svfiprintf_r+0x41e>
    687a:	46c0      	nop			; (mov r8, r8)
    687c:	00009b4a 	.word	0x00009b4a
    6880:	00009b5b 	.word	0x00009b5b
    6884:	2201      	movs	r2, #1
    6886:	9904      	ldr	r1, [sp, #16]
    6888:	2900      	cmp	r1, #0
    688a:	db01      	blt.n	6890 <_svfiprintf_r+0x428>
    688c:	2080      	movs	r0, #128	; 0x80
    688e:	4386      	bics	r6, r0
    6890:	9f02      	ldr	r7, [sp, #8]
    6892:	9b03      	ldr	r3, [sp, #12]
    6894:	431f      	orrs	r7, r3
    6896:	d102      	bne.n	689e <_svfiprintf_r+0x436>
    6898:	9904      	ldr	r1, [sp, #16]
    689a:	2900      	cmp	r1, #0
    689c:	d055      	beq.n	694a <_svfiprintf_r+0x4e2>
    689e:	466f      	mov	r7, sp
    68a0:	377f      	adds	r7, #127	; 0x7f
    68a2:	2a01      	cmp	r2, #1
    68a4:	d01e      	beq.n	68e4 <_svfiprintf_r+0x47c>
    68a6:	2a02      	cmp	r2, #2
    68a8:	d039      	beq.n	691e <_svfiprintf_r+0x4b6>
    68aa:	9802      	ldr	r0, [sp, #8]
    68ac:	2307      	movs	r3, #7
    68ae:	4003      	ands	r3, r0
    68b0:	3330      	adds	r3, #48	; 0x30
    68b2:	9903      	ldr	r1, [sp, #12]
    68b4:	9707      	str	r7, [sp, #28]
    68b6:	9a03      	ldr	r2, [sp, #12]
    68b8:	703b      	strb	r3, [r7, #0]
    68ba:	9f02      	ldr	r7, [sp, #8]
    68bc:	0748      	lsls	r0, r1, #29
    68be:	08f9      	lsrs	r1, r7, #3
    68c0:	08d7      	lsrs	r7, r2, #3
    68c2:	4308      	orrs	r0, r1
    68c4:	9703      	str	r7, [sp, #12]
    68c6:	1c01      	adds	r1, r0, #0
    68c8:	9002      	str	r0, [sp, #8]
    68ca:	9f07      	ldr	r7, [sp, #28]
    68cc:	9803      	ldr	r0, [sp, #12]
    68ce:	3f01      	subs	r7, #1
    68d0:	4301      	orrs	r1, r0
    68d2:	d1ea      	bne.n	68aa <_svfiprintf_r+0x442>
    68d4:	07f1      	lsls	r1, r6, #31
    68d6:	d542      	bpl.n	695e <_svfiprintf_r+0x4f6>
    68d8:	2b30      	cmp	r3, #48	; 0x30
    68da:	d040      	beq.n	695e <_svfiprintf_r+0x4f6>
    68dc:	2230      	movs	r2, #48	; 0x30
    68de:	9707      	str	r7, [sp, #28]
    68e0:	703a      	strb	r2, [r7, #0]
    68e2:	e03c      	b.n	695e <_svfiprintf_r+0x4f6>
    68e4:	9b03      	ldr	r3, [sp, #12]
    68e6:	2b00      	cmp	r3, #0
    68e8:	d104      	bne.n	68f4 <_svfiprintf_r+0x48c>
    68ea:	9a02      	ldr	r2, [sp, #8]
    68ec:	2a09      	cmp	r2, #9
    68ee:	d801      	bhi.n	68f4 <_svfiprintf_r+0x48c>
    68f0:	3230      	adds	r2, #48	; 0x30
    68f2:	e032      	b.n	695a <_svfiprintf_r+0x4f2>
    68f4:	9802      	ldr	r0, [sp, #8]
    68f6:	9903      	ldr	r1, [sp, #12]
    68f8:	220a      	movs	r2, #10
    68fa:	2300      	movs	r3, #0
    68fc:	9707      	str	r7, [sp, #28]
    68fe:	f7fc fa59 	bl	2db4 <__aeabi_uldivmod>
    6902:	9802      	ldr	r0, [sp, #8]
    6904:	9903      	ldr	r1, [sp, #12]
    6906:	3230      	adds	r2, #48	; 0x30
    6908:	703a      	strb	r2, [r7, #0]
    690a:	220a      	movs	r2, #10
    690c:	2300      	movs	r3, #0
    690e:	f7fc fa51 	bl	2db4 <__aeabi_uldivmod>
    6912:	3f01      	subs	r7, #1
    6914:	9002      	str	r0, [sp, #8]
    6916:	9103      	str	r1, [sp, #12]
    6918:	4308      	orrs	r0, r1
    691a:	d1eb      	bne.n	68f4 <_svfiprintf_r+0x48c>
    691c:	e01f      	b.n	695e <_svfiprintf_r+0x4f6>
    691e:	9802      	ldr	r0, [sp, #8]
    6920:	990e      	ldr	r1, [sp, #56]	; 0x38
    6922:	230f      	movs	r3, #15
    6924:	4003      	ands	r3, r0
    6926:	5cca      	ldrb	r2, [r1, r3]
    6928:	9b03      	ldr	r3, [sp, #12]
    692a:	703a      	strb	r2, [r7, #0]
    692c:	0719      	lsls	r1, r3, #28
    692e:	9b03      	ldr	r3, [sp, #12]
    6930:	0902      	lsrs	r2, r0, #4
    6932:	0918      	lsrs	r0, r3, #4
    6934:	4311      	orrs	r1, r2
    6936:	9003      	str	r0, [sp, #12]
    6938:	1c0a      	adds	r2, r1, #0
    693a:	9102      	str	r1, [sp, #8]
    693c:	9903      	ldr	r1, [sp, #12]
    693e:	9707      	str	r7, [sp, #28]
    6940:	430a      	orrs	r2, r1
    6942:	3f01      	subs	r7, #1
    6944:	2a00      	cmp	r2, #0
    6946:	d1ea      	bne.n	691e <_svfiprintf_r+0x4b6>
    6948:	e009      	b.n	695e <_svfiprintf_r+0x4f6>
    694a:	af20      	add	r7, sp, #128	; 0x80
    694c:	9707      	str	r7, [sp, #28]
    694e:	2a00      	cmp	r2, #0
    6950:	d105      	bne.n	695e <_svfiprintf_r+0x4f6>
    6952:	07f0      	lsls	r0, r6, #31
    6954:	d503      	bpl.n	695e <_svfiprintf_r+0x4f6>
    6956:	3f01      	subs	r7, #1
    6958:	2230      	movs	r2, #48	; 0x30
    695a:	703a      	strb	r2, [r7, #0]
    695c:	9707      	str	r7, [sp, #28]
    695e:	9f07      	ldr	r7, [sp, #28]
    6960:	aa20      	add	r2, sp, #128	; 0x80
    6962:	1bd1      	subs	r1, r2, r7
    6964:	910b      	str	r1, [sp, #44]	; 0x2c
    6966:	e014      	b.n	6992 <_svfiprintf_r+0x52a>
    6968:	4668      	mov	r0, sp
    696a:	3047      	adds	r0, #71	; 0x47
    696c:	7002      	strb	r2, [r0, #0]
    696e:	2b00      	cmp	r3, #0
    6970:	d100      	bne.n	6974 <_svfiprintf_r+0x50c>
    6972:	e157      	b.n	6c24 <_svfiprintf_r+0x7bc>
    6974:	aa16      	add	r2, sp, #88	; 0x58
    6976:	7013      	strb	r3, [r2, #0]
    6978:	2701      	movs	r7, #1
    697a:	2300      	movs	r3, #0
    697c:	7003      	strb	r3, [r0, #0]
    697e:	970b      	str	r7, [sp, #44]	; 0x2c
    6980:	9304      	str	r3, [sp, #16]
    6982:	9207      	str	r2, [sp, #28]
    6984:	e005      	b.n	6992 <_svfiprintf_r+0x52a>
    6986:	9b04      	ldr	r3, [sp, #16]
    6988:	9004      	str	r0, [sp, #16]
    698a:	930b      	str	r3, [sp, #44]	; 0x2c
    698c:	e001      	b.n	6992 <_svfiprintf_r+0x52a>
    698e:	900b      	str	r0, [sp, #44]	; 0x2c
    6990:	9704      	str	r7, [sp, #16]
    6992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6994:	9804      	ldr	r0, [sp, #16]
    6996:	4283      	cmp	r3, r0
    6998:	da00      	bge.n	699c <_svfiprintf_r+0x534>
    699a:	1c03      	adds	r3, r0, #0
    699c:	466f      	mov	r7, sp
    699e:	3747      	adds	r7, #71	; 0x47
    69a0:	783a      	ldrb	r2, [r7, #0]
    69a2:	2002      	movs	r0, #2
    69a4:	1e51      	subs	r1, r2, #1
    69a6:	418a      	sbcs	r2, r1
    69a8:	1899      	adds	r1, r3, r2
    69aa:	4030      	ands	r0, r6
    69ac:	910d      	str	r1, [sp, #52]	; 0x34
    69ae:	9009      	str	r0, [sp, #36]	; 0x24
    69b0:	d001      	beq.n	69b6 <_svfiprintf_r+0x54e>
    69b2:	3102      	adds	r1, #2
    69b4:	910d      	str	r1, [sp, #52]	; 0x34
    69b6:	2384      	movs	r3, #132	; 0x84
    69b8:	4033      	ands	r3, r6
    69ba:	930f      	str	r3, [sp, #60]	; 0x3c
    69bc:	d133      	bne.n	6a26 <_svfiprintf_r+0x5be>
    69be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    69c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    69c2:	1abf      	subs	r7, r7, r2
    69c4:	2f00      	cmp	r7, #0
    69c6:	dd2e      	ble.n	6a26 <_svfiprintf_r+0x5be>
    69c8:	499f      	ldr	r1, [pc, #636]	; (6c48 <_svfiprintf_r+0x7e0>)
    69ca:	6029      	str	r1, [r5, #0]
    69cc:	2f10      	cmp	r7, #16
    69ce:	dd16      	ble.n	69fe <_svfiprintf_r+0x596>
    69d0:	9815      	ldr	r0, [sp, #84]	; 0x54
    69d2:	9914      	ldr	r1, [sp, #80]	; 0x50
    69d4:	2310      	movs	r3, #16
    69d6:	3010      	adds	r0, #16
    69d8:	3101      	adds	r1, #1
    69da:	606b      	str	r3, [r5, #4]
    69dc:	9015      	str	r0, [sp, #84]	; 0x54
    69de:	9114      	str	r1, [sp, #80]	; 0x50
    69e0:	2907      	cmp	r1, #7
    69e2:	dc01      	bgt.n	69e8 <_svfiprintf_r+0x580>
    69e4:	3508      	adds	r5, #8
    69e6:	e008      	b.n	69fa <_svfiprintf_r+0x592>
    69e8:	9808      	ldr	r0, [sp, #32]
    69ea:	9905      	ldr	r1, [sp, #20]
    69ec:	aa13      	add	r2, sp, #76	; 0x4c
    69ee:	f7ff fcbb 	bl	6368 <__ssprint_r>
    69f2:	2800      	cmp	r0, #0
    69f4:	d000      	beq.n	69f8 <_svfiprintf_r+0x590>
    69f6:	e11d      	b.n	6c34 <_svfiprintf_r+0x7cc>
    69f8:	ad20      	add	r5, sp, #128	; 0x80
    69fa:	3f10      	subs	r7, #16
    69fc:	e7e4      	b.n	69c8 <_svfiprintf_r+0x560>
    69fe:	9815      	ldr	r0, [sp, #84]	; 0x54
    6a00:	606f      	str	r7, [r5, #4]
    6a02:	19c3      	adds	r3, r0, r7
    6a04:	9f14      	ldr	r7, [sp, #80]	; 0x50
    6a06:	9315      	str	r3, [sp, #84]	; 0x54
    6a08:	3701      	adds	r7, #1
    6a0a:	9714      	str	r7, [sp, #80]	; 0x50
    6a0c:	2f07      	cmp	r7, #7
    6a0e:	dc01      	bgt.n	6a14 <_svfiprintf_r+0x5ac>
    6a10:	3508      	adds	r5, #8
    6a12:	e008      	b.n	6a26 <_svfiprintf_r+0x5be>
    6a14:	9808      	ldr	r0, [sp, #32]
    6a16:	9905      	ldr	r1, [sp, #20]
    6a18:	aa13      	add	r2, sp, #76	; 0x4c
    6a1a:	f7ff fca5 	bl	6368 <__ssprint_r>
    6a1e:	2800      	cmp	r0, #0
    6a20:	d000      	beq.n	6a24 <_svfiprintf_r+0x5bc>
    6a22:	e107      	b.n	6c34 <_svfiprintf_r+0x7cc>
    6a24:	ad20      	add	r5, sp, #128	; 0x80
    6a26:	4669      	mov	r1, sp
    6a28:	3147      	adds	r1, #71	; 0x47
    6a2a:	780a      	ldrb	r2, [r1, #0]
    6a2c:	2a00      	cmp	r2, #0
    6a2e:	d015      	beq.n	6a5c <_svfiprintf_r+0x5f4>
    6a30:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6a32:	9f14      	ldr	r7, [sp, #80]	; 0x50
    6a34:	2001      	movs	r0, #1
    6a36:	3301      	adds	r3, #1
    6a38:	3701      	adds	r7, #1
    6a3a:	6029      	str	r1, [r5, #0]
    6a3c:	6068      	str	r0, [r5, #4]
    6a3e:	9315      	str	r3, [sp, #84]	; 0x54
    6a40:	9714      	str	r7, [sp, #80]	; 0x50
    6a42:	2f07      	cmp	r7, #7
    6a44:	dc01      	bgt.n	6a4a <_svfiprintf_r+0x5e2>
    6a46:	3508      	adds	r5, #8
    6a48:	e008      	b.n	6a5c <_svfiprintf_r+0x5f4>
    6a4a:	9808      	ldr	r0, [sp, #32]
    6a4c:	9905      	ldr	r1, [sp, #20]
    6a4e:	aa13      	add	r2, sp, #76	; 0x4c
    6a50:	f7ff fc8a 	bl	6368 <__ssprint_r>
    6a54:	2800      	cmp	r0, #0
    6a56:	d000      	beq.n	6a5a <_svfiprintf_r+0x5f2>
    6a58:	e0ec      	b.n	6c34 <_svfiprintf_r+0x7cc>
    6a5a:	ad20      	add	r5, sp, #128	; 0x80
    6a5c:	9909      	ldr	r1, [sp, #36]	; 0x24
    6a5e:	2900      	cmp	r1, #0
    6a60:	d016      	beq.n	6a90 <_svfiprintf_r+0x628>
    6a62:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6a64:	9f14      	ldr	r7, [sp, #80]	; 0x50
    6a66:	aa12      	add	r2, sp, #72	; 0x48
    6a68:	2002      	movs	r0, #2
    6a6a:	3302      	adds	r3, #2
    6a6c:	3701      	adds	r7, #1
    6a6e:	602a      	str	r2, [r5, #0]
    6a70:	6068      	str	r0, [r5, #4]
    6a72:	9315      	str	r3, [sp, #84]	; 0x54
    6a74:	9714      	str	r7, [sp, #80]	; 0x50
    6a76:	2f07      	cmp	r7, #7
    6a78:	dc01      	bgt.n	6a7e <_svfiprintf_r+0x616>
    6a7a:	3508      	adds	r5, #8
    6a7c:	e008      	b.n	6a90 <_svfiprintf_r+0x628>
    6a7e:	9808      	ldr	r0, [sp, #32]
    6a80:	9905      	ldr	r1, [sp, #20]
    6a82:	aa13      	add	r2, sp, #76	; 0x4c
    6a84:	f7ff fc70 	bl	6368 <__ssprint_r>
    6a88:	2800      	cmp	r0, #0
    6a8a:	d000      	beq.n	6a8e <_svfiprintf_r+0x626>
    6a8c:	e0d2      	b.n	6c34 <_svfiprintf_r+0x7cc>
    6a8e:	ad20      	add	r5, sp, #128	; 0x80
    6a90:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6a92:	2980      	cmp	r1, #128	; 0x80
    6a94:	d134      	bne.n	6b00 <_svfiprintf_r+0x698>
    6a96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6a98:	980d      	ldr	r0, [sp, #52]	; 0x34
    6a9a:	1a17      	subs	r7, r2, r0
    6a9c:	2f00      	cmp	r7, #0
    6a9e:	dd2f      	ble.n	6b00 <_svfiprintf_r+0x698>
    6aa0:	4b69      	ldr	r3, [pc, #420]	; (6c48 <_svfiprintf_r+0x7e0>)
    6aa2:	3310      	adds	r3, #16
    6aa4:	602b      	str	r3, [r5, #0]
    6aa6:	2f10      	cmp	r7, #16
    6aa8:	dd16      	ble.n	6ad8 <_svfiprintf_r+0x670>
    6aaa:	9915      	ldr	r1, [sp, #84]	; 0x54
    6aac:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6aae:	2010      	movs	r0, #16
    6ab0:	3110      	adds	r1, #16
    6ab2:	3201      	adds	r2, #1
    6ab4:	6068      	str	r0, [r5, #4]
    6ab6:	9115      	str	r1, [sp, #84]	; 0x54
    6ab8:	9214      	str	r2, [sp, #80]	; 0x50
    6aba:	2a07      	cmp	r2, #7
    6abc:	dc01      	bgt.n	6ac2 <_svfiprintf_r+0x65a>
    6abe:	3508      	adds	r5, #8
    6ac0:	e008      	b.n	6ad4 <_svfiprintf_r+0x66c>
    6ac2:	9808      	ldr	r0, [sp, #32]
    6ac4:	9905      	ldr	r1, [sp, #20]
    6ac6:	aa13      	add	r2, sp, #76	; 0x4c
    6ac8:	f7ff fc4e 	bl	6368 <__ssprint_r>
    6acc:	2800      	cmp	r0, #0
    6ace:	d000      	beq.n	6ad2 <_svfiprintf_r+0x66a>
    6ad0:	e0b0      	b.n	6c34 <_svfiprintf_r+0x7cc>
    6ad2:	ad20      	add	r5, sp, #128	; 0x80
    6ad4:	3f10      	subs	r7, #16
    6ad6:	e7e3      	b.n	6aa0 <_svfiprintf_r+0x638>
    6ad8:	9915      	ldr	r1, [sp, #84]	; 0x54
    6ada:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6adc:	606f      	str	r7, [r5, #4]
    6ade:	3201      	adds	r2, #1
    6ae0:	19cf      	adds	r7, r1, r7
    6ae2:	9715      	str	r7, [sp, #84]	; 0x54
    6ae4:	9214      	str	r2, [sp, #80]	; 0x50
    6ae6:	2a07      	cmp	r2, #7
    6ae8:	dc01      	bgt.n	6aee <_svfiprintf_r+0x686>
    6aea:	3508      	adds	r5, #8
    6aec:	e008      	b.n	6b00 <_svfiprintf_r+0x698>
    6aee:	9808      	ldr	r0, [sp, #32]
    6af0:	9905      	ldr	r1, [sp, #20]
    6af2:	aa13      	add	r2, sp, #76	; 0x4c
    6af4:	f7ff fc38 	bl	6368 <__ssprint_r>
    6af8:	2800      	cmp	r0, #0
    6afa:	d000      	beq.n	6afe <_svfiprintf_r+0x696>
    6afc:	e09a      	b.n	6c34 <_svfiprintf_r+0x7cc>
    6afe:	ad20      	add	r5, sp, #128	; 0x80
    6b00:	9b04      	ldr	r3, [sp, #16]
    6b02:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6b04:	1a1f      	subs	r7, r3, r0
    6b06:	2f00      	cmp	r7, #0
    6b08:	dd2d      	ble.n	6b66 <_svfiprintf_r+0x6fe>
    6b0a:	494f      	ldr	r1, [pc, #316]	; (6c48 <_svfiprintf_r+0x7e0>)
    6b0c:	3110      	adds	r1, #16
    6b0e:	6029      	str	r1, [r5, #0]
    6b10:	2f10      	cmp	r7, #16
    6b12:	dd15      	ble.n	6b40 <_svfiprintf_r+0x6d8>
    6b14:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6b16:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6b18:	2110      	movs	r1, #16
    6b1a:	3210      	adds	r2, #16
    6b1c:	3301      	adds	r3, #1
    6b1e:	6069      	str	r1, [r5, #4]
    6b20:	9215      	str	r2, [sp, #84]	; 0x54
    6b22:	9314      	str	r3, [sp, #80]	; 0x50
    6b24:	2b07      	cmp	r3, #7
    6b26:	dc01      	bgt.n	6b2c <_svfiprintf_r+0x6c4>
    6b28:	3508      	adds	r5, #8
    6b2a:	e007      	b.n	6b3c <_svfiprintf_r+0x6d4>
    6b2c:	9808      	ldr	r0, [sp, #32]
    6b2e:	9905      	ldr	r1, [sp, #20]
    6b30:	aa13      	add	r2, sp, #76	; 0x4c
    6b32:	f7ff fc19 	bl	6368 <__ssprint_r>
    6b36:	2800      	cmp	r0, #0
    6b38:	d17c      	bne.n	6c34 <_svfiprintf_r+0x7cc>
    6b3a:	ad20      	add	r5, sp, #128	; 0x80
    6b3c:	3f10      	subs	r7, #16
    6b3e:	e7e4      	b.n	6b0a <_svfiprintf_r+0x6a2>
    6b40:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6b42:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6b44:	606f      	str	r7, [r5, #4]
    6b46:	3301      	adds	r3, #1
    6b48:	19d7      	adds	r7, r2, r7
    6b4a:	9715      	str	r7, [sp, #84]	; 0x54
    6b4c:	9314      	str	r3, [sp, #80]	; 0x50
    6b4e:	2b07      	cmp	r3, #7
    6b50:	dc01      	bgt.n	6b56 <_svfiprintf_r+0x6ee>
    6b52:	3508      	adds	r5, #8
    6b54:	e007      	b.n	6b66 <_svfiprintf_r+0x6fe>
    6b56:	9808      	ldr	r0, [sp, #32]
    6b58:	9905      	ldr	r1, [sp, #20]
    6b5a:	aa13      	add	r2, sp, #76	; 0x4c
    6b5c:	f7ff fc04 	bl	6368 <__ssprint_r>
    6b60:	2800      	cmp	r0, #0
    6b62:	d167      	bne.n	6c34 <_svfiprintf_r+0x7cc>
    6b64:	ad20      	add	r5, sp, #128	; 0x80
    6b66:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6b68:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6b6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6b6c:	9807      	ldr	r0, [sp, #28]
    6b6e:	1857      	adds	r7, r2, r1
    6b70:	3301      	adds	r3, #1
    6b72:	6028      	str	r0, [r5, #0]
    6b74:	6069      	str	r1, [r5, #4]
    6b76:	9715      	str	r7, [sp, #84]	; 0x54
    6b78:	9314      	str	r3, [sp, #80]	; 0x50
    6b7a:	2b07      	cmp	r3, #7
    6b7c:	dc01      	bgt.n	6b82 <_svfiprintf_r+0x71a>
    6b7e:	3508      	adds	r5, #8
    6b80:	e007      	b.n	6b92 <_svfiprintf_r+0x72a>
    6b82:	9808      	ldr	r0, [sp, #32]
    6b84:	9905      	ldr	r1, [sp, #20]
    6b86:	aa13      	add	r2, sp, #76	; 0x4c
    6b88:	f7ff fbee 	bl	6368 <__ssprint_r>
    6b8c:	2800      	cmp	r0, #0
    6b8e:	d151      	bne.n	6c34 <_svfiprintf_r+0x7cc>
    6b90:	ad20      	add	r5, sp, #128	; 0x80
    6b92:	0771      	lsls	r1, r6, #29
    6b94:	d40b      	bmi.n	6bae <_svfiprintf_r+0x746>
    6b96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6b98:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    6b9a:	42b3      	cmp	r3, r6
    6b9c:	da00      	bge.n	6ba0 <_svfiprintf_r+0x738>
    6b9e:	1c33      	adds	r3, r6, #0
    6ba0:	980a      	ldr	r0, [sp, #40]	; 0x28
    6ba2:	9d15      	ldr	r5, [sp, #84]	; 0x54
    6ba4:	18c1      	adds	r1, r0, r3
    6ba6:	910a      	str	r1, [sp, #40]	; 0x28
    6ba8:	2d00      	cmp	r5, #0
    6baa:	d037      	beq.n	6c1c <_svfiprintf_r+0x7b4>
    6bac:	e02f      	b.n	6c0e <_svfiprintf_r+0x7a6>
    6bae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    6bb0:	980d      	ldr	r0, [sp, #52]	; 0x34
    6bb2:	1a37      	subs	r7, r6, r0
    6bb4:	2f00      	cmp	r7, #0
    6bb6:	ddee      	ble.n	6b96 <_svfiprintf_r+0x72e>
    6bb8:	4923      	ldr	r1, [pc, #140]	; (6c48 <_svfiprintf_r+0x7e0>)
    6bba:	6029      	str	r1, [r5, #0]
    6bbc:	2f10      	cmp	r7, #16
    6bbe:	dd15      	ble.n	6bec <_svfiprintf_r+0x784>
    6bc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6bc2:	9814      	ldr	r0, [sp, #80]	; 0x50
    6bc4:	2610      	movs	r6, #16
    6bc6:	3310      	adds	r3, #16
    6bc8:	3001      	adds	r0, #1
    6bca:	606e      	str	r6, [r5, #4]
    6bcc:	9315      	str	r3, [sp, #84]	; 0x54
    6bce:	9014      	str	r0, [sp, #80]	; 0x50
    6bd0:	2807      	cmp	r0, #7
    6bd2:	dc01      	bgt.n	6bd8 <_svfiprintf_r+0x770>
    6bd4:	3508      	adds	r5, #8
    6bd6:	e007      	b.n	6be8 <_svfiprintf_r+0x780>
    6bd8:	9808      	ldr	r0, [sp, #32]
    6bda:	9905      	ldr	r1, [sp, #20]
    6bdc:	aa13      	add	r2, sp, #76	; 0x4c
    6bde:	f7ff fbc3 	bl	6368 <__ssprint_r>
    6be2:	2800      	cmp	r0, #0
    6be4:	d126      	bne.n	6c34 <_svfiprintf_r+0x7cc>
    6be6:	ad20      	add	r5, sp, #128	; 0x80
    6be8:	3f10      	subs	r7, #16
    6bea:	e7e5      	b.n	6bb8 <_svfiprintf_r+0x750>
    6bec:	606f      	str	r7, [r5, #4]
    6bee:	9d15      	ldr	r5, [sp, #84]	; 0x54
    6bf0:	19ea      	adds	r2, r5, r7
    6bf2:	9f14      	ldr	r7, [sp, #80]	; 0x50
    6bf4:	9215      	str	r2, [sp, #84]	; 0x54
    6bf6:	3701      	adds	r7, #1
    6bf8:	9714      	str	r7, [sp, #80]	; 0x50
    6bfa:	2f07      	cmp	r7, #7
    6bfc:	ddcb      	ble.n	6b96 <_svfiprintf_r+0x72e>
    6bfe:	9808      	ldr	r0, [sp, #32]
    6c00:	9905      	ldr	r1, [sp, #20]
    6c02:	aa13      	add	r2, sp, #76	; 0x4c
    6c04:	f7ff fbb0 	bl	6368 <__ssprint_r>
    6c08:	2800      	cmp	r0, #0
    6c0a:	d0c4      	beq.n	6b96 <_svfiprintf_r+0x72e>
    6c0c:	e012      	b.n	6c34 <_svfiprintf_r+0x7cc>
    6c0e:	9808      	ldr	r0, [sp, #32]
    6c10:	9905      	ldr	r1, [sp, #20]
    6c12:	aa13      	add	r2, sp, #76	; 0x4c
    6c14:	f7ff fba8 	bl	6368 <__ssprint_r>
    6c18:	2800      	cmp	r0, #0
    6c1a:	d10b      	bne.n	6c34 <_svfiprintf_r+0x7cc>
    6c1c:	2200      	movs	r2, #0
    6c1e:	9214      	str	r2, [sp, #80]	; 0x50
    6c20:	ad20      	add	r5, sp, #128	; 0x80
    6c22:	e445      	b.n	64b0 <_svfiprintf_r+0x48>
    6c24:	9d15      	ldr	r5, [sp, #84]	; 0x54
    6c26:	2d00      	cmp	r5, #0
    6c28:	d004      	beq.n	6c34 <_svfiprintf_r+0x7cc>
    6c2a:	9808      	ldr	r0, [sp, #32]
    6c2c:	9905      	ldr	r1, [sp, #20]
    6c2e:	aa13      	add	r2, sp, #76	; 0x4c
    6c30:	f7ff fb9a 	bl	6368 <__ssprint_r>
    6c34:	9c05      	ldr	r4, [sp, #20]
    6c36:	89a6      	ldrh	r6, [r4, #12]
    6c38:	0670      	lsls	r0, r6, #25
    6c3a:	d502      	bpl.n	6c42 <_svfiprintf_r+0x7da>
    6c3c:	2301      	movs	r3, #1
    6c3e:	4258      	negs	r0, r3
    6c40:	900a      	str	r0, [sp, #40]	; 0x28
    6c42:	980a      	ldr	r0, [sp, #40]	; 0x28
    6c44:	b031      	add	sp, #196	; 0xc4
    6c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c48:	00009cb0 	.word	0x00009cb0

00006c4c <_calloc_r>:
    6c4c:	b510      	push	{r4, lr}
    6c4e:	4351      	muls	r1, r2
    6c50:	f7fe fd42 	bl	56d8 <_malloc_r>
    6c54:	1e04      	subs	r4, r0, #0
    6c56:	d026      	beq.n	6ca6 <_calloc_r+0x5a>
    6c58:	1c03      	adds	r3, r0, #0
    6c5a:	3b08      	subs	r3, #8
    6c5c:	685a      	ldr	r2, [r3, #4]
    6c5e:	2003      	movs	r0, #3
    6c60:	4382      	bics	r2, r0
    6c62:	3a04      	subs	r2, #4
    6c64:	2a24      	cmp	r2, #36	; 0x24
    6c66:	d81a      	bhi.n	6c9e <_calloc_r+0x52>
    6c68:	1c23      	adds	r3, r4, #0
    6c6a:	2a13      	cmp	r2, #19
    6c6c:	d912      	bls.n	6c94 <_calloc_r+0x48>
    6c6e:	2100      	movs	r1, #0
    6c70:	6021      	str	r1, [r4, #0]
    6c72:	6061      	str	r1, [r4, #4]
    6c74:	2a1b      	cmp	r2, #27
    6c76:	d802      	bhi.n	6c7e <_calloc_r+0x32>
    6c78:	1c23      	adds	r3, r4, #0
    6c7a:	3308      	adds	r3, #8
    6c7c:	e00a      	b.n	6c94 <_calloc_r+0x48>
    6c7e:	60a1      	str	r1, [r4, #8]
    6c80:	60e1      	str	r1, [r4, #12]
    6c82:	2a24      	cmp	r2, #36	; 0x24
    6c84:	d002      	beq.n	6c8c <_calloc_r+0x40>
    6c86:	1c23      	adds	r3, r4, #0
    6c88:	3310      	adds	r3, #16
    6c8a:	e003      	b.n	6c94 <_calloc_r+0x48>
    6c8c:	1c23      	adds	r3, r4, #0
    6c8e:	6121      	str	r1, [r4, #16]
    6c90:	6161      	str	r1, [r4, #20]
    6c92:	3318      	adds	r3, #24
    6c94:	2200      	movs	r2, #0
    6c96:	601a      	str	r2, [r3, #0]
    6c98:	605a      	str	r2, [r3, #4]
    6c9a:	609a      	str	r2, [r3, #8]
    6c9c:	e003      	b.n	6ca6 <_calloc_r+0x5a>
    6c9e:	1c20      	adds	r0, r4, #0
    6ca0:	2100      	movs	r1, #0
    6ca2:	f7fc fd62 	bl	376a <memset>
    6ca6:	1c20      	adds	r0, r4, #0
    6ca8:	bd10      	pop	{r4, pc}

00006caa <memmove>:
    6caa:	b570      	push	{r4, r5, r6, lr}
    6cac:	4281      	cmp	r1, r0
    6cae:	d20c      	bcs.n	6cca <memmove+0x20>
    6cb0:	188c      	adds	r4, r1, r2
    6cb2:	42a0      	cmp	r0, r4
    6cb4:	d209      	bcs.n	6cca <memmove+0x20>
    6cb6:	1885      	adds	r5, r0, r2
    6cb8:	1c13      	adds	r3, r2, #0
    6cba:	3b01      	subs	r3, #1
    6cbc:	d30c      	bcc.n	6cd8 <memmove+0x2e>
    6cbe:	4251      	negs	r1, r2
    6cc0:	1866      	adds	r6, r4, r1
    6cc2:	5cf6      	ldrb	r6, [r6, r3]
    6cc4:	1869      	adds	r1, r5, r1
    6cc6:	54ce      	strb	r6, [r1, r3]
    6cc8:	e7f7      	b.n	6cba <memmove+0x10>
    6cca:	2300      	movs	r3, #0
    6ccc:	4293      	cmp	r3, r2
    6cce:	d003      	beq.n	6cd8 <memmove+0x2e>
    6cd0:	5ccc      	ldrb	r4, [r1, r3]
    6cd2:	54c4      	strb	r4, [r0, r3]
    6cd4:	3301      	adds	r3, #1
    6cd6:	e7f9      	b.n	6ccc <memmove+0x22>
    6cd8:	bd70      	pop	{r4, r5, r6, pc}
	...

00006cdc <_realloc_r>:
    6cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cde:	b087      	sub	sp, #28
    6ce0:	9003      	str	r0, [sp, #12]
    6ce2:	1c0c      	adds	r4, r1, #0
    6ce4:	1c16      	adds	r6, r2, #0
    6ce6:	2900      	cmp	r1, #0
    6ce8:	d104      	bne.n	6cf4 <_realloc_r+0x18>
    6cea:	1c11      	adds	r1, r2, #0
    6cec:	f7fe fcf4 	bl	56d8 <_malloc_r>
    6cf0:	1c06      	adds	r6, r0, #0
    6cf2:	e18d      	b.n	7010 <_realloc_r+0x334>
    6cf4:	9803      	ldr	r0, [sp, #12]
    6cf6:	f7fe feee 	bl	5ad6 <__malloc_lock>
    6cfa:	1c20      	adds	r0, r4, #0
    6cfc:	3808      	subs	r0, #8
    6cfe:	6841      	ldr	r1, [r0, #4]
    6d00:	2303      	movs	r3, #3
    6d02:	1c35      	adds	r5, r6, #0
    6d04:	9105      	str	r1, [sp, #20]
    6d06:	350b      	adds	r5, #11
    6d08:	4399      	bics	r1, r3
    6d0a:	9004      	str	r0, [sp, #16]
    6d0c:	9101      	str	r1, [sp, #4]
    6d0e:	2d16      	cmp	r5, #22
    6d10:	d904      	bls.n	6d1c <_realloc_r+0x40>
    6d12:	2707      	movs	r7, #7
    6d14:	43bd      	bics	r5, r7
    6d16:	9502      	str	r5, [sp, #8]
    6d18:	d502      	bpl.n	6d20 <_realloc_r+0x44>
    6d1a:	e004      	b.n	6d26 <_realloc_r+0x4a>
    6d1c:	2210      	movs	r2, #16
    6d1e:	9202      	str	r2, [sp, #8]
    6d20:	9802      	ldr	r0, [sp, #8]
    6d22:	42b0      	cmp	r0, r6
    6d24:	d204      	bcs.n	6d30 <_realloc_r+0x54>
    6d26:	9c03      	ldr	r4, [sp, #12]
    6d28:	260c      	movs	r6, #12
    6d2a:	6026      	str	r6, [r4, #0]
    6d2c:	2600      	movs	r6, #0
    6d2e:	e16f      	b.n	7010 <_realloc_r+0x334>
    6d30:	9b01      	ldr	r3, [sp, #4]
    6d32:	9902      	ldr	r1, [sp, #8]
    6d34:	428b      	cmp	r3, r1
    6d36:	db00      	blt.n	6d3a <_realloc_r+0x5e>
    6d38:	e146      	b.n	6fc8 <_realloc_r+0x2ec>
    6d3a:	49b7      	ldr	r1, [pc, #732]	; (7018 <_realloc_r+0x33c>)
    6d3c:	9d04      	ldr	r5, [sp, #16]
    6d3e:	688a      	ldr	r2, [r1, #8]
    6d40:	18eb      	adds	r3, r5, r3
    6d42:	4694      	mov	ip, r2
    6d44:	685a      	ldr	r2, [r3, #4]
    6d46:	4563      	cmp	r3, ip
    6d48:	d006      	beq.n	6d58 <_realloc_r+0x7c>
    6d4a:	2001      	movs	r0, #1
    6d4c:	1c17      	adds	r7, r2, #0
    6d4e:	4387      	bics	r7, r0
    6d50:	19dd      	adds	r5, r3, r7
    6d52:	686f      	ldr	r7, [r5, #4]
    6d54:	4207      	tst	r7, r0
    6d56:	d124      	bne.n	6da2 <_realloc_r+0xc6>
    6d58:	2003      	movs	r0, #3
    6d5a:	9d01      	ldr	r5, [sp, #4]
    6d5c:	4382      	bics	r2, r0
    6d5e:	1957      	adds	r7, r2, r5
    6d60:	9802      	ldr	r0, [sp, #8]
    6d62:	4563      	cmp	r3, ip
    6d64:	d116      	bne.n	6d94 <_realloc_r+0xb8>
    6d66:	3010      	adds	r0, #16
    6d68:	4287      	cmp	r7, r0
    6d6a:	db1c      	blt.n	6da6 <_realloc_r+0xca>
    6d6c:	9e02      	ldr	r6, [sp, #8]
    6d6e:	9d04      	ldr	r5, [sp, #16]
    6d70:	1c23      	adds	r3, r4, #0
    6d72:	19a8      	adds	r0, r5, r6
    6d74:	6088      	str	r0, [r1, #8]
    6d76:	1bb9      	subs	r1, r7, r6
    6d78:	2701      	movs	r7, #1
    6d7a:	4339      	orrs	r1, r7
    6d7c:	6041      	str	r1, [r0, #4]
    6d7e:	3b08      	subs	r3, #8
    6d80:	685a      	ldr	r2, [r3, #4]
    6d82:	9d02      	ldr	r5, [sp, #8]
    6d84:	4017      	ands	r7, r2
    6d86:	432f      	orrs	r7, r5
    6d88:	605f      	str	r7, [r3, #4]
    6d8a:	9803      	ldr	r0, [sp, #12]
    6d8c:	f7fe fea4 	bl	5ad8 <__malloc_unlock>
    6d90:	1c26      	adds	r6, r4, #0
    6d92:	e13d      	b.n	7010 <_realloc_r+0x334>
    6d94:	4287      	cmp	r7, r0
    6d96:	db06      	blt.n	6da6 <_realloc_r+0xca>
    6d98:	68dc      	ldr	r4, [r3, #12]
    6d9a:	689e      	ldr	r6, [r3, #8]
    6d9c:	60f4      	str	r4, [r6, #12]
    6d9e:	60a6      	str	r6, [r4, #8]
    6da0:	e113      	b.n	6fca <_realloc_r+0x2ee>
    6da2:	2200      	movs	r2, #0
    6da4:	1c13      	adds	r3, r2, #0
    6da6:	9905      	ldr	r1, [sp, #20]
    6da8:	07c9      	lsls	r1, r1, #31
    6daa:	d500      	bpl.n	6dae <_realloc_r+0xd2>
    6dac:	e0ba      	b.n	6f24 <_realloc_r+0x248>
    6dae:	1c27      	adds	r7, r4, #0
    6db0:	3f08      	subs	r7, #8
    6db2:	683d      	ldr	r5, [r7, #0]
    6db4:	9804      	ldr	r0, [sp, #16]
    6db6:	2103      	movs	r1, #3
    6db8:	1b45      	subs	r5, r0, r5
    6dba:	686f      	ldr	r7, [r5, #4]
    6dbc:	9801      	ldr	r0, [sp, #4]
    6dbe:	438f      	bics	r7, r1
    6dc0:	1839      	adds	r1, r7, r0
    6dc2:	2b00      	cmp	r3, #0
    6dc4:	d079      	beq.n	6eba <_realloc_r+0x1de>
    6dc6:	188f      	adds	r7, r1, r2
    6dc8:	4563      	cmp	r3, ip
    6dca:	d143      	bne.n	6e54 <_realloc_r+0x178>
    6dcc:	9a02      	ldr	r2, [sp, #8]
    6dce:	3210      	adds	r2, #16
    6dd0:	4297      	cmp	r7, r2
    6dd2:	db72      	blt.n	6eba <_realloc_r+0x1de>
    6dd4:	68e9      	ldr	r1, [r5, #12]
    6dd6:	68ab      	ldr	r3, [r5, #8]
    6dd8:	1c02      	adds	r2, r0, #0
    6dda:	1c2e      	adds	r6, r5, #0
    6ddc:	3a04      	subs	r2, #4
    6dde:	60d9      	str	r1, [r3, #12]
    6de0:	608b      	str	r3, [r1, #8]
    6de2:	3608      	adds	r6, #8
    6de4:	2a24      	cmp	r2, #36	; 0x24
    6de6:	d824      	bhi.n	6e32 <_realloc_r+0x156>
    6de8:	1c33      	adds	r3, r6, #0
    6dea:	2a13      	cmp	r2, #19
    6dec:	d91a      	bls.n	6e24 <_realloc_r+0x148>
    6dee:	6820      	ldr	r0, [r4, #0]
    6df0:	60a8      	str	r0, [r5, #8]
    6df2:	6861      	ldr	r1, [r4, #4]
    6df4:	60e9      	str	r1, [r5, #12]
    6df6:	2a1b      	cmp	r2, #27
    6df8:	d803      	bhi.n	6e02 <_realloc_r+0x126>
    6dfa:	1c2b      	adds	r3, r5, #0
    6dfc:	3310      	adds	r3, #16
    6dfe:	3408      	adds	r4, #8
    6e00:	e010      	b.n	6e24 <_realloc_r+0x148>
    6e02:	68a3      	ldr	r3, [r4, #8]
    6e04:	612b      	str	r3, [r5, #16]
    6e06:	68e0      	ldr	r0, [r4, #12]
    6e08:	6168      	str	r0, [r5, #20]
    6e0a:	2a24      	cmp	r2, #36	; 0x24
    6e0c:	d003      	beq.n	6e16 <_realloc_r+0x13a>
    6e0e:	1c2b      	adds	r3, r5, #0
    6e10:	3318      	adds	r3, #24
    6e12:	3410      	adds	r4, #16
    6e14:	e006      	b.n	6e24 <_realloc_r+0x148>
    6e16:	6922      	ldr	r2, [r4, #16]
    6e18:	1c2b      	adds	r3, r5, #0
    6e1a:	61aa      	str	r2, [r5, #24]
    6e1c:	6961      	ldr	r1, [r4, #20]
    6e1e:	3320      	adds	r3, #32
    6e20:	61e9      	str	r1, [r5, #28]
    6e22:	3418      	adds	r4, #24
    6e24:	6820      	ldr	r0, [r4, #0]
    6e26:	6018      	str	r0, [r3, #0]
    6e28:	6862      	ldr	r2, [r4, #4]
    6e2a:	605a      	str	r2, [r3, #4]
    6e2c:	68a4      	ldr	r4, [r4, #8]
    6e2e:	609c      	str	r4, [r3, #8]
    6e30:	e003      	b.n	6e3a <_realloc_r+0x15e>
    6e32:	1c30      	adds	r0, r6, #0
    6e34:	1c21      	adds	r1, r4, #0
    6e36:	f7ff ff38 	bl	6caa <memmove>
    6e3a:	9902      	ldr	r1, [sp, #8]
    6e3c:	2201      	movs	r2, #1
    6e3e:	1a7f      	subs	r7, r7, r1
    6e40:	1868      	adds	r0, r5, r1
    6e42:	4317      	orrs	r7, r2
    6e44:	6047      	str	r7, [r0, #4]
    6e46:	686c      	ldr	r4, [r5, #4]
    6e48:	4b73      	ldr	r3, [pc, #460]	; (7018 <_realloc_r+0x33c>)
    6e4a:	4022      	ands	r2, r4
    6e4c:	430a      	orrs	r2, r1
    6e4e:	6098      	str	r0, [r3, #8]
    6e50:	606a      	str	r2, [r5, #4]
    6e52:	e0b5      	b.n	6fc0 <_realloc_r+0x2e4>
    6e54:	9a02      	ldr	r2, [sp, #8]
    6e56:	4297      	cmp	r7, r2
    6e58:	db2f      	blt.n	6eba <_realloc_r+0x1de>
    6e5a:	68de      	ldr	r6, [r3, #12]
    6e5c:	689b      	ldr	r3, [r3, #8]
    6e5e:	9a01      	ldr	r2, [sp, #4]
    6e60:	60de      	str	r6, [r3, #12]
    6e62:	60b3      	str	r3, [r6, #8]
    6e64:	68e8      	ldr	r0, [r5, #12]
    6e66:	68a9      	ldr	r1, [r5, #8]
    6e68:	3a04      	subs	r2, #4
    6e6a:	60c8      	str	r0, [r1, #12]
    6e6c:	6081      	str	r1, [r0, #8]
    6e6e:	1c28      	adds	r0, r5, #0
    6e70:	3008      	adds	r0, #8
    6e72:	2a24      	cmp	r2, #36	; 0x24
    6e74:	d852      	bhi.n	6f1c <_realloc_r+0x240>
    6e76:	2a13      	cmp	r2, #19
    6e78:	d91a      	bls.n	6eb0 <_realloc_r+0x1d4>
    6e7a:	6826      	ldr	r6, [r4, #0]
    6e7c:	60ae      	str	r6, [r5, #8]
    6e7e:	6863      	ldr	r3, [r4, #4]
    6e80:	60eb      	str	r3, [r5, #12]
    6e82:	2a1b      	cmp	r2, #27
    6e84:	d803      	bhi.n	6e8e <_realloc_r+0x1b2>
    6e86:	1c28      	adds	r0, r5, #0
    6e88:	3010      	adds	r0, #16
    6e8a:	3408      	adds	r4, #8
    6e8c:	e010      	b.n	6eb0 <_realloc_r+0x1d4>
    6e8e:	68a0      	ldr	r0, [r4, #8]
    6e90:	6128      	str	r0, [r5, #16]
    6e92:	68e1      	ldr	r1, [r4, #12]
    6e94:	6169      	str	r1, [r5, #20]
    6e96:	2a24      	cmp	r2, #36	; 0x24
    6e98:	d003      	beq.n	6ea2 <_realloc_r+0x1c6>
    6e9a:	1c28      	adds	r0, r5, #0
    6e9c:	3018      	adds	r0, #24
    6e9e:	3410      	adds	r4, #16
    6ea0:	e006      	b.n	6eb0 <_realloc_r+0x1d4>
    6ea2:	6922      	ldr	r2, [r4, #16]
    6ea4:	1c28      	adds	r0, r5, #0
    6ea6:	61aa      	str	r2, [r5, #24]
    6ea8:	6966      	ldr	r6, [r4, #20]
    6eaa:	3020      	adds	r0, #32
    6eac:	61ee      	str	r6, [r5, #28]
    6eae:	3418      	adds	r4, #24
    6eb0:	6823      	ldr	r3, [r4, #0]
    6eb2:	6003      	str	r3, [r0, #0]
    6eb4:	6861      	ldr	r1, [r4, #4]
    6eb6:	6041      	str	r1, [r0, #4]
    6eb8:	e02d      	b.n	6f16 <_realloc_r+0x23a>
    6eba:	9802      	ldr	r0, [sp, #8]
    6ebc:	1e0f      	subs	r7, r1, #0
    6ebe:	4287      	cmp	r7, r0
    6ec0:	db30      	blt.n	6f24 <_realloc_r+0x248>
    6ec2:	68ea      	ldr	r2, [r5, #12]
    6ec4:	68ab      	ldr	r3, [r5, #8]
    6ec6:	1c28      	adds	r0, r5, #0
    6ec8:	60da      	str	r2, [r3, #12]
    6eca:	6093      	str	r3, [r2, #8]
    6ecc:	9a01      	ldr	r2, [sp, #4]
    6ece:	3008      	adds	r0, #8
    6ed0:	3a04      	subs	r2, #4
    6ed2:	2a24      	cmp	r2, #36	; 0x24
    6ed4:	d822      	bhi.n	6f1c <_realloc_r+0x240>
    6ed6:	2a13      	cmp	r2, #19
    6ed8:	d919      	bls.n	6f0e <_realloc_r+0x232>
    6eda:	6821      	ldr	r1, [r4, #0]
    6edc:	60a9      	str	r1, [r5, #8]
    6ede:	6866      	ldr	r6, [r4, #4]
    6ee0:	60ee      	str	r6, [r5, #12]
    6ee2:	2a1b      	cmp	r2, #27
    6ee4:	d802      	bhi.n	6eec <_realloc_r+0x210>
    6ee6:	3008      	adds	r0, #8
    6ee8:	3408      	adds	r4, #8
    6eea:	e010      	b.n	6f0e <_realloc_r+0x232>
    6eec:	68a0      	ldr	r0, [r4, #8]
    6eee:	6128      	str	r0, [r5, #16]
    6ef0:	68e3      	ldr	r3, [r4, #12]
    6ef2:	616b      	str	r3, [r5, #20]
    6ef4:	2a24      	cmp	r2, #36	; 0x24
    6ef6:	d003      	beq.n	6f00 <_realloc_r+0x224>
    6ef8:	1c28      	adds	r0, r5, #0
    6efa:	3018      	adds	r0, #24
    6efc:	3410      	adds	r4, #16
    6efe:	e006      	b.n	6f0e <_realloc_r+0x232>
    6f00:	6922      	ldr	r2, [r4, #16]
    6f02:	1c28      	adds	r0, r5, #0
    6f04:	61aa      	str	r2, [r5, #24]
    6f06:	6961      	ldr	r1, [r4, #20]
    6f08:	3020      	adds	r0, #32
    6f0a:	61e9      	str	r1, [r5, #28]
    6f0c:	3418      	adds	r4, #24
    6f0e:	6826      	ldr	r6, [r4, #0]
    6f10:	6006      	str	r6, [r0, #0]
    6f12:	6863      	ldr	r3, [r4, #4]
    6f14:	6043      	str	r3, [r0, #4]
    6f16:	68a4      	ldr	r4, [r4, #8]
    6f18:	6084      	str	r4, [r0, #8]
    6f1a:	e057      	b.n	6fcc <_realloc_r+0x2f0>
    6f1c:	1c21      	adds	r1, r4, #0
    6f1e:	f7ff fec4 	bl	6caa <memmove>
    6f22:	e053      	b.n	6fcc <_realloc_r+0x2f0>
    6f24:	1c31      	adds	r1, r6, #0
    6f26:	9803      	ldr	r0, [sp, #12]
    6f28:	f7fe fbd6 	bl	56d8 <_malloc_r>
    6f2c:	1e06      	subs	r6, r0, #0
    6f2e:	d047      	beq.n	6fc0 <_realloc_r+0x2e4>
    6f30:	1c27      	adds	r7, r4, #0
    6f32:	3f08      	subs	r7, #8
    6f34:	687b      	ldr	r3, [r7, #4]
    6f36:	1c05      	adds	r5, r0, #0
    6f38:	2101      	movs	r1, #1
    6f3a:	9804      	ldr	r0, [sp, #16]
    6f3c:	438b      	bics	r3, r1
    6f3e:	3d08      	subs	r5, #8
    6f40:	18c2      	adds	r2, r0, r3
    6f42:	4295      	cmp	r5, r2
    6f44:	d106      	bne.n	6f54 <_realloc_r+0x278>
    6f46:	686e      	ldr	r6, [r5, #4]
    6f48:	2403      	movs	r4, #3
    6f4a:	9d01      	ldr	r5, [sp, #4]
    6f4c:	43a6      	bics	r6, r4
    6f4e:	1977      	adds	r7, r6, r5
    6f50:	1c05      	adds	r5, r0, #0
    6f52:	e03b      	b.n	6fcc <_realloc_r+0x2f0>
    6f54:	9a01      	ldr	r2, [sp, #4]
    6f56:	3a04      	subs	r2, #4
    6f58:	2a24      	cmp	r2, #36	; 0x24
    6f5a:	d829      	bhi.n	6fb0 <_realloc_r+0x2d4>
    6f5c:	2a13      	cmp	r2, #19
    6f5e:	d91e      	bls.n	6f9e <_realloc_r+0x2c2>
    6f60:	6823      	ldr	r3, [r4, #0]
    6f62:	6033      	str	r3, [r6, #0]
    6f64:	6861      	ldr	r1, [r4, #4]
    6f66:	6071      	str	r1, [r6, #4]
    6f68:	2a1b      	cmp	r2, #27
    6f6a:	d804      	bhi.n	6f76 <_realloc_r+0x29a>
    6f6c:	1c35      	adds	r5, r6, #0
    6f6e:	1c27      	adds	r7, r4, #0
    6f70:	3508      	adds	r5, #8
    6f72:	3708      	adds	r7, #8
    6f74:	e015      	b.n	6fa2 <_realloc_r+0x2c6>
    6f76:	68a0      	ldr	r0, [r4, #8]
    6f78:	60b0      	str	r0, [r6, #8]
    6f7a:	68e5      	ldr	r5, [r4, #12]
    6f7c:	60f5      	str	r5, [r6, #12]
    6f7e:	2a24      	cmp	r2, #36	; 0x24
    6f80:	d004      	beq.n	6f8c <_realloc_r+0x2b0>
    6f82:	1c35      	adds	r5, r6, #0
    6f84:	1c27      	adds	r7, r4, #0
    6f86:	3510      	adds	r5, #16
    6f88:	3710      	adds	r7, #16
    6f8a:	e00a      	b.n	6fa2 <_realloc_r+0x2c6>
    6f8c:	6922      	ldr	r2, [r4, #16]
    6f8e:	1c35      	adds	r5, r6, #0
    6f90:	6132      	str	r2, [r6, #16]
    6f92:	6967      	ldr	r7, [r4, #20]
    6f94:	3518      	adds	r5, #24
    6f96:	6177      	str	r7, [r6, #20]
    6f98:	1c27      	adds	r7, r4, #0
    6f9a:	3718      	adds	r7, #24
    6f9c:	e001      	b.n	6fa2 <_realloc_r+0x2c6>
    6f9e:	1c35      	adds	r5, r6, #0
    6fa0:	1c27      	adds	r7, r4, #0
    6fa2:	683b      	ldr	r3, [r7, #0]
    6fa4:	602b      	str	r3, [r5, #0]
    6fa6:	6879      	ldr	r1, [r7, #4]
    6fa8:	6069      	str	r1, [r5, #4]
    6faa:	68b8      	ldr	r0, [r7, #8]
    6fac:	60a8      	str	r0, [r5, #8]
    6fae:	e003      	b.n	6fb8 <_realloc_r+0x2dc>
    6fb0:	1c30      	adds	r0, r6, #0
    6fb2:	1c21      	adds	r1, r4, #0
    6fb4:	f7ff fe79 	bl	6caa <memmove>
    6fb8:	9803      	ldr	r0, [sp, #12]
    6fba:	1c21      	adds	r1, r4, #0
    6fbc:	f7fe fa84 	bl	54c8 <_free_r>
    6fc0:	9803      	ldr	r0, [sp, #12]
    6fc2:	f7fe fd89 	bl	5ad8 <__malloc_unlock>
    6fc6:	e023      	b.n	7010 <_realloc_r+0x334>
    6fc8:	9f01      	ldr	r7, [sp, #4]
    6fca:	9d04      	ldr	r5, [sp, #16]
    6fcc:	9e02      	ldr	r6, [sp, #8]
    6fce:	2301      	movs	r3, #1
    6fd0:	1bba      	subs	r2, r7, r6
    6fd2:	6868      	ldr	r0, [r5, #4]
    6fd4:	2a0f      	cmp	r2, #15
    6fd6:	d90f      	bls.n	6ff8 <_realloc_r+0x31c>
    6fd8:	4018      	ands	r0, r3
    6fda:	1c1c      	adds	r4, r3, #0
    6fdc:	19a9      	adds	r1, r5, r6
    6fde:	4330      	orrs	r0, r6
    6fe0:	4314      	orrs	r4, r2
    6fe2:	6068      	str	r0, [r5, #4]
    6fe4:	188e      	adds	r6, r1, r2
    6fe6:	604c      	str	r4, [r1, #4]
    6fe8:	6872      	ldr	r2, [r6, #4]
    6fea:	3108      	adds	r1, #8
    6fec:	4313      	orrs	r3, r2
    6fee:	6073      	str	r3, [r6, #4]
    6ff0:	9803      	ldr	r0, [sp, #12]
    6ff2:	f7fe fa69 	bl	54c8 <_free_r>
    6ff6:	e006      	b.n	7006 <_realloc_r+0x32a>
    6ff8:	4018      	ands	r0, r3
    6ffa:	4338      	orrs	r0, r7
    6ffc:	6068      	str	r0, [r5, #4]
    6ffe:	19ef      	adds	r7, r5, r7
    7000:	6879      	ldr	r1, [r7, #4]
    7002:	430b      	orrs	r3, r1
    7004:	607b      	str	r3, [r7, #4]
    7006:	9803      	ldr	r0, [sp, #12]
    7008:	f7fe fd66 	bl	5ad8 <__malloc_unlock>
    700c:	1c2e      	adds	r6, r5, #0
    700e:	3608      	adds	r6, #8
    7010:	1c30      	adds	r0, r6, #0
    7012:	b007      	add	sp, #28
    7014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7016:	46c0      	nop			; (mov r8, r8)
    7018:	200004c4 	.word	0x200004c4

0000701c <__gnu_thumb1_case_uqi>:
    701c:	b402      	push	{r1}
    701e:	4671      	mov	r1, lr
    7020:	0849      	lsrs	r1, r1, #1
    7022:	0049      	lsls	r1, r1, #1
    7024:	5c09      	ldrb	r1, [r1, r0]
    7026:	0049      	lsls	r1, r1, #1
    7028:	448e      	add	lr, r1
    702a:	bc02      	pop	{r1}
    702c:	4770      	bx	lr
    702e:	46c0      	nop			; (mov r8, r8)

00007030 <__gnu_thumb1_case_uhi>:
    7030:	b403      	push	{r0, r1}
    7032:	4671      	mov	r1, lr
    7034:	0849      	lsrs	r1, r1, #1
    7036:	0040      	lsls	r0, r0, #1
    7038:	0049      	lsls	r1, r1, #1
    703a:	5a09      	ldrh	r1, [r1, r0]
    703c:	0049      	lsls	r1, r1, #1
    703e:	448e      	add	lr, r1
    7040:	bc03      	pop	{r0, r1}
    7042:	4770      	bx	lr

00007044 <__aeabi_idiv>:
    7044:	2900      	cmp	r1, #0
    7046:	d041      	beq.n	70cc <.divsi3_skip_div0_test+0x84>

00007048 <.divsi3_skip_div0_test>:
    7048:	b410      	push	{r4}
    704a:	1c04      	adds	r4, r0, #0
    704c:	404c      	eors	r4, r1
    704e:	46a4      	mov	ip, r4
    7050:	2301      	movs	r3, #1
    7052:	2200      	movs	r2, #0
    7054:	2900      	cmp	r1, #0
    7056:	d500      	bpl.n	705a <.divsi3_skip_div0_test+0x12>
    7058:	4249      	negs	r1, r1
    705a:	2800      	cmp	r0, #0
    705c:	d500      	bpl.n	7060 <.divsi3_skip_div0_test+0x18>
    705e:	4240      	negs	r0, r0
    7060:	4288      	cmp	r0, r1
    7062:	d32c      	bcc.n	70be <.divsi3_skip_div0_test+0x76>
    7064:	2401      	movs	r4, #1
    7066:	0724      	lsls	r4, r4, #28
    7068:	42a1      	cmp	r1, r4
    706a:	d204      	bcs.n	7076 <.divsi3_skip_div0_test+0x2e>
    706c:	4281      	cmp	r1, r0
    706e:	d202      	bcs.n	7076 <.divsi3_skip_div0_test+0x2e>
    7070:	0109      	lsls	r1, r1, #4
    7072:	011b      	lsls	r3, r3, #4
    7074:	e7f8      	b.n	7068 <.divsi3_skip_div0_test+0x20>
    7076:	00e4      	lsls	r4, r4, #3
    7078:	42a1      	cmp	r1, r4
    707a:	d204      	bcs.n	7086 <.divsi3_skip_div0_test+0x3e>
    707c:	4281      	cmp	r1, r0
    707e:	d202      	bcs.n	7086 <.divsi3_skip_div0_test+0x3e>
    7080:	0049      	lsls	r1, r1, #1
    7082:	005b      	lsls	r3, r3, #1
    7084:	e7f8      	b.n	7078 <.divsi3_skip_div0_test+0x30>
    7086:	4288      	cmp	r0, r1
    7088:	d301      	bcc.n	708e <.divsi3_skip_div0_test+0x46>
    708a:	1a40      	subs	r0, r0, r1
    708c:	431a      	orrs	r2, r3
    708e:	084c      	lsrs	r4, r1, #1
    7090:	42a0      	cmp	r0, r4
    7092:	d302      	bcc.n	709a <.divsi3_skip_div0_test+0x52>
    7094:	1b00      	subs	r0, r0, r4
    7096:	085c      	lsrs	r4, r3, #1
    7098:	4322      	orrs	r2, r4
    709a:	088c      	lsrs	r4, r1, #2
    709c:	42a0      	cmp	r0, r4
    709e:	d302      	bcc.n	70a6 <.divsi3_skip_div0_test+0x5e>
    70a0:	1b00      	subs	r0, r0, r4
    70a2:	089c      	lsrs	r4, r3, #2
    70a4:	4322      	orrs	r2, r4
    70a6:	08cc      	lsrs	r4, r1, #3
    70a8:	42a0      	cmp	r0, r4
    70aa:	d302      	bcc.n	70b2 <.divsi3_skip_div0_test+0x6a>
    70ac:	1b00      	subs	r0, r0, r4
    70ae:	08dc      	lsrs	r4, r3, #3
    70b0:	4322      	orrs	r2, r4
    70b2:	2800      	cmp	r0, #0
    70b4:	d003      	beq.n	70be <.divsi3_skip_div0_test+0x76>
    70b6:	091b      	lsrs	r3, r3, #4
    70b8:	d001      	beq.n	70be <.divsi3_skip_div0_test+0x76>
    70ba:	0909      	lsrs	r1, r1, #4
    70bc:	e7e3      	b.n	7086 <.divsi3_skip_div0_test+0x3e>
    70be:	1c10      	adds	r0, r2, #0
    70c0:	4664      	mov	r4, ip
    70c2:	2c00      	cmp	r4, #0
    70c4:	d500      	bpl.n	70c8 <.divsi3_skip_div0_test+0x80>
    70c6:	4240      	negs	r0, r0
    70c8:	bc10      	pop	{r4}
    70ca:	4770      	bx	lr
    70cc:	2800      	cmp	r0, #0
    70ce:	d006      	beq.n	70de <.divsi3_skip_div0_test+0x96>
    70d0:	db03      	blt.n	70da <.divsi3_skip_div0_test+0x92>
    70d2:	2000      	movs	r0, #0
    70d4:	43c0      	mvns	r0, r0
    70d6:	0840      	lsrs	r0, r0, #1
    70d8:	e001      	b.n	70de <.divsi3_skip_div0_test+0x96>
    70da:	2080      	movs	r0, #128	; 0x80
    70dc:	0600      	lsls	r0, r0, #24
    70de:	b407      	push	{r0, r1, r2}
    70e0:	4802      	ldr	r0, [pc, #8]	; (70ec <.divsi3_skip_div0_test+0xa4>)
    70e2:	a102      	add	r1, pc, #8	; (adr r1, 70ec <.divsi3_skip_div0_test+0xa4>)
    70e4:	1840      	adds	r0, r0, r1
    70e6:	9002      	str	r0, [sp, #8]
    70e8:	bd03      	pop	{r0, r1, pc}
    70ea:	46c0      	nop			; (mov r8, r8)
    70ec:	ffffbcc5 	.word	0xffffbcc5

000070f0 <__aeabi_idivmod>:
    70f0:	2900      	cmp	r1, #0
    70f2:	d0eb      	beq.n	70cc <.divsi3_skip_div0_test+0x84>
    70f4:	b503      	push	{r0, r1, lr}
    70f6:	f7ff ffa7 	bl	7048 <.divsi3_skip_div0_test>
    70fa:	bc0e      	pop	{r1, r2, r3}
    70fc:	4342      	muls	r2, r0
    70fe:	1a89      	subs	r1, r1, r2
    7100:	4718      	bx	r3
    7102:	46c0      	nop			; (mov r8, r8)

00007104 <__aeabi_cdrcmple>:
    7104:	4684      	mov	ip, r0
    7106:	1c10      	adds	r0, r2, #0
    7108:	4662      	mov	r2, ip
    710a:	468c      	mov	ip, r1
    710c:	1c19      	adds	r1, r3, #0
    710e:	4663      	mov	r3, ip
    7110:	e000      	b.n	7114 <__aeabi_cdcmpeq>
    7112:	46c0      	nop			; (mov r8, r8)

00007114 <__aeabi_cdcmpeq>:
    7114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7116:	f000 ff71 	bl	7ffc <__ledf2>
    711a:	2800      	cmp	r0, #0
    711c:	d401      	bmi.n	7122 <__aeabi_cdcmpeq+0xe>
    711e:	2100      	movs	r1, #0
    7120:	42c8      	cmn	r0, r1
    7122:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007124 <__aeabi_dcmpeq>:
    7124:	b510      	push	{r4, lr}
    7126:	f000 feb7 	bl	7e98 <__eqdf2>
    712a:	4240      	negs	r0, r0
    712c:	3001      	adds	r0, #1
    712e:	bd10      	pop	{r4, pc}

00007130 <__aeabi_dcmplt>:
    7130:	b510      	push	{r4, lr}
    7132:	f000 ff63 	bl	7ffc <__ledf2>
    7136:	2800      	cmp	r0, #0
    7138:	db01      	blt.n	713e <__aeabi_dcmplt+0xe>
    713a:	2000      	movs	r0, #0
    713c:	bd10      	pop	{r4, pc}
    713e:	2001      	movs	r0, #1
    7140:	bd10      	pop	{r4, pc}
    7142:	46c0      	nop			; (mov r8, r8)

00007144 <__aeabi_dcmple>:
    7144:	b510      	push	{r4, lr}
    7146:	f000 ff59 	bl	7ffc <__ledf2>
    714a:	2800      	cmp	r0, #0
    714c:	dd01      	ble.n	7152 <__aeabi_dcmple+0xe>
    714e:	2000      	movs	r0, #0
    7150:	bd10      	pop	{r4, pc}
    7152:	2001      	movs	r0, #1
    7154:	bd10      	pop	{r4, pc}
    7156:	46c0      	nop			; (mov r8, r8)

00007158 <__aeabi_dcmpgt>:
    7158:	b510      	push	{r4, lr}
    715a:	f000 fedb 	bl	7f14 <__gedf2>
    715e:	2800      	cmp	r0, #0
    7160:	dc01      	bgt.n	7166 <__aeabi_dcmpgt+0xe>
    7162:	2000      	movs	r0, #0
    7164:	bd10      	pop	{r4, pc}
    7166:	2001      	movs	r0, #1
    7168:	bd10      	pop	{r4, pc}
    716a:	46c0      	nop			; (mov r8, r8)

0000716c <__aeabi_dcmpge>:
    716c:	b510      	push	{r4, lr}
    716e:	f000 fed1 	bl	7f14 <__gedf2>
    7172:	2800      	cmp	r0, #0
    7174:	da01      	bge.n	717a <__aeabi_dcmpge+0xe>
    7176:	2000      	movs	r0, #0
    7178:	bd10      	pop	{r4, pc}
    717a:	2001      	movs	r0, #1
    717c:	bd10      	pop	{r4, pc}
    717e:	46c0      	nop			; (mov r8, r8)

00007180 <__aeabi_dadd>:
    7180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7182:	465f      	mov	r7, fp
    7184:	4656      	mov	r6, sl
    7186:	464d      	mov	r5, r9
    7188:	4644      	mov	r4, r8
    718a:	b4f0      	push	{r4, r5, r6, r7}
    718c:	030c      	lsls	r4, r1, #12
    718e:	0f46      	lsrs	r6, r0, #29
    7190:	0a64      	lsrs	r4, r4, #9
    7192:	4334      	orrs	r4, r6
    7194:	46a3      	mov	fp, r4
    7196:	005e      	lsls	r6, r3, #1
    7198:	031c      	lsls	r4, r3, #12
    719a:	0fdb      	lsrs	r3, r3, #31
    719c:	469c      	mov	ip, r3
    719e:	0a63      	lsrs	r3, r4, #9
    71a0:	4698      	mov	r8, r3
    71a2:	004d      	lsls	r5, r1, #1
    71a4:	0f53      	lsrs	r3, r2, #29
    71a6:	4644      	mov	r4, r8
    71a8:	431c      	orrs	r4, r3
    71aa:	0d6d      	lsrs	r5, r5, #21
    71ac:	0fc9      	lsrs	r1, r1, #31
    71ae:	0d76      	lsrs	r6, r6, #21
    71b0:	00d2      	lsls	r2, r2, #3
    71b2:	1c0f      	adds	r7, r1, #0
    71b4:	00c0      	lsls	r0, r0, #3
    71b6:	46a1      	mov	r9, r4
    71b8:	4692      	mov	sl, r2
    71ba:	1bab      	subs	r3, r5, r6
    71bc:	4561      	cmp	r1, ip
    71be:	d100      	bne.n	71c2 <__aeabi_dadd+0x42>
    71c0:	e0a4      	b.n	730c <__aeabi_dadd+0x18c>
    71c2:	2b00      	cmp	r3, #0
    71c4:	dc00      	bgt.n	71c8 <__aeabi_dadd+0x48>
    71c6:	e0f5      	b.n	73b4 <__aeabi_dadd+0x234>
    71c8:	2e00      	cmp	r6, #0
    71ca:	d10c      	bne.n	71e6 <__aeabi_dadd+0x66>
    71cc:	1c26      	adds	r6, r4, #0
    71ce:	4316      	orrs	r6, r2
    71d0:	d100      	bne.n	71d4 <__aeabi_dadd+0x54>
    71d2:	e0c2      	b.n	735a <__aeabi_dadd+0x1da>
    71d4:	3b01      	subs	r3, #1
    71d6:	2b00      	cmp	r3, #0
    71d8:	d000      	beq.n	71dc <__aeabi_dadd+0x5c>
    71da:	e146      	b.n	746a <__aeabi_dadd+0x2ea>
    71dc:	465c      	mov	r4, fp
    71de:	464b      	mov	r3, r9
    71e0:	1a82      	subs	r2, r0, r2
    71e2:	1ae7      	subs	r7, r4, r3
    71e4:	e021      	b.n	722a <__aeabi_dadd+0xaa>
    71e6:	4ed2      	ldr	r6, [pc, #840]	; (7530 <__aeabi_dadd+0x3b0>)
    71e8:	42b5      	cmp	r5, r6
    71ea:	d100      	bne.n	71ee <__aeabi_dadd+0x6e>
    71ec:	e0cd      	b.n	738a <__aeabi_dadd+0x20a>
    71ee:	2480      	movs	r4, #128	; 0x80
    71f0:	464a      	mov	r2, r9
    71f2:	0427      	lsls	r7, r4, #16
    71f4:	433a      	orrs	r2, r7
    71f6:	4691      	mov	r9, r2
    71f8:	2b38      	cmp	r3, #56	; 0x38
    71fa:	dd00      	ble.n	71fe <__aeabi_dadd+0x7e>
    71fc:	e10f      	b.n	741e <__aeabi_dadd+0x29e>
    71fe:	2b1f      	cmp	r3, #31
    7200:	dd00      	ble.n	7204 <__aeabi_dadd+0x84>
    7202:	e150      	b.n	74a6 <__aeabi_dadd+0x326>
    7204:	2620      	movs	r6, #32
    7206:	1af6      	subs	r6, r6, r3
    7208:	464c      	mov	r4, r9
    720a:	4652      	mov	r2, sl
    720c:	4657      	mov	r7, sl
    720e:	40b4      	lsls	r4, r6
    7210:	40b7      	lsls	r7, r6
    7212:	40da      	lsrs	r2, r3
    7214:	4322      	orrs	r2, r4
    7216:	1c3e      	adds	r6, r7, #0
    7218:	464c      	mov	r4, r9
    721a:	1e77      	subs	r7, r6, #1
    721c:	41be      	sbcs	r6, r7
    721e:	40dc      	lsrs	r4, r3
    7220:	4332      	orrs	r2, r6
    7222:	1c26      	adds	r6, r4, #0
    7224:	465b      	mov	r3, fp
    7226:	1a82      	subs	r2, r0, r2
    7228:	1b9f      	subs	r7, r3, r6
    722a:	4290      	cmp	r0, r2
    722c:	4180      	sbcs	r0, r0
    722e:	4246      	negs	r6, r0
    7230:	1bbb      	subs	r3, r7, r6
    7232:	1c14      	adds	r4, r2, #0
    7234:	1c2e      	adds	r6, r5, #0
    7236:	1c0f      	adds	r7, r1, #0
    7238:	0218      	lsls	r0, r3, #8
    723a:	d400      	bmi.n	723e <__aeabi_dadd+0xbe>
    723c:	e0ae      	b.n	739c <__aeabi_dadd+0x21c>
    723e:	025d      	lsls	r5, r3, #9
    7240:	0a69      	lsrs	r1, r5, #9
    7242:	4688      	mov	r8, r1
    7244:	4642      	mov	r2, r8
    7246:	2a00      	cmp	r2, #0
    7248:	d100      	bne.n	724c <__aeabi_dadd+0xcc>
    724a:	e0d9      	b.n	7400 <__aeabi_dadd+0x280>
    724c:	4640      	mov	r0, r8
    724e:	f7fc f9db 	bl	3608 <__clzsi2>
    7252:	1c05      	adds	r5, r0, #0
    7254:	3d08      	subs	r5, #8
    7256:	2d1f      	cmp	r5, #31
    7258:	dd00      	ble.n	725c <__aeabi_dadd+0xdc>
    725a:	e0da      	b.n	7412 <__aeabi_dadd+0x292>
    725c:	2228      	movs	r2, #40	; 0x28
    725e:	1a13      	subs	r3, r2, r0
    7260:	1c20      	adds	r0, r4, #0
    7262:	4641      	mov	r1, r8
    7264:	40d8      	lsrs	r0, r3
    7266:	40a9      	lsls	r1, r5
    7268:	1c03      	adds	r3, r0, #0
    726a:	430b      	orrs	r3, r1
    726c:	40ac      	lsls	r4, r5
    726e:	42ae      	cmp	r6, r5
    7270:	dd00      	ble.n	7274 <__aeabi_dadd+0xf4>
    7272:	e090      	b.n	7396 <__aeabi_dadd+0x216>
    7274:	1bae      	subs	r6, r5, r6
    7276:	1c71      	adds	r1, r6, #1
    7278:	291f      	cmp	r1, #31
    727a:	dd00      	ble.n	727e <__aeabi_dadd+0xfe>
    727c:	e100      	b.n	7480 <__aeabi_dadd+0x300>
    727e:	201f      	movs	r0, #31
    7280:	1b85      	subs	r5, r0, r6
    7282:	1c1a      	adds	r2, r3, #0
    7284:	1c20      	adds	r0, r4, #0
    7286:	40aa      	lsls	r2, r5
    7288:	40c8      	lsrs	r0, r1
    728a:	40ac      	lsls	r4, r5
    728c:	4310      	orrs	r0, r2
    728e:	1e66      	subs	r6, r4, #1
    7290:	41b4      	sbcs	r4, r6
    7292:	4304      	orrs	r4, r0
    7294:	40cb      	lsrs	r3, r1
    7296:	2201      	movs	r2, #1
    7298:	2600      	movs	r6, #0
    729a:	200f      	movs	r0, #15
    729c:	4020      	ands	r0, r4
    729e:	2804      	cmp	r0, #4
    72a0:	d064      	beq.n	736c <__aeabi_dadd+0x1ec>
    72a2:	1d20      	adds	r0, r4, #4
    72a4:	42a0      	cmp	r0, r4
    72a6:	41a4      	sbcs	r4, r4
    72a8:	4265      	negs	r5, r4
    72aa:	2180      	movs	r1, #128	; 0x80
    72ac:	195b      	adds	r3, r3, r5
    72ae:	2401      	movs	r4, #1
    72b0:	040d      	lsls	r5, r1, #16
    72b2:	401d      	ands	r5, r3
    72b4:	4027      	ands	r7, r4
    72b6:	2d00      	cmp	r5, #0
    72b8:	d007      	beq.n	72ca <__aeabi_dadd+0x14a>
    72ba:	4e9d      	ldr	r6, [pc, #628]	; (7530 <__aeabi_dadd+0x3b0>)
    72bc:	42b2      	cmp	r2, r6
    72be:	d100      	bne.n	72c2 <__aeabi_dadd+0x142>
    72c0:	e09a      	b.n	73f8 <__aeabi_dadd+0x278>
    72c2:	499c      	ldr	r1, [pc, #624]	; (7534 <__aeabi_dadd+0x3b4>)
    72c4:	1c16      	adds	r6, r2, #0
    72c6:	400b      	ands	r3, r1
    72c8:	3201      	adds	r2, #1
    72ca:	075c      	lsls	r4, r3, #29
    72cc:	08c0      	lsrs	r0, r0, #3
    72ce:	0552      	lsls	r2, r2, #21
    72d0:	4304      	orrs	r4, r0
    72d2:	08db      	lsrs	r3, r3, #3
    72d4:	0d55      	lsrs	r5, r2, #21
    72d6:	2d01      	cmp	r5, #1
    72d8:	dd62      	ble.n	73a0 <__aeabi_dadd+0x220>
    72da:	031b      	lsls	r3, r3, #12
    72dc:	0576      	lsls	r6, r6, #21
    72de:	0b1b      	lsrs	r3, r3, #12
    72e0:	0d76      	lsrs	r6, r6, #21
    72e2:	2000      	movs	r0, #0
    72e4:	2100      	movs	r1, #0
    72e6:	0d09      	lsrs	r1, r1, #20
    72e8:	1c20      	adds	r0, r4, #0
    72ea:	050a      	lsls	r2, r1, #20
    72ec:	4c92      	ldr	r4, [pc, #584]	; (7538 <__aeabi_dadd+0x3b8>)
    72ee:	4313      	orrs	r3, r2
    72f0:	0576      	lsls	r6, r6, #21
    72f2:	0875      	lsrs	r5, r6, #1
    72f4:	401c      	ands	r4, r3
    72f6:	432c      	orrs	r4, r5
    72f8:	0063      	lsls	r3, r4, #1
    72fa:	07ff      	lsls	r7, r7, #31
    72fc:	0859      	lsrs	r1, r3, #1
    72fe:	4339      	orrs	r1, r7
    7300:	bc3c      	pop	{r2, r3, r4, r5}
    7302:	4690      	mov	r8, r2
    7304:	4699      	mov	r9, r3
    7306:	46a2      	mov	sl, r4
    7308:	46ab      	mov	fp, r5
    730a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    730c:	2b00      	cmp	r3, #0
    730e:	dc00      	bgt.n	7312 <__aeabi_dadd+0x192>
    7310:	e091      	b.n	7436 <__aeabi_dadd+0x2b6>
    7312:	2e00      	cmp	r6, #0
    7314:	d031      	beq.n	737a <__aeabi_dadd+0x1fa>
    7316:	4e86      	ldr	r6, [pc, #536]	; (7530 <__aeabi_dadd+0x3b0>)
    7318:	42b5      	cmp	r5, r6
    731a:	d100      	bne.n	731e <__aeabi_dadd+0x19e>
    731c:	e0a9      	b.n	7472 <__aeabi_dadd+0x2f2>
    731e:	2480      	movs	r4, #128	; 0x80
    7320:	464e      	mov	r6, r9
    7322:	0422      	lsls	r2, r4, #16
    7324:	4316      	orrs	r6, r2
    7326:	46b1      	mov	r9, r6
    7328:	2b38      	cmp	r3, #56	; 0x38
    732a:	dd00      	ble.n	732e <__aeabi_dadd+0x1ae>
    732c:	e118      	b.n	7560 <__aeabi_dadd+0x3e0>
    732e:	2b1f      	cmp	r3, #31
    7330:	dd00      	ble.n	7334 <__aeabi_dadd+0x1b4>
    7332:	e173      	b.n	761c <__aeabi_dadd+0x49c>
    7334:	2620      	movs	r6, #32
    7336:	1af6      	subs	r6, r6, r3
    7338:	464a      	mov	r2, r9
    733a:	40b2      	lsls	r2, r6
    733c:	4690      	mov	r8, r2
    733e:	4652      	mov	r2, sl
    7340:	4644      	mov	r4, r8
    7342:	40da      	lsrs	r2, r3
    7344:	4322      	orrs	r2, r4
    7346:	4654      	mov	r4, sl
    7348:	40b4      	lsls	r4, r6
    734a:	1c26      	adds	r6, r4, #0
    734c:	1e74      	subs	r4, r6, #1
    734e:	41a6      	sbcs	r6, r4
    7350:	464c      	mov	r4, r9
    7352:	4332      	orrs	r2, r6
    7354:	40dc      	lsrs	r4, r3
    7356:	1812      	adds	r2, r2, r0
    7358:	e0f6      	b.n	7548 <__aeabi_dadd+0x3c8>
    735a:	1c04      	adds	r4, r0, #0
    735c:	200f      	movs	r0, #15
    735e:	1c6a      	adds	r2, r5, #1
    7360:	465b      	mov	r3, fp
    7362:	1c2e      	adds	r6, r5, #0
    7364:	1c0f      	adds	r7, r1, #0
    7366:	4020      	ands	r0, r4
    7368:	2804      	cmp	r0, #4
    736a:	d19a      	bne.n	72a2 <__aeabi_dadd+0x122>
    736c:	2580      	movs	r5, #128	; 0x80
    736e:	042d      	lsls	r5, r5, #16
    7370:	2101      	movs	r1, #1
    7372:	401d      	ands	r5, r3
    7374:	400f      	ands	r7, r1
    7376:	1c20      	adds	r0, r4, #0
    7378:	e79d      	b.n	72b6 <__aeabi_dadd+0x136>
    737a:	4314      	orrs	r4, r2
    737c:	d000      	beq.n	7380 <__aeabi_dadd+0x200>
    737e:	e0dd      	b.n	753c <__aeabi_dadd+0x3bc>
    7380:	1c6a      	adds	r2, r5, #1
    7382:	465b      	mov	r3, fp
    7384:	1c04      	adds	r4, r0, #0
    7386:	1c2e      	adds	r6, r5, #0
    7388:	e787      	b.n	729a <__aeabi_dadd+0x11a>
    738a:	2180      	movs	r1, #128	; 0x80
    738c:	465b      	mov	r3, fp
    738e:	1c04      	adds	r4, r0, #0
    7390:	010a      	lsls	r2, r1, #4
    7392:	1c2e      	adds	r6, r5, #0
    7394:	e781      	b.n	729a <__aeabi_dadd+0x11a>
    7396:	1b76      	subs	r6, r6, r5
    7398:	4d66      	ldr	r5, [pc, #408]	; (7534 <__aeabi_dadd+0x3b4>)
    739a:	402b      	ands	r3, r5
    739c:	1c72      	adds	r2, r6, #1
    739e:	e77c      	b.n	729a <__aeabi_dadd+0x11a>
    73a0:	1c21      	adds	r1, r4, #0
    73a2:	4319      	orrs	r1, r3
    73a4:	d100      	bne.n	73a8 <__aeabi_dadd+0x228>
    73a6:	e267      	b.n	7878 <__aeabi_dadd+0x6f8>
    73a8:	2e00      	cmp	r6, #0
    73aa:	d041      	beq.n	7430 <__aeabi_dadd+0x2b0>
    73ac:	2080      	movs	r0, #128	; 0x80
    73ae:	0302      	lsls	r2, r0, #12
    73b0:	4313      	orrs	r3, r2
    73b2:	e792      	b.n	72da <__aeabi_dadd+0x15a>
    73b4:	2b00      	cmp	r3, #0
    73b6:	d000      	beq.n	73ba <__aeabi_dadd+0x23a>
    73b8:	e088      	b.n	74cc <__aeabi_dadd+0x34c>
    73ba:	1c69      	adds	r1, r5, #1
    73bc:	054e      	lsls	r6, r1, #21
    73be:	0d74      	lsrs	r4, r6, #21
    73c0:	2c01      	cmp	r4, #1
    73c2:	dc00      	bgt.n	73c6 <__aeabi_dadd+0x246>
    73c4:	e11a      	b.n	75fc <__aeabi_dadd+0x47c>
    73c6:	465b      	mov	r3, fp
    73c8:	1c16      	adds	r6, r2, #0
    73ca:	464c      	mov	r4, r9
    73cc:	1a82      	subs	r2, r0, r2
    73ce:	1b19      	subs	r1, r3, r4
    73d0:	4290      	cmp	r0, r2
    73d2:	419b      	sbcs	r3, r3
    73d4:	425b      	negs	r3, r3
    73d6:	1ac9      	subs	r1, r1, r3
    73d8:	4688      	mov	r8, r1
    73da:	020b      	lsls	r3, r1, #8
    73dc:	d400      	bmi.n	73e0 <__aeabi_dadd+0x260>
    73de:	e09e      	b.n	751e <__aeabi_dadd+0x39e>
    73e0:	1a37      	subs	r7, r6, r0
    73e2:	45ba      	cmp	sl, r7
    73e4:	4192      	sbcs	r2, r2
    73e6:	465e      	mov	r6, fp
    73e8:	1ba4      	subs	r4, r4, r6
    73ea:	4253      	negs	r3, r2
    73ec:	1ae1      	subs	r1, r4, r3
    73ee:	4688      	mov	r8, r1
    73f0:	1c3c      	adds	r4, r7, #0
    73f2:	1c2e      	adds	r6, r5, #0
    73f4:	4667      	mov	r7, ip
    73f6:	e725      	b.n	7244 <__aeabi_dadd+0xc4>
    73f8:	1c16      	adds	r6, r2, #0
    73fa:	2300      	movs	r3, #0
    73fc:	2400      	movs	r4, #0
    73fe:	e770      	b.n	72e2 <__aeabi_dadd+0x162>
    7400:	1c20      	adds	r0, r4, #0
    7402:	f7fc f901 	bl	3608 <__clzsi2>
    7406:	3020      	adds	r0, #32
    7408:	1c05      	adds	r5, r0, #0
    740a:	3d08      	subs	r5, #8
    740c:	2d1f      	cmp	r5, #31
    740e:	dc00      	bgt.n	7412 <__aeabi_dadd+0x292>
    7410:	e724      	b.n	725c <__aeabi_dadd+0xdc>
    7412:	1c03      	adds	r3, r0, #0
    7414:	3b28      	subs	r3, #40	; 0x28
    7416:	409c      	lsls	r4, r3
    7418:	1c23      	adds	r3, r4, #0
    741a:	2400      	movs	r4, #0
    741c:	e727      	b.n	726e <__aeabi_dadd+0xee>
    741e:	464a      	mov	r2, r9
    7420:	4653      	mov	r3, sl
    7422:	431a      	orrs	r2, r3
    7424:	2600      	movs	r6, #0
    7426:	2a00      	cmp	r2, #0
    7428:	d100      	bne.n	742c <__aeabi_dadd+0x2ac>
    742a:	e6fb      	b.n	7224 <__aeabi_dadd+0xa4>
    742c:	2201      	movs	r2, #1
    742e:	e6f9      	b.n	7224 <__aeabi_dadd+0xa4>
    7430:	031d      	lsls	r5, r3, #12
    7432:	0b2b      	lsrs	r3, r5, #12
    7434:	e755      	b.n	72e2 <__aeabi_dadd+0x162>
    7436:	2b00      	cmp	r3, #0
    7438:	d000      	beq.n	743c <__aeabi_dadd+0x2bc>
    743a:	e104      	b.n	7646 <__aeabi_dadd+0x4c6>
    743c:	1c6e      	adds	r6, r5, #1
    743e:	0574      	lsls	r4, r6, #21
    7440:	0d63      	lsrs	r3, r4, #21
    7442:	2b01      	cmp	r3, #1
    7444:	dc00      	bgt.n	7448 <__aeabi_dadd+0x2c8>
    7446:	e0aa      	b.n	759e <__aeabi_dadd+0x41e>
    7448:	4939      	ldr	r1, [pc, #228]	; (7530 <__aeabi_dadd+0x3b0>)
    744a:	428e      	cmp	r6, r1
    744c:	d100      	bne.n	7450 <__aeabi_dadd+0x2d0>
    744e:	e130      	b.n	76b2 <__aeabi_dadd+0x532>
    7450:	1811      	adds	r1, r2, r0
    7452:	4281      	cmp	r1, r0
    7454:	4180      	sbcs	r0, r0
    7456:	464b      	mov	r3, r9
    7458:	4242      	negs	r2, r0
    745a:	445b      	add	r3, fp
    745c:	189b      	adds	r3, r3, r2
    745e:	07dc      	lsls	r4, r3, #31
    7460:	0849      	lsrs	r1, r1, #1
    7462:	430c      	orrs	r4, r1
    7464:	085b      	lsrs	r3, r3, #1
    7466:	1caa      	adds	r2, r5, #2
    7468:	e717      	b.n	729a <__aeabi_dadd+0x11a>
    746a:	4f31      	ldr	r7, [pc, #196]	; (7530 <__aeabi_dadd+0x3b0>)
    746c:	42bd      	cmp	r5, r7
    746e:	d000      	beq.n	7472 <__aeabi_dadd+0x2f2>
    7470:	e6c2      	b.n	71f8 <__aeabi_dadd+0x78>
    7472:	1c04      	adds	r4, r0, #0
    7474:	2080      	movs	r0, #128	; 0x80
    7476:	465b      	mov	r3, fp
    7478:	1c0f      	adds	r7, r1, #0
    747a:	0102      	lsls	r2, r0, #4
    747c:	1c2e      	adds	r6, r5, #0
    747e:	e70c      	b.n	729a <__aeabi_dadd+0x11a>
    7480:	1c30      	adds	r0, r6, #0
    7482:	381f      	subs	r0, #31
    7484:	1c1a      	adds	r2, r3, #0
    7486:	40c2      	lsrs	r2, r0
    7488:	1c15      	adds	r5, r2, #0
    748a:	2920      	cmp	r1, #32
    748c:	d100      	bne.n	7490 <__aeabi_dadd+0x310>
    748e:	e082      	b.n	7596 <__aeabi_dadd+0x416>
    7490:	213f      	movs	r1, #63	; 0x3f
    7492:	1b8e      	subs	r6, r1, r6
    7494:	40b3      	lsls	r3, r6
    7496:	431c      	orrs	r4, r3
    7498:	1e63      	subs	r3, r4, #1
    749a:	419c      	sbcs	r4, r3
    749c:	432c      	orrs	r4, r5
    749e:	2201      	movs	r2, #1
    74a0:	2300      	movs	r3, #0
    74a2:	2600      	movs	r6, #0
    74a4:	e6f9      	b.n	729a <__aeabi_dadd+0x11a>
    74a6:	1c1c      	adds	r4, r3, #0
    74a8:	3c20      	subs	r4, #32
    74aa:	464f      	mov	r7, r9
    74ac:	40e7      	lsrs	r7, r4
    74ae:	1c3e      	adds	r6, r7, #0
    74b0:	2b20      	cmp	r3, #32
    74b2:	d072      	beq.n	759a <__aeabi_dadd+0x41a>
    74b4:	2240      	movs	r2, #64	; 0x40
    74b6:	1ad4      	subs	r4, r2, r3
    74b8:	464b      	mov	r3, r9
    74ba:	40a3      	lsls	r3, r4
    74bc:	1c1a      	adds	r2, r3, #0
    74be:	4657      	mov	r7, sl
    74c0:	433a      	orrs	r2, r7
    74c2:	1e53      	subs	r3, r2, #1
    74c4:	419a      	sbcs	r2, r3
    74c6:	4332      	orrs	r2, r6
    74c8:	2600      	movs	r6, #0
    74ca:	e6ab      	b.n	7224 <__aeabi_dadd+0xa4>
    74cc:	425f      	negs	r7, r3
    74ce:	2d00      	cmp	r5, #0
    74d0:	d050      	beq.n	7574 <__aeabi_dadd+0x3f4>
    74d2:	4d17      	ldr	r5, [pc, #92]	; (7530 <__aeabi_dadd+0x3b0>)
    74d4:	42ae      	cmp	r6, r5
    74d6:	d100      	bne.n	74da <__aeabi_dadd+0x35a>
    74d8:	e155      	b.n	7786 <__aeabi_dadd+0x606>
    74da:	2480      	movs	r4, #128	; 0x80
    74dc:	465a      	mov	r2, fp
    74de:	0421      	lsls	r1, r4, #16
    74e0:	430a      	orrs	r2, r1
    74e2:	4693      	mov	fp, r2
    74e4:	2f38      	cmp	r7, #56	; 0x38
    74e6:	dd00      	ble.n	74ea <__aeabi_dadd+0x36a>
    74e8:	e0da      	b.n	76a0 <__aeabi_dadd+0x520>
    74ea:	2f1f      	cmp	r7, #31
    74ec:	dd00      	ble.n	74f0 <__aeabi_dadd+0x370>
    74ee:	e178      	b.n	77e2 <__aeabi_dadd+0x662>
    74f0:	2120      	movs	r1, #32
    74f2:	1bcc      	subs	r4, r1, r7
    74f4:	1c05      	adds	r5, r0, #0
    74f6:	465a      	mov	r2, fp
    74f8:	40a2      	lsls	r2, r4
    74fa:	40fd      	lsrs	r5, r7
    74fc:	40a0      	lsls	r0, r4
    74fe:	4315      	orrs	r5, r2
    7500:	465b      	mov	r3, fp
    7502:	1e42      	subs	r2, r0, #1
    7504:	4190      	sbcs	r0, r2
    7506:	4328      	orrs	r0, r5
    7508:	40fb      	lsrs	r3, r7
    750a:	4657      	mov	r7, sl
    750c:	1a3c      	subs	r4, r7, r0
    750e:	45a2      	cmp	sl, r4
    7510:	4192      	sbcs	r2, r2
    7512:	4648      	mov	r0, r9
    7514:	1ac1      	subs	r1, r0, r3
    7516:	4255      	negs	r5, r2
    7518:	1b4b      	subs	r3, r1, r5
    751a:	4667      	mov	r7, ip
    751c:	e68c      	b.n	7238 <__aeabi_dadd+0xb8>
    751e:	1c08      	adds	r0, r1, #0
    7520:	4310      	orrs	r0, r2
    7522:	d130      	bne.n	7586 <__aeabi_dadd+0x406>
    7524:	2700      	movs	r7, #0
    7526:	2201      	movs	r2, #1
    7528:	2300      	movs	r3, #0
    752a:	2004      	movs	r0, #4
    752c:	2600      	movs	r6, #0
    752e:	e6cc      	b.n	72ca <__aeabi_dadd+0x14a>
    7530:	000007ff 	.word	0x000007ff
    7534:	ff7fffff 	.word	0xff7fffff
    7538:	800fffff 	.word	0x800fffff
    753c:	3b01      	subs	r3, #1
    753e:	2b00      	cmp	r3, #0
    7540:	d124      	bne.n	758c <__aeabi_dadd+0x40c>
    7542:	4653      	mov	r3, sl
    7544:	181a      	adds	r2, r3, r0
    7546:	464c      	mov	r4, r9
    7548:	4282      	cmp	r2, r0
    754a:	4180      	sbcs	r0, r0
    754c:	445c      	add	r4, fp
    754e:	4243      	negs	r3, r0
    7550:	18e3      	adds	r3, r4, r3
    7552:	1c2e      	adds	r6, r5, #0
    7554:	1c14      	adds	r4, r2, #0
    7556:	0218      	lsls	r0, r3, #8
    7558:	d43e      	bmi.n	75d8 <__aeabi_dadd+0x458>
    755a:	1c72      	adds	r2, r6, #1
    755c:	1c0f      	adds	r7, r1, #0
    755e:	e69c      	b.n	729a <__aeabi_dadd+0x11a>
    7560:	464a      	mov	r2, r9
    7562:	4653      	mov	r3, sl
    7564:	431a      	orrs	r2, r3
    7566:	2400      	movs	r4, #0
    7568:	2a00      	cmp	r2, #0
    756a:	d100      	bne.n	756e <__aeabi_dadd+0x3ee>
    756c:	e6f3      	b.n	7356 <__aeabi_dadd+0x1d6>
    756e:	2201      	movs	r2, #1
    7570:	1812      	adds	r2, r2, r0
    7572:	e7e9      	b.n	7548 <__aeabi_dadd+0x3c8>
    7574:	465b      	mov	r3, fp
    7576:	4303      	orrs	r3, r0
    7578:	d000      	beq.n	757c <__aeabi_dadd+0x3fc>
    757a:	e083      	b.n	7684 <__aeabi_dadd+0x504>
    757c:	1c23      	adds	r3, r4, #0
    757e:	1c72      	adds	r2, r6, #1
    7580:	4654      	mov	r4, sl
    7582:	4667      	mov	r7, ip
    7584:	e689      	b.n	729a <__aeabi_dadd+0x11a>
    7586:	1c14      	adds	r4, r2, #0
    7588:	1c2e      	adds	r6, r5, #0
    758a:	e65b      	b.n	7244 <__aeabi_dadd+0xc4>
    758c:	4ecd      	ldr	r6, [pc, #820]	; (78c4 <__aeabi_dadd+0x744>)
    758e:	42b5      	cmp	r5, r6
    7590:	d000      	beq.n	7594 <__aeabi_dadd+0x414>
    7592:	e6c9      	b.n	7328 <__aeabi_dadd+0x1a8>
    7594:	e76d      	b.n	7472 <__aeabi_dadd+0x2f2>
    7596:	2300      	movs	r3, #0
    7598:	e77d      	b.n	7496 <__aeabi_dadd+0x316>
    759a:	2200      	movs	r2, #0
    759c:	e78f      	b.n	74be <__aeabi_dadd+0x33e>
    759e:	465e      	mov	r6, fp
    75a0:	4306      	orrs	r6, r0
    75a2:	2d00      	cmp	r5, #0
    75a4:	d000      	beq.n	75a8 <__aeabi_dadd+0x428>
    75a6:	e0f4      	b.n	7792 <__aeabi_dadd+0x612>
    75a8:	2e00      	cmp	r6, #0
    75aa:	d100      	bne.n	75ae <__aeabi_dadd+0x42e>
    75ac:	e14c      	b.n	7848 <__aeabi_dadd+0x6c8>
    75ae:	464b      	mov	r3, r9
    75b0:	4313      	orrs	r3, r2
    75b2:	d100      	bne.n	75b6 <__aeabi_dadd+0x436>
    75b4:	e17e      	b.n	78b4 <__aeabi_dadd+0x734>
    75b6:	1815      	adds	r5, r2, r0
    75b8:	464e      	mov	r6, r9
    75ba:	4285      	cmp	r5, r0
    75bc:	4180      	sbcs	r0, r0
    75be:	445e      	add	r6, fp
    75c0:	4242      	negs	r2, r0
    75c2:	18b3      	adds	r3, r6, r2
    75c4:	021e      	lsls	r6, r3, #8
    75c6:	d400      	bmi.n	75ca <__aeabi_dadd+0x44a>
    75c8:	e182      	b.n	78d0 <__aeabi_dadd+0x750>
    75ca:	4fbf      	ldr	r7, [pc, #764]	; (78c8 <__aeabi_dadd+0x748>)
    75cc:	1c2c      	adds	r4, r5, #0
    75ce:	403b      	ands	r3, r7
    75d0:	2202      	movs	r2, #2
    75d2:	1c0f      	adds	r7, r1, #0
    75d4:	2601      	movs	r6, #1
    75d6:	e660      	b.n	729a <__aeabi_dadd+0x11a>
    75d8:	4dba      	ldr	r5, [pc, #744]	; (78c4 <__aeabi_dadd+0x744>)
    75da:	1c70      	adds	r0, r6, #1
    75dc:	42a8      	cmp	r0, r5
    75de:	d04b      	beq.n	7678 <__aeabi_dadd+0x4f8>
    75e0:	4fb9      	ldr	r7, [pc, #740]	; (78c8 <__aeabi_dadd+0x748>)
    75e2:	2501      	movs	r5, #1
    75e4:	4025      	ands	r5, r4
    75e6:	0862      	lsrs	r2, r4, #1
    75e8:	403b      	ands	r3, r7
    75ea:	1c2c      	adds	r4, r5, #0
    75ec:	07df      	lsls	r7, r3, #31
    75ee:	4314      	orrs	r4, r2
    75f0:	433c      	orrs	r4, r7
    75f2:	1cb2      	adds	r2, r6, #2
    75f4:	085b      	lsrs	r3, r3, #1
    75f6:	1c06      	adds	r6, r0, #0
    75f8:	1c0f      	adds	r7, r1, #0
    75fa:	e64e      	b.n	729a <__aeabi_dadd+0x11a>
    75fc:	465e      	mov	r6, fp
    75fe:	4306      	orrs	r6, r0
    7600:	2d00      	cmp	r5, #0
    7602:	d12c      	bne.n	765e <__aeabi_dadd+0x4de>
    7604:	2e00      	cmp	r6, #0
    7606:	d000      	beq.n	760a <__aeabi_dadd+0x48a>
    7608:	e07d      	b.n	7706 <__aeabi_dadd+0x586>
    760a:	464e      	mov	r6, r9
    760c:	1c14      	adds	r4, r2, #0
    760e:	4316      	orrs	r6, r2
    7610:	d088      	beq.n	7524 <__aeabi_dadd+0x3a4>
    7612:	464b      	mov	r3, r9
    7614:	4667      	mov	r7, ip
    7616:	2201      	movs	r2, #1
    7618:	2600      	movs	r6, #0
    761a:	e63e      	b.n	729a <__aeabi_dadd+0x11a>
    761c:	1c1e      	adds	r6, r3, #0
    761e:	3e20      	subs	r6, #32
    7620:	464c      	mov	r4, r9
    7622:	40f4      	lsrs	r4, r6
    7624:	1c26      	adds	r6, r4, #0
    7626:	2b20      	cmp	r3, #32
    7628:	d100      	bne.n	762c <__aeabi_dadd+0x4ac>
    762a:	e0d8      	b.n	77de <__aeabi_dadd+0x65e>
    762c:	2240      	movs	r2, #64	; 0x40
    762e:	1ad4      	subs	r4, r2, r3
    7630:	464b      	mov	r3, r9
    7632:	40a3      	lsls	r3, r4
    7634:	1c1a      	adds	r2, r3, #0
    7636:	4654      	mov	r4, sl
    7638:	4322      	orrs	r2, r4
    763a:	1e53      	subs	r3, r2, #1
    763c:	419a      	sbcs	r2, r3
    763e:	4332      	orrs	r2, r6
    7640:	2400      	movs	r4, #0
    7642:	1812      	adds	r2, r2, r0
    7644:	e780      	b.n	7548 <__aeabi_dadd+0x3c8>
    7646:	425b      	negs	r3, r3
    7648:	2d00      	cmp	r5, #0
    764a:	d137      	bne.n	76bc <__aeabi_dadd+0x53c>
    764c:	465c      	mov	r4, fp
    764e:	4304      	orrs	r4, r0
    7650:	d000      	beq.n	7654 <__aeabi_dadd+0x4d4>
    7652:	e0d7      	b.n	7804 <__aeabi_dadd+0x684>
    7654:	1c72      	adds	r2, r6, #1
    7656:	464b      	mov	r3, r9
    7658:	4654      	mov	r4, sl
    765a:	1c0f      	adds	r7, r1, #0
    765c:	e61d      	b.n	729a <__aeabi_dadd+0x11a>
    765e:	2e00      	cmp	r6, #0
    7660:	d16e      	bne.n	7740 <__aeabi_dadd+0x5c0>
    7662:	464b      	mov	r3, r9
    7664:	1c14      	adds	r4, r2, #0
    7666:	4313      	orrs	r3, r2
    7668:	d100      	bne.n	766c <__aeabi_dadd+0x4ec>
    766a:	e0dc      	b.n	7826 <__aeabi_dadd+0x6a6>
    766c:	2580      	movs	r5, #128	; 0x80
    766e:	464b      	mov	r3, r9
    7670:	4667      	mov	r7, ip
    7672:	012a      	lsls	r2, r5, #4
    7674:	4e93      	ldr	r6, [pc, #588]	; (78c4 <__aeabi_dadd+0x744>)
    7676:	e610      	b.n	729a <__aeabi_dadd+0x11a>
    7678:	2180      	movs	r1, #128	; 0x80
    767a:	1c06      	adds	r6, r0, #0
    767c:	010a      	lsls	r2, r1, #4
    767e:	2300      	movs	r3, #0
    7680:	2004      	movs	r0, #4
    7682:	e622      	b.n	72ca <__aeabi_dadd+0x14a>
    7684:	3f01      	subs	r7, #1
    7686:	2f00      	cmp	r7, #0
    7688:	d179      	bne.n	777e <__aeabi_dadd+0x5fe>
    768a:	1a17      	subs	r7, r2, r0
    768c:	465b      	mov	r3, fp
    768e:	45ba      	cmp	sl, r7
    7690:	41ad      	sbcs	r5, r5
    7692:	4649      	mov	r1, r9
    7694:	1aca      	subs	r2, r1, r3
    7696:	4268      	negs	r0, r5
    7698:	1c3c      	adds	r4, r7, #0
    769a:	1a13      	subs	r3, r2, r0
    769c:	4667      	mov	r7, ip
    769e:	e5cb      	b.n	7238 <__aeabi_dadd+0xb8>
    76a0:	465f      	mov	r7, fp
    76a2:	4307      	orrs	r7, r0
    76a4:	2300      	movs	r3, #0
    76a6:	2000      	movs	r0, #0
    76a8:	2f00      	cmp	r7, #0
    76aa:	d100      	bne.n	76ae <__aeabi_dadd+0x52e>
    76ac:	e72d      	b.n	750a <__aeabi_dadd+0x38a>
    76ae:	2001      	movs	r0, #1
    76b0:	e72b      	b.n	750a <__aeabi_dadd+0x38a>
    76b2:	2580      	movs	r5, #128	; 0x80
    76b4:	012a      	lsls	r2, r5, #4
    76b6:	2300      	movs	r3, #0
    76b8:	2004      	movs	r0, #4
    76ba:	e606      	b.n	72ca <__aeabi_dadd+0x14a>
    76bc:	4d81      	ldr	r5, [pc, #516]	; (78c4 <__aeabi_dadd+0x744>)
    76be:	42ae      	cmp	r6, r5
    76c0:	d100      	bne.n	76c4 <__aeabi_dadd+0x544>
    76c2:	e0d3      	b.n	786c <__aeabi_dadd+0x6ec>
    76c4:	2480      	movs	r4, #128	; 0x80
    76c6:	465d      	mov	r5, fp
    76c8:	0422      	lsls	r2, r4, #16
    76ca:	4315      	orrs	r5, r2
    76cc:	46ab      	mov	fp, r5
    76ce:	2b38      	cmp	r3, #56	; 0x38
    76d0:	dd00      	ble.n	76d4 <__aeabi_dadd+0x554>
    76d2:	e0b0      	b.n	7836 <__aeabi_dadd+0x6b6>
    76d4:	2b1f      	cmp	r3, #31
    76d6:	dd00      	ble.n	76da <__aeabi_dadd+0x55a>
    76d8:	e0db      	b.n	7892 <__aeabi_dadd+0x712>
    76da:	2520      	movs	r5, #32
    76dc:	1aed      	subs	r5, r5, r3
    76de:	1c02      	adds	r2, r0, #0
    76e0:	465c      	mov	r4, fp
    76e2:	40ac      	lsls	r4, r5
    76e4:	40da      	lsrs	r2, r3
    76e6:	40a8      	lsls	r0, r5
    76e8:	1e45      	subs	r5, r0, #1
    76ea:	41a8      	sbcs	r0, r5
    76ec:	4322      	orrs	r2, r4
    76ee:	4302      	orrs	r2, r0
    76f0:	4658      	mov	r0, fp
    76f2:	40d8      	lsrs	r0, r3
    76f4:	1c03      	adds	r3, r0, #0
    76f6:	4655      	mov	r5, sl
    76f8:	1954      	adds	r4, r2, r5
    76fa:	4554      	cmp	r4, sl
    76fc:	4192      	sbcs	r2, r2
    76fe:	444b      	add	r3, r9
    7700:	4250      	negs	r0, r2
    7702:	181b      	adds	r3, r3, r0
    7704:	e727      	b.n	7556 <__aeabi_dadd+0x3d6>
    7706:	464a      	mov	r2, r9
    7708:	4656      	mov	r6, sl
    770a:	4332      	orrs	r2, r6
    770c:	d100      	bne.n	7710 <__aeabi_dadd+0x590>
    770e:	e085      	b.n	781c <__aeabi_dadd+0x69c>
    7710:	1b85      	subs	r5, r0, r6
    7712:	465b      	mov	r3, fp
    7714:	464c      	mov	r4, r9
    7716:	42a8      	cmp	r0, r5
    7718:	4192      	sbcs	r2, r2
    771a:	1b19      	subs	r1, r3, r4
    771c:	4256      	negs	r6, r2
    771e:	1b8b      	subs	r3, r1, r6
    7720:	021e      	lsls	r6, r3, #8
    7722:	d400      	bmi.n	7726 <__aeabi_dadd+0x5a6>
    7724:	e0ad      	b.n	7882 <__aeabi_dadd+0x702>
    7726:	4657      	mov	r7, sl
    7728:	1a3d      	subs	r5, r7, r0
    772a:	465b      	mov	r3, fp
    772c:	45aa      	cmp	sl, r5
    772e:	4189      	sbcs	r1, r1
    7730:	1ae4      	subs	r4, r4, r3
    7732:	424a      	negs	r2, r1
    7734:	1aa3      	subs	r3, r4, r2
    7736:	4667      	mov	r7, ip
    7738:	1c2c      	adds	r4, r5, #0
    773a:	2201      	movs	r2, #1
    773c:	2600      	movs	r6, #0
    773e:	e5ac      	b.n	729a <__aeabi_dadd+0x11a>
    7740:	464d      	mov	r5, r9
    7742:	1c16      	adds	r6, r2, #0
    7744:	4315      	orrs	r5, r2
    7746:	d044      	beq.n	77d2 <__aeabi_dadd+0x652>
    7748:	465c      	mov	r4, fp
    774a:	2180      	movs	r1, #128	; 0x80
    774c:	08c0      	lsrs	r0, r0, #3
    774e:	0762      	lsls	r2, r4, #29
    7750:	08e3      	lsrs	r3, r4, #3
    7752:	030d      	lsls	r5, r1, #12
    7754:	4310      	orrs	r0, r2
    7756:	422b      	tst	r3, r5
    7758:	d100      	bne.n	775c <__aeabi_dadd+0x5dc>
    775a:	e081      	b.n	7860 <__aeabi_dadd+0x6e0>
    775c:	464c      	mov	r4, r9
    775e:	08e1      	lsrs	r1, r4, #3
    7760:	4229      	tst	r1, r5
    7762:	d17d      	bne.n	7860 <__aeabi_dadd+0x6e0>
    7764:	08f7      	lsrs	r7, r6, #3
    7766:	0766      	lsls	r6, r4, #29
    7768:	433e      	orrs	r6, r7
    776a:	1c0b      	adds	r3, r1, #0
    776c:	4667      	mov	r7, ip
    776e:	0f70      	lsrs	r0, r6, #29
    7770:	00db      	lsls	r3, r3, #3
    7772:	2280      	movs	r2, #128	; 0x80
    7774:	00f4      	lsls	r4, r6, #3
    7776:	4303      	orrs	r3, r0
    7778:	0112      	lsls	r2, r2, #4
    777a:	4e52      	ldr	r6, [pc, #328]	; (78c4 <__aeabi_dadd+0x744>)
    777c:	e58d      	b.n	729a <__aeabi_dadd+0x11a>
    777e:	4d51      	ldr	r5, [pc, #324]	; (78c4 <__aeabi_dadd+0x744>)
    7780:	42ae      	cmp	r6, r5
    7782:	d000      	beq.n	7786 <__aeabi_dadd+0x606>
    7784:	e6ae      	b.n	74e4 <__aeabi_dadd+0x364>
    7786:	2080      	movs	r0, #128	; 0x80
    7788:	464b      	mov	r3, r9
    778a:	4654      	mov	r4, sl
    778c:	4667      	mov	r7, ip
    778e:	0102      	lsls	r2, r0, #4
    7790:	e583      	b.n	729a <__aeabi_dadd+0x11a>
    7792:	2e00      	cmp	r6, #0
    7794:	d05e      	beq.n	7854 <__aeabi_dadd+0x6d4>
    7796:	464c      	mov	r4, r9
    7798:	4314      	orrs	r4, r2
    779a:	d01a      	beq.n	77d2 <__aeabi_dadd+0x652>
    779c:	08c7      	lsrs	r7, r0, #3
    779e:	2580      	movs	r5, #128	; 0x80
    77a0:	4658      	mov	r0, fp
    77a2:	0743      	lsls	r3, r0, #29
    77a4:	032c      	lsls	r4, r5, #12
    77a6:	08c0      	lsrs	r0, r0, #3
    77a8:	431f      	orrs	r7, r3
    77aa:	4220      	tst	r0, r4
    77ac:	d008      	beq.n	77c0 <__aeabi_dadd+0x640>
    77ae:	464e      	mov	r6, r9
    77b0:	08f3      	lsrs	r3, r6, #3
    77b2:	4223      	tst	r3, r4
    77b4:	d104      	bne.n	77c0 <__aeabi_dadd+0x640>
    77b6:	4652      	mov	r2, sl
    77b8:	08d5      	lsrs	r5, r2, #3
    77ba:	0777      	lsls	r7, r6, #29
    77bc:	1c18      	adds	r0, r3, #0
    77be:	432f      	orrs	r7, r5
    77c0:	00c3      	lsls	r3, r0, #3
    77c2:	00fc      	lsls	r4, r7, #3
    77c4:	0f78      	lsrs	r0, r7, #29
    77c6:	1c0f      	adds	r7, r1, #0
    77c8:	2180      	movs	r1, #128	; 0x80
    77ca:	4303      	orrs	r3, r0
    77cc:	010a      	lsls	r2, r1, #4
    77ce:	4e3d      	ldr	r6, [pc, #244]	; (78c4 <__aeabi_dadd+0x744>)
    77d0:	e563      	b.n	729a <__aeabi_dadd+0x11a>
    77d2:	2680      	movs	r6, #128	; 0x80
    77d4:	0132      	lsls	r2, r6, #4
    77d6:	465b      	mov	r3, fp
    77d8:	1c04      	adds	r4, r0, #0
    77da:	4e3a      	ldr	r6, [pc, #232]	; (78c4 <__aeabi_dadd+0x744>)
    77dc:	e55d      	b.n	729a <__aeabi_dadd+0x11a>
    77de:	2200      	movs	r2, #0
    77e0:	e729      	b.n	7636 <__aeabi_dadd+0x4b6>
    77e2:	1c39      	adds	r1, r7, #0
    77e4:	3920      	subs	r1, #32
    77e6:	465c      	mov	r4, fp
    77e8:	40cc      	lsrs	r4, r1
    77ea:	1c22      	adds	r2, r4, #0
    77ec:	2f20      	cmp	r7, #32
    77ee:	d067      	beq.n	78c0 <__aeabi_dadd+0x740>
    77f0:	2340      	movs	r3, #64	; 0x40
    77f2:	1bdf      	subs	r7, r3, r7
    77f4:	465d      	mov	r5, fp
    77f6:	40bd      	lsls	r5, r7
    77f8:	4328      	orrs	r0, r5
    77fa:	1e43      	subs	r3, r0, #1
    77fc:	4198      	sbcs	r0, r3
    77fe:	4310      	orrs	r0, r2
    7800:	2300      	movs	r3, #0
    7802:	e682      	b.n	750a <__aeabi_dadd+0x38a>
    7804:	3b01      	subs	r3, #1
    7806:	2b00      	cmp	r3, #0
    7808:	d12c      	bne.n	7864 <__aeabi_dadd+0x6e4>
    780a:	4450      	add	r0, sl
    780c:	465c      	mov	r4, fp
    780e:	4290      	cmp	r0, r2
    7810:	41ad      	sbcs	r5, r5
    7812:	444c      	add	r4, r9
    7814:	426a      	negs	r2, r5
    7816:	18a3      	adds	r3, r4, r2
    7818:	1c04      	adds	r4, r0, #0
    781a:	e69c      	b.n	7556 <__aeabi_dadd+0x3d6>
    781c:	465b      	mov	r3, fp
    781e:	1c04      	adds	r4, r0, #0
    7820:	2201      	movs	r2, #1
    7822:	2600      	movs	r6, #0
    7824:	e539      	b.n	729a <__aeabi_dadd+0x11a>
    7826:	2480      	movs	r4, #128	; 0x80
    7828:	2104      	movs	r1, #4
    782a:	2700      	movs	r7, #0
    782c:	0122      	lsls	r2, r4, #4
    782e:	4b27      	ldr	r3, [pc, #156]	; (78cc <__aeabi_dadd+0x74c>)
    7830:	4248      	negs	r0, r1
    7832:	4e24      	ldr	r6, [pc, #144]	; (78c4 <__aeabi_dadd+0x744>)
    7834:	e549      	b.n	72ca <__aeabi_dadd+0x14a>
    7836:	465d      	mov	r5, fp
    7838:	4305      	orrs	r5, r0
    783a:	2300      	movs	r3, #0
    783c:	2200      	movs	r2, #0
    783e:	2d00      	cmp	r5, #0
    7840:	d100      	bne.n	7844 <__aeabi_dadd+0x6c4>
    7842:	e758      	b.n	76f6 <__aeabi_dadd+0x576>
    7844:	2201      	movs	r2, #1
    7846:	e756      	b.n	76f6 <__aeabi_dadd+0x576>
    7848:	1c14      	adds	r4, r2, #0
    784a:	464b      	mov	r3, r9
    784c:	1c0f      	adds	r7, r1, #0
    784e:	2201      	movs	r2, #1
    7850:	2600      	movs	r6, #0
    7852:	e522      	b.n	729a <__aeabi_dadd+0x11a>
    7854:	1c14      	adds	r4, r2, #0
    7856:	2280      	movs	r2, #128	; 0x80
    7858:	464b      	mov	r3, r9
    785a:	0112      	lsls	r2, r2, #4
    785c:	4e19      	ldr	r6, [pc, #100]	; (78c4 <__aeabi_dadd+0x744>)
    785e:	e51c      	b.n	729a <__aeabi_dadd+0x11a>
    7860:	1c06      	adds	r6, r0, #0
    7862:	e784      	b.n	776e <__aeabi_dadd+0x5ee>
    7864:	4a17      	ldr	r2, [pc, #92]	; (78c4 <__aeabi_dadd+0x744>)
    7866:	4296      	cmp	r6, r2
    7868:	d000      	beq.n	786c <__aeabi_dadd+0x6ec>
    786a:	e730      	b.n	76ce <__aeabi_dadd+0x54e>
    786c:	1c0f      	adds	r7, r1, #0
    786e:	2180      	movs	r1, #128	; 0x80
    7870:	464b      	mov	r3, r9
    7872:	4654      	mov	r4, sl
    7874:	010a      	lsls	r2, r1, #4
    7876:	e510      	b.n	729a <__aeabi_dadd+0x11a>
    7878:	0574      	lsls	r4, r6, #21
    787a:	0d66      	lsrs	r6, r4, #21
    787c:	2300      	movs	r3, #0
    787e:	2400      	movs	r4, #0
    7880:	e52f      	b.n	72e2 <__aeabi_dadd+0x162>
    7882:	1c18      	adds	r0, r3, #0
    7884:	4328      	orrs	r0, r5
    7886:	d100      	bne.n	788a <__aeabi_dadd+0x70a>
    7888:	e64c      	b.n	7524 <__aeabi_dadd+0x3a4>
    788a:	1c2c      	adds	r4, r5, #0
    788c:	2201      	movs	r2, #1
    788e:	2600      	movs	r6, #0
    7890:	e503      	b.n	729a <__aeabi_dadd+0x11a>
    7892:	1c1c      	adds	r4, r3, #0
    7894:	3c20      	subs	r4, #32
    7896:	465d      	mov	r5, fp
    7898:	40e5      	lsrs	r5, r4
    789a:	1c2c      	adds	r4, r5, #0
    789c:	2b20      	cmp	r3, #32
    789e:	d01c      	beq.n	78da <__aeabi_dadd+0x75a>
    78a0:	2240      	movs	r2, #64	; 0x40
    78a2:	1ad3      	subs	r3, r2, r3
    78a4:	465a      	mov	r2, fp
    78a6:	409a      	lsls	r2, r3
    78a8:	4302      	orrs	r2, r0
    78aa:	1e50      	subs	r0, r2, #1
    78ac:	4182      	sbcs	r2, r0
    78ae:	4322      	orrs	r2, r4
    78b0:	2300      	movs	r3, #0
    78b2:	e720      	b.n	76f6 <__aeabi_dadd+0x576>
    78b4:	465b      	mov	r3, fp
    78b6:	1c04      	adds	r4, r0, #0
    78b8:	1c0f      	adds	r7, r1, #0
    78ba:	2201      	movs	r2, #1
    78bc:	2600      	movs	r6, #0
    78be:	e4ec      	b.n	729a <__aeabi_dadd+0x11a>
    78c0:	2500      	movs	r5, #0
    78c2:	e799      	b.n	77f8 <__aeabi_dadd+0x678>
    78c4:	000007ff 	.word	0x000007ff
    78c8:	ff7fffff 	.word	0xff7fffff
    78cc:	007fffff 	.word	0x007fffff
    78d0:	1c2c      	adds	r4, r5, #0
    78d2:	1c0f      	adds	r7, r1, #0
    78d4:	2201      	movs	r2, #1
    78d6:	2600      	movs	r6, #0
    78d8:	e4df      	b.n	729a <__aeabi_dadd+0x11a>
    78da:	2200      	movs	r2, #0
    78dc:	e7e4      	b.n	78a8 <__aeabi_dadd+0x728>
    78de:	46c0      	nop			; (mov r8, r8)

000078e0 <__aeabi_ddiv>:
    78e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    78e2:	464d      	mov	r5, r9
    78e4:	4644      	mov	r4, r8
    78e6:	465f      	mov	r7, fp
    78e8:	4656      	mov	r6, sl
    78ea:	b4f0      	push	{r4, r5, r6, r7}
    78ec:	1c1d      	adds	r5, r3, #0
    78ee:	004b      	lsls	r3, r1, #1
    78f0:	1c14      	adds	r4, r2, #0
    78f2:	030e      	lsls	r6, r1, #12
    78f4:	0d5b      	lsrs	r3, r3, #21
    78f6:	0fca      	lsrs	r2, r1, #31
    78f8:	b087      	sub	sp, #28
    78fa:	1c07      	adds	r7, r0, #0
    78fc:	0b36      	lsrs	r6, r6, #12
    78fe:	4698      	mov	r8, r3
    7900:	4691      	mov	r9, r2
    7902:	2b00      	cmp	r3, #0
    7904:	d11d      	bne.n	7942 <__aeabi_ddiv+0x62>
    7906:	1c32      	adds	r2, r6, #0
    7908:	4302      	orrs	r2, r0
    790a:	d100      	bne.n	790e <__aeabi_ddiv+0x2e>
    790c:	e181      	b.n	7c12 <__aeabi_ddiv+0x332>
    790e:	2e00      	cmp	r6, #0
    7910:	d100      	bne.n	7914 <__aeabi_ddiv+0x34>
    7912:	e204      	b.n	7d1e <__aeabi_ddiv+0x43e>
    7914:	1c30      	adds	r0, r6, #0
    7916:	f7fb fe77 	bl	3608 <__clzsi2>
    791a:	2827      	cmp	r0, #39	; 0x27
    791c:	dd00      	ble.n	7920 <__aeabi_ddiv+0x40>
    791e:	e1f8      	b.n	7d12 <__aeabi_ddiv+0x432>
    7920:	2128      	movs	r1, #40	; 0x28
    7922:	1c03      	adds	r3, r0, #0
    7924:	3b08      	subs	r3, #8
    7926:	1a0a      	subs	r2, r1, r0
    7928:	1c39      	adds	r1, r7, #0
    792a:	409e      	lsls	r6, r3
    792c:	40d1      	lsrs	r1, r2
    792e:	430e      	orrs	r6, r1
    7930:	409f      	lsls	r7, r3
    7932:	4bc1      	ldr	r3, [pc, #772]	; (7c38 <__aeabi_ddiv+0x358>)
    7934:	2100      	movs	r1, #0
    7936:	1a18      	subs	r0, r3, r0
    7938:	2200      	movs	r2, #0
    793a:	4680      	mov	r8, r0
    793c:	468a      	mov	sl, r1
    793e:	9200      	str	r2, [sp, #0]
    7940:	e00f      	b.n	7962 <__aeabi_ddiv+0x82>
    7942:	48be      	ldr	r0, [pc, #760]	; (7c3c <__aeabi_ddiv+0x35c>)
    7944:	4283      	cmp	r3, r0
    7946:	d031      	beq.n	79ac <__aeabi_ddiv+0xcc>
    7948:	2180      	movs	r1, #128	; 0x80
    794a:	034b      	lsls	r3, r1, #13
    794c:	431e      	orrs	r6, r3
    794e:	48bc      	ldr	r0, [pc, #752]	; (7c40 <__aeabi_ddiv+0x360>)
    7950:	0f7a      	lsrs	r2, r7, #29
    7952:	00f6      	lsls	r6, r6, #3
    7954:	2100      	movs	r1, #0
    7956:	2300      	movs	r3, #0
    7958:	4316      	orrs	r6, r2
    795a:	00ff      	lsls	r7, r7, #3
    795c:	4480      	add	r8, r0
    795e:	468a      	mov	sl, r1
    7960:	9300      	str	r3, [sp, #0]
    7962:	1c29      	adds	r1, r5, #0
    7964:	1c20      	adds	r0, r4, #0
    7966:	1c25      	adds	r5, r4, #0
    7968:	004a      	lsls	r2, r1, #1
    796a:	030c      	lsls	r4, r1, #12
    796c:	0fcb      	lsrs	r3, r1, #31
    796e:	0b24      	lsrs	r4, r4, #12
    7970:	0d52      	lsrs	r2, r2, #21
    7972:	469b      	mov	fp, r3
    7974:	d125      	bne.n	79c2 <__aeabi_ddiv+0xe2>
    7976:	1c21      	adds	r1, r4, #0
    7978:	4301      	orrs	r1, r0
    797a:	d100      	bne.n	797e <__aeabi_ddiv+0x9e>
    797c:	e150      	b.n	7c20 <__aeabi_ddiv+0x340>
    797e:	2c00      	cmp	r4, #0
    7980:	d100      	bne.n	7984 <__aeabi_ddiv+0xa4>
    7982:	e1c2      	b.n	7d0a <__aeabi_ddiv+0x42a>
    7984:	1c20      	adds	r0, r4, #0
    7986:	f7fb fe3f 	bl	3608 <__clzsi2>
    798a:	2827      	cmp	r0, #39	; 0x27
    798c:	dd00      	ble.n	7990 <__aeabi_ddiv+0xb0>
    798e:	e1b6      	b.n	7cfe <__aeabi_ddiv+0x41e>
    7990:	1c03      	adds	r3, r0, #0
    7992:	2228      	movs	r2, #40	; 0x28
    7994:	3b08      	subs	r3, #8
    7996:	1c29      	adds	r1, r5, #0
    7998:	1a12      	subs	r2, r2, r0
    799a:	409c      	lsls	r4, r3
    799c:	40d1      	lsrs	r1, r2
    799e:	430c      	orrs	r4, r1
    79a0:	409d      	lsls	r5, r3
    79a2:	4ba5      	ldr	r3, [pc, #660]	; (7c38 <__aeabi_ddiv+0x358>)
    79a4:	1a1a      	subs	r2, r3, r0
    79a6:	2000      	movs	r0, #0
    79a8:	9002      	str	r0, [sp, #8]
    79aa:	e019      	b.n	79e0 <__aeabi_ddiv+0x100>
    79ac:	1c32      	adds	r2, r6, #0
    79ae:	433a      	orrs	r2, r7
    79b0:	d000      	beq.n	79b4 <__aeabi_ddiv+0xd4>
    79b2:	e129      	b.n	7c08 <__aeabi_ddiv+0x328>
    79b4:	2708      	movs	r7, #8
    79b6:	2302      	movs	r3, #2
    79b8:	46ba      	mov	sl, r7
    79ba:	2600      	movs	r6, #0
    79bc:	2700      	movs	r7, #0
    79be:	9300      	str	r3, [sp, #0]
    79c0:	e7cf      	b.n	7962 <__aeabi_ddiv+0x82>
    79c2:	489e      	ldr	r0, [pc, #632]	; (7c3c <__aeabi_ddiv+0x35c>)
    79c4:	4282      	cmp	r2, r0
    79c6:	d100      	bne.n	79ca <__aeabi_ddiv+0xea>
    79c8:	e113      	b.n	7bf2 <__aeabi_ddiv+0x312>
    79ca:	2180      	movs	r1, #128	; 0x80
    79cc:	034b      	lsls	r3, r1, #13
    79ce:	431c      	orrs	r4, r3
    79d0:	499b      	ldr	r1, [pc, #620]	; (7c40 <__aeabi_ddiv+0x360>)
    79d2:	0f68      	lsrs	r0, r5, #29
    79d4:	00e4      	lsls	r4, r4, #3
    79d6:	2300      	movs	r3, #0
    79d8:	4304      	orrs	r4, r0
    79da:	00ed      	lsls	r5, r5, #3
    79dc:	1852      	adds	r2, r2, r1
    79de:	9302      	str	r3, [sp, #8]
    79e0:	4648      	mov	r0, r9
    79e2:	465b      	mov	r3, fp
    79e4:	4043      	eors	r3, r0
    79e6:	9802      	ldr	r0, [sp, #8]
    79e8:	4651      	mov	r1, sl
    79ea:	9301      	str	r3, [sp, #4]
    79ec:	4301      	orrs	r1, r0
    79ee:	290f      	cmp	r1, #15
    79f0:	d800      	bhi.n	79f4 <__aeabi_ddiv+0x114>
    79f2:	e0df      	b.n	7bb4 <__aeabi_ddiv+0x2d4>
    79f4:	4643      	mov	r3, r8
    79f6:	1a9a      	subs	r2, r3, r2
    79f8:	9204      	str	r2, [sp, #16]
    79fa:	42a6      	cmp	r6, r4
    79fc:	d800      	bhi.n	7a00 <__aeabi_ddiv+0x120>
    79fe:	e16e      	b.n	7cde <__aeabi_ddiv+0x3fe>
    7a00:	0871      	lsrs	r1, r6, #1
    7a02:	087b      	lsrs	r3, r7, #1
    7a04:	07f6      	lsls	r6, r6, #31
    7a06:	4333      	orrs	r3, r6
    7a08:	07fa      	lsls	r2, r7, #31
    7a0a:	4689      	mov	r9, r1
    7a0c:	4698      	mov	r8, r3
    7a0e:	9202      	str	r2, [sp, #8]
    7a10:	0e28      	lsrs	r0, r5, #24
    7a12:	0224      	lsls	r4, r4, #8
    7a14:	4304      	orrs	r4, r0
    7a16:	022d      	lsls	r5, r5, #8
    7a18:	0427      	lsls	r7, r4, #16
    7a1a:	0c39      	lsrs	r1, r7, #16
    7a1c:	46ab      	mov	fp, r5
    7a1e:	0c25      	lsrs	r5, r4, #16
    7a20:	9100      	str	r1, [sp, #0]
    7a22:	4648      	mov	r0, r9
    7a24:	1c29      	adds	r1, r5, #0
    7a26:	f7fb f975 	bl	2d14 <__aeabi_uidiv>
    7a2a:	9f00      	ldr	r7, [sp, #0]
    7a2c:	1c06      	adds	r6, r0, #0
    7a2e:	4347      	muls	r7, r0
    7a30:	1c29      	adds	r1, r5, #0
    7a32:	4648      	mov	r0, r9
    7a34:	f7fb f9b2 	bl	2d9c <__aeabi_uidivmod>
    7a38:	4643      	mov	r3, r8
    7a3a:	0408      	lsls	r0, r1, #16
    7a3c:	0c1a      	lsrs	r2, r3, #16
    7a3e:	4310      	orrs	r0, r2
    7a40:	4287      	cmp	r7, r0
    7a42:	d907      	bls.n	7a54 <__aeabi_ddiv+0x174>
    7a44:	1900      	adds	r0, r0, r4
    7a46:	3e01      	subs	r6, #1
    7a48:	4284      	cmp	r4, r0
    7a4a:	d803      	bhi.n	7a54 <__aeabi_ddiv+0x174>
    7a4c:	4287      	cmp	r7, r0
    7a4e:	d901      	bls.n	7a54 <__aeabi_ddiv+0x174>
    7a50:	3e01      	subs	r6, #1
    7a52:	1900      	adds	r0, r0, r4
    7a54:	1bc1      	subs	r1, r0, r7
    7a56:	468a      	mov	sl, r1
    7a58:	1c08      	adds	r0, r1, #0
    7a5a:	1c29      	adds	r1, r5, #0
    7a5c:	f7fb f95a 	bl	2d14 <__aeabi_uidiv>
    7a60:	9b00      	ldr	r3, [sp, #0]
    7a62:	1c07      	adds	r7, r0, #0
    7a64:	4343      	muls	r3, r0
    7a66:	1c29      	adds	r1, r5, #0
    7a68:	4650      	mov	r0, sl
    7a6a:	4699      	mov	r9, r3
    7a6c:	f7fb f996 	bl	2d9c <__aeabi_uidivmod>
    7a70:	4642      	mov	r2, r8
    7a72:	0410      	lsls	r0, r2, #16
    7a74:	040b      	lsls	r3, r1, #16
    7a76:	0c01      	lsrs	r1, r0, #16
    7a78:	430b      	orrs	r3, r1
    7a7a:	4599      	cmp	r9, r3
    7a7c:	d904      	bls.n	7a88 <__aeabi_ddiv+0x1a8>
    7a7e:	191b      	adds	r3, r3, r4
    7a80:	3f01      	subs	r7, #1
    7a82:	429c      	cmp	r4, r3
    7a84:	d800      	bhi.n	7a88 <__aeabi_ddiv+0x1a8>
    7a86:	e164      	b.n	7d52 <__aeabi_ddiv+0x472>
    7a88:	0436      	lsls	r6, r6, #16
    7a8a:	433e      	orrs	r6, r7
    7a8c:	465f      	mov	r7, fp
    7a8e:	464a      	mov	r2, r9
    7a90:	0c39      	lsrs	r1, r7, #16
    7a92:	4689      	mov	r9, r1
    7a94:	1a9b      	subs	r3, r3, r2
    7a96:	4659      	mov	r1, fp
    7a98:	0432      	lsls	r2, r6, #16
    7a9a:	0c17      	lsrs	r7, r2, #16
    7a9c:	040a      	lsls	r2, r1, #16
    7a9e:	4649      	mov	r1, r9
    7aa0:	4379      	muls	r1, r7
    7aa2:	0c12      	lsrs	r2, r2, #16
    7aa4:	9203      	str	r2, [sp, #12]
    7aa6:	468c      	mov	ip, r1
    7aa8:	9903      	ldr	r1, [sp, #12]
    7aaa:	0c30      	lsrs	r0, r6, #16
    7aac:	437a      	muls	r2, r7
    7aae:	4341      	muls	r1, r0
    7ab0:	464f      	mov	r7, r9
    7ab2:	4378      	muls	r0, r7
    7ab4:	448c      	add	ip, r1
    7ab6:	0c17      	lsrs	r7, r2, #16
    7ab8:	4467      	add	r7, ip
    7aba:	42b9      	cmp	r1, r7
    7abc:	d902      	bls.n	7ac4 <__aeabi_ddiv+0x1e4>
    7abe:	2180      	movs	r1, #128	; 0x80
    7ac0:	0249      	lsls	r1, r1, #9
    7ac2:	1840      	adds	r0, r0, r1
    7ac4:	0c39      	lsrs	r1, r7, #16
    7ac6:	0412      	lsls	r2, r2, #16
    7ac8:	1840      	adds	r0, r0, r1
    7aca:	043f      	lsls	r7, r7, #16
    7acc:	0c11      	lsrs	r1, r2, #16
    7ace:	187f      	adds	r7, r7, r1
    7ad0:	4283      	cmp	r3, r0
    7ad2:	d200      	bcs.n	7ad6 <__aeabi_ddiv+0x1f6>
    7ad4:	e127      	b.n	7d26 <__aeabi_ddiv+0x446>
    7ad6:	d100      	bne.n	7ada <__aeabi_ddiv+0x1fa>
    7ad8:	e141      	b.n	7d5e <__aeabi_ddiv+0x47e>
    7ada:	9902      	ldr	r1, [sp, #8]
    7adc:	1a1b      	subs	r3, r3, r0
    7ade:	1bcf      	subs	r7, r1, r7
    7ae0:	42b9      	cmp	r1, r7
    7ae2:	4180      	sbcs	r0, r0
    7ae4:	4241      	negs	r1, r0
    7ae6:	1a5a      	subs	r2, r3, r1
    7ae8:	4690      	mov	r8, r2
    7aea:	42a2      	cmp	r2, r4
    7aec:	d100      	bne.n	7af0 <__aeabi_ddiv+0x210>
    7aee:	e15f      	b.n	7db0 <__aeabi_ddiv+0x4d0>
    7af0:	1c10      	adds	r0, r2, #0
    7af2:	1c29      	adds	r1, r5, #0
    7af4:	f7fb f90e 	bl	2d14 <__aeabi_uidiv>
    7af8:	9b00      	ldr	r3, [sp, #0]
    7afa:	9002      	str	r0, [sp, #8]
    7afc:	4343      	muls	r3, r0
    7afe:	1c29      	adds	r1, r5, #0
    7b00:	4640      	mov	r0, r8
    7b02:	469a      	mov	sl, r3
    7b04:	f7fb f94a 	bl	2d9c <__aeabi_uidivmod>
    7b08:	0c38      	lsrs	r0, r7, #16
    7b0a:	0409      	lsls	r1, r1, #16
    7b0c:	4301      	orrs	r1, r0
    7b0e:	458a      	cmp	sl, r1
    7b10:	d90a      	bls.n	7b28 <__aeabi_ddiv+0x248>
    7b12:	9a02      	ldr	r2, [sp, #8]
    7b14:	1909      	adds	r1, r1, r4
    7b16:	3a01      	subs	r2, #1
    7b18:	9202      	str	r2, [sp, #8]
    7b1a:	428c      	cmp	r4, r1
    7b1c:	d804      	bhi.n	7b28 <__aeabi_ddiv+0x248>
    7b1e:	458a      	cmp	sl, r1
    7b20:	d902      	bls.n	7b28 <__aeabi_ddiv+0x248>
    7b22:	3a01      	subs	r2, #1
    7b24:	9202      	str	r2, [sp, #8]
    7b26:	1909      	adds	r1, r1, r4
    7b28:	4653      	mov	r3, sl
    7b2a:	1ac8      	subs	r0, r1, r3
    7b2c:	1c29      	adds	r1, r5, #0
    7b2e:	9005      	str	r0, [sp, #20]
    7b30:	f7fb f8f0 	bl	2d14 <__aeabi_uidiv>
    7b34:	9a00      	ldr	r2, [sp, #0]
    7b36:	1c29      	adds	r1, r5, #0
    7b38:	4342      	muls	r2, r0
    7b3a:	4680      	mov	r8, r0
    7b3c:	9805      	ldr	r0, [sp, #20]
    7b3e:	4692      	mov	sl, r2
    7b40:	f7fb f92c 	bl	2d9c <__aeabi_uidivmod>
    7b44:	043f      	lsls	r7, r7, #16
    7b46:	040d      	lsls	r5, r1, #16
    7b48:	0c3a      	lsrs	r2, r7, #16
    7b4a:	432a      	orrs	r2, r5
    7b4c:	4592      	cmp	sl, r2
    7b4e:	d909      	bls.n	7b64 <__aeabi_ddiv+0x284>
    7b50:	2101      	movs	r1, #1
    7b52:	424b      	negs	r3, r1
    7b54:	1912      	adds	r2, r2, r4
    7b56:	4498      	add	r8, r3
    7b58:	4294      	cmp	r4, r2
    7b5a:	d803      	bhi.n	7b64 <__aeabi_ddiv+0x284>
    7b5c:	4592      	cmp	sl, r2
    7b5e:	d901      	bls.n	7b64 <__aeabi_ddiv+0x284>
    7b60:	4498      	add	r8, r3
    7b62:	1912      	adds	r2, r2, r4
    7b64:	9d02      	ldr	r5, [sp, #8]
    7b66:	4643      	mov	r3, r8
    7b68:	042f      	lsls	r7, r5, #16
    7b6a:	431f      	orrs	r7, r3
    7b6c:	4650      	mov	r0, sl
    7b6e:	1a11      	subs	r1, r2, r0
    7b70:	0438      	lsls	r0, r7, #16
    7b72:	0c03      	lsrs	r3, r0, #16
    7b74:	464d      	mov	r5, r9
    7b76:	435d      	muls	r5, r3
    7b78:	9803      	ldr	r0, [sp, #12]
    7b7a:	46ac      	mov	ip, r5
    7b7c:	9d03      	ldr	r5, [sp, #12]
    7b7e:	0c3a      	lsrs	r2, r7, #16
    7b80:	4358      	muls	r0, r3
    7b82:	4355      	muls	r5, r2
    7b84:	464b      	mov	r3, r9
    7b86:	435a      	muls	r2, r3
    7b88:	44ac      	add	ip, r5
    7b8a:	0c03      	lsrs	r3, r0, #16
    7b8c:	4463      	add	r3, ip
    7b8e:	429d      	cmp	r5, r3
    7b90:	d902      	bls.n	7b98 <__aeabi_ddiv+0x2b8>
    7b92:	2580      	movs	r5, #128	; 0x80
    7b94:	026d      	lsls	r5, r5, #9
    7b96:	1952      	adds	r2, r2, r5
    7b98:	0c1d      	lsrs	r5, r3, #16
    7b9a:	0400      	lsls	r0, r0, #16
    7b9c:	1952      	adds	r2, r2, r5
    7b9e:	041b      	lsls	r3, r3, #16
    7ba0:	0c05      	lsrs	r5, r0, #16
    7ba2:	195b      	adds	r3, r3, r5
    7ba4:	4291      	cmp	r1, r2
    7ba6:	d200      	bcs.n	7baa <__aeabi_ddiv+0x2ca>
    7ba8:	e0e6      	b.n	7d78 <__aeabi_ddiv+0x498>
    7baa:	d100      	bne.n	7bae <__aeabi_ddiv+0x2ce>
    7bac:	e13d      	b.n	7e2a <__aeabi_ddiv+0x54a>
    7bae:	2201      	movs	r2, #1
    7bb0:	4317      	orrs	r7, r2
    7bb2:	e05a      	b.n	7c6a <__aeabi_ddiv+0x38a>
    7bb4:	0089      	lsls	r1, r1, #2
    7bb6:	4823      	ldr	r0, [pc, #140]	; (7c44 <__aeabi_ddiv+0x364>)
    7bb8:	468c      	mov	ip, r1
    7bba:	4460      	add	r0, ip
    7bbc:	6801      	ldr	r1, [r0, #0]
    7bbe:	468f      	mov	pc, r1
    7bc0:	9b01      	ldr	r3, [sp, #4]
    7bc2:	4a1e      	ldr	r2, [pc, #120]	; (7c3c <__aeabi_ddiv+0x35c>)
    7bc4:	2600      	movs	r6, #0
    7bc6:	2700      	movs	r7, #0
    7bc8:	2000      	movs	r0, #0
    7bca:	2100      	movs	r1, #0
    7bcc:	1c38      	adds	r0, r7, #0
    7bce:	0d0f      	lsrs	r7, r1, #20
    7bd0:	053c      	lsls	r4, r7, #20
    7bd2:	4d1d      	ldr	r5, [pc, #116]	; (7c48 <__aeabi_ddiv+0x368>)
    7bd4:	4334      	orrs	r4, r6
    7bd6:	0512      	lsls	r2, r2, #20
    7bd8:	4025      	ands	r5, r4
    7bda:	4315      	orrs	r5, r2
    7bdc:	006e      	lsls	r6, r5, #1
    7bde:	07db      	lsls	r3, r3, #31
    7be0:	0871      	lsrs	r1, r6, #1
    7be2:	4319      	orrs	r1, r3
    7be4:	b007      	add	sp, #28
    7be6:	bc3c      	pop	{r2, r3, r4, r5}
    7be8:	4690      	mov	r8, r2
    7bea:	4699      	mov	r9, r3
    7bec:	46a2      	mov	sl, r4
    7bee:	46ab      	mov	fp, r5
    7bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bf2:	1c21      	adds	r1, r4, #0
    7bf4:	2003      	movs	r0, #3
    7bf6:	4329      	orrs	r1, r5
    7bf8:	9002      	str	r0, [sp, #8]
    7bfa:	d000      	beq.n	7bfe <__aeabi_ddiv+0x31e>
    7bfc:	e6f0      	b.n	79e0 <__aeabi_ddiv+0x100>
    7bfe:	2302      	movs	r3, #2
    7c00:	2400      	movs	r4, #0
    7c02:	2500      	movs	r5, #0
    7c04:	9302      	str	r3, [sp, #8]
    7c06:	e6eb      	b.n	79e0 <__aeabi_ddiv+0x100>
    7c08:	200c      	movs	r0, #12
    7c0a:	2103      	movs	r1, #3
    7c0c:	4682      	mov	sl, r0
    7c0e:	9100      	str	r1, [sp, #0]
    7c10:	e6a7      	b.n	7962 <__aeabi_ddiv+0x82>
    7c12:	2704      	movs	r7, #4
    7c14:	2301      	movs	r3, #1
    7c16:	46ba      	mov	sl, r7
    7c18:	2600      	movs	r6, #0
    7c1a:	2700      	movs	r7, #0
    7c1c:	9300      	str	r3, [sp, #0]
    7c1e:	e6a0      	b.n	7962 <__aeabi_ddiv+0x82>
    7c20:	2101      	movs	r1, #1
    7c22:	2400      	movs	r4, #0
    7c24:	2500      	movs	r5, #0
    7c26:	9102      	str	r1, [sp, #8]
    7c28:	e6da      	b.n	79e0 <__aeabi_ddiv+0x100>
    7c2a:	2701      	movs	r7, #1
    7c2c:	2300      	movs	r3, #0
    7c2e:	4e07      	ldr	r6, [pc, #28]	; (7c4c <__aeabi_ddiv+0x36c>)
    7c30:	427f      	negs	r7, r7
    7c32:	4a02      	ldr	r2, [pc, #8]	; (7c3c <__aeabi_ddiv+0x35c>)
    7c34:	e7c8      	b.n	7bc8 <__aeabi_ddiv+0x2e8>
    7c36:	46c0      	nop			; (mov r8, r8)
    7c38:	fffffc0d 	.word	0xfffffc0d
    7c3c:	000007ff 	.word	0x000007ff
    7c40:	fffffc01 	.word	0xfffffc01
    7c44:	00009cd0 	.word	0x00009cd0
    7c48:	800fffff 	.word	0x800fffff
    7c4c:	000fffff 	.word	0x000fffff
    7c50:	1c2f      	adds	r7, r5, #0
    7c52:	465a      	mov	r2, fp
    7c54:	9d02      	ldr	r5, [sp, #8]
    7c56:	1c26      	adds	r6, r4, #0
    7c58:	9201      	str	r2, [sp, #4]
    7c5a:	2d02      	cmp	r5, #2
    7c5c:	d0b0      	beq.n	7bc0 <__aeabi_ddiv+0x2e0>
    7c5e:	2d03      	cmp	r5, #3
    7c60:	d100      	bne.n	7c64 <__aeabi_ddiv+0x384>
    7c62:	e101      	b.n	7e68 <__aeabi_ddiv+0x588>
    7c64:	2d01      	cmp	r5, #1
    7c66:	d100      	bne.n	7c6a <__aeabi_ddiv+0x38a>
    7c68:	e09c      	b.n	7da4 <__aeabi_ddiv+0x4c4>
    7c6a:	9b04      	ldr	r3, [sp, #16]
    7c6c:	4882      	ldr	r0, [pc, #520]	; (7e78 <__aeabi_ddiv+0x598>)
    7c6e:	181a      	adds	r2, r3, r0
    7c70:	2a00      	cmp	r2, #0
    7c72:	dc00      	bgt.n	7c76 <__aeabi_ddiv+0x396>
    7c74:	e08c      	b.n	7d90 <__aeabi_ddiv+0x4b0>
    7c76:	240f      	movs	r4, #15
    7c78:	403c      	ands	r4, r7
    7c7a:	2c04      	cmp	r4, #4
    7c7c:	d005      	beq.n	7c8a <__aeabi_ddiv+0x3aa>
    7c7e:	1d3b      	adds	r3, r7, #4
    7c80:	42bb      	cmp	r3, r7
    7c82:	41bf      	sbcs	r7, r7
    7c84:	427d      	negs	r5, r7
    7c86:	1976      	adds	r6, r6, r5
    7c88:	1c1f      	adds	r7, r3, #0
    7c8a:	01f1      	lsls	r1, r6, #7
    7c8c:	d505      	bpl.n	7c9a <__aeabi_ddiv+0x3ba>
    7c8e:	4a7b      	ldr	r2, [pc, #492]	; (7e7c <__aeabi_ddiv+0x59c>)
    7c90:	9904      	ldr	r1, [sp, #16]
    7c92:	2080      	movs	r0, #128	; 0x80
    7c94:	00c4      	lsls	r4, r0, #3
    7c96:	4016      	ands	r6, r2
    7c98:	190a      	adds	r2, r1, r4
    7c9a:	4b79      	ldr	r3, [pc, #484]	; (7e80 <__aeabi_ddiv+0x5a0>)
    7c9c:	429a      	cmp	r2, r3
    7c9e:	dd00      	ble.n	7ca2 <__aeabi_ddiv+0x3c2>
    7ca0:	e78e      	b.n	7bc0 <__aeabi_ddiv+0x2e0>
    7ca2:	0775      	lsls	r5, r6, #29
    7ca4:	08ff      	lsrs	r7, r7, #3
    7ca6:	0276      	lsls	r6, r6, #9
    7ca8:	0551      	lsls	r1, r2, #21
    7caa:	432f      	orrs	r7, r5
    7cac:	0b36      	lsrs	r6, r6, #12
    7cae:	0d4a      	lsrs	r2, r1, #21
    7cb0:	9b01      	ldr	r3, [sp, #4]
    7cb2:	e789      	b.n	7bc8 <__aeabi_ddiv+0x2e8>
    7cb4:	2200      	movs	r2, #0
    7cb6:	2600      	movs	r6, #0
    7cb8:	2700      	movs	r7, #0
    7cba:	e785      	b.n	7bc8 <__aeabi_ddiv+0x2e8>
    7cbc:	2080      	movs	r0, #128	; 0x80
    7cbe:	0301      	lsls	r1, r0, #12
    7cc0:	420e      	tst	r6, r1
    7cc2:	d016      	beq.n	7cf2 <__aeabi_ddiv+0x412>
    7cc4:	420c      	tst	r4, r1
    7cc6:	d114      	bne.n	7cf2 <__aeabi_ddiv+0x412>
    7cc8:	430c      	orrs	r4, r1
    7cca:	0326      	lsls	r6, r4, #12
    7ccc:	0b36      	lsrs	r6, r6, #12
    7cce:	465b      	mov	r3, fp
    7cd0:	1c2f      	adds	r7, r5, #0
    7cd2:	4a6c      	ldr	r2, [pc, #432]	; (7e84 <__aeabi_ddiv+0x5a4>)
    7cd4:	e778      	b.n	7bc8 <__aeabi_ddiv+0x2e8>
    7cd6:	464c      	mov	r4, r9
    7cd8:	9401      	str	r4, [sp, #4]
    7cda:	9d00      	ldr	r5, [sp, #0]
    7cdc:	e7bd      	b.n	7c5a <__aeabi_ddiv+0x37a>
    7cde:	42a6      	cmp	r6, r4
    7ce0:	d043      	beq.n	7d6a <__aeabi_ddiv+0x48a>
    7ce2:	9804      	ldr	r0, [sp, #16]
    7ce4:	46b8      	mov	r8, r7
    7ce6:	3801      	subs	r0, #1
    7ce8:	2700      	movs	r7, #0
    7cea:	9004      	str	r0, [sp, #16]
    7cec:	46b1      	mov	r9, r6
    7cee:	9702      	str	r7, [sp, #8]
    7cf0:	e68e      	b.n	7a10 <__aeabi_ddiv+0x130>
    7cf2:	430e      	orrs	r6, r1
    7cf4:	0333      	lsls	r3, r6, #12
    7cf6:	0b1e      	lsrs	r6, r3, #12
    7cf8:	4a62      	ldr	r2, [pc, #392]	; (7e84 <__aeabi_ddiv+0x5a4>)
    7cfa:	464b      	mov	r3, r9
    7cfc:	e764      	b.n	7bc8 <__aeabi_ddiv+0x2e8>
    7cfe:	1c04      	adds	r4, r0, #0
    7d00:	3c28      	subs	r4, #40	; 0x28
    7d02:	40a5      	lsls	r5, r4
    7d04:	1c2c      	adds	r4, r5, #0
    7d06:	2500      	movs	r5, #0
    7d08:	e64b      	b.n	79a2 <__aeabi_ddiv+0xc2>
    7d0a:	f7fb fc7d 	bl	3608 <__clzsi2>
    7d0e:	3020      	adds	r0, #32
    7d10:	e63b      	b.n	798a <__aeabi_ddiv+0xaa>
    7d12:	1c06      	adds	r6, r0, #0
    7d14:	3e28      	subs	r6, #40	; 0x28
    7d16:	40b7      	lsls	r7, r6
    7d18:	1c3e      	adds	r6, r7, #0
    7d1a:	2700      	movs	r7, #0
    7d1c:	e609      	b.n	7932 <__aeabi_ddiv+0x52>
    7d1e:	f7fb fc73 	bl	3608 <__clzsi2>
    7d22:	3020      	adds	r0, #32
    7d24:	e5f9      	b.n	791a <__aeabi_ddiv+0x3a>
    7d26:	9a02      	ldr	r2, [sp, #8]
    7d28:	3e01      	subs	r6, #1
    7d2a:	1c11      	adds	r1, r2, #0
    7d2c:	4459      	add	r1, fp
    7d2e:	4559      	cmp	r1, fp
    7d30:	4192      	sbcs	r2, r2
    7d32:	4252      	negs	r2, r2
    7d34:	1912      	adds	r2, r2, r4
    7d36:	18d3      	adds	r3, r2, r3
    7d38:	429c      	cmp	r4, r3
    7d3a:	d204      	bcs.n	7d46 <__aeabi_ddiv+0x466>
    7d3c:	4298      	cmp	r0, r3
    7d3e:	d86b      	bhi.n	7e18 <__aeabi_ddiv+0x538>
    7d40:	d016      	beq.n	7d70 <__aeabi_ddiv+0x490>
    7d42:	1a1b      	subs	r3, r3, r0
    7d44:	e6cb      	b.n	7ade <__aeabi_ddiv+0x1fe>
    7d46:	42a3      	cmp	r3, r4
    7d48:	d1fb      	bne.n	7d42 <__aeabi_ddiv+0x462>
    7d4a:	458b      	cmp	fp, r1
    7d4c:	d9f6      	bls.n	7d3c <__aeabi_ddiv+0x45c>
    7d4e:	1a23      	subs	r3, r4, r0
    7d50:	e6c5      	b.n	7ade <__aeabi_ddiv+0x1fe>
    7d52:	4599      	cmp	r9, r3
    7d54:	d800      	bhi.n	7d58 <__aeabi_ddiv+0x478>
    7d56:	e697      	b.n	7a88 <__aeabi_ddiv+0x1a8>
    7d58:	3f01      	subs	r7, #1
    7d5a:	191b      	adds	r3, r3, r4
    7d5c:	e694      	b.n	7a88 <__aeabi_ddiv+0x1a8>
    7d5e:	9a02      	ldr	r2, [sp, #8]
    7d60:	42ba      	cmp	r2, r7
    7d62:	d3e0      	bcc.n	7d26 <__aeabi_ddiv+0x446>
    7d64:	9902      	ldr	r1, [sp, #8]
    7d66:	2300      	movs	r3, #0
    7d68:	e6b9      	b.n	7ade <__aeabi_ddiv+0x1fe>
    7d6a:	42af      	cmp	r7, r5
    7d6c:	d9b9      	bls.n	7ce2 <__aeabi_ddiv+0x402>
    7d6e:	e647      	b.n	7a00 <__aeabi_ddiv+0x120>
    7d70:	428f      	cmp	r7, r1
    7d72:	d851      	bhi.n	7e18 <__aeabi_ddiv+0x538>
    7d74:	2300      	movs	r3, #0
    7d76:	e6b2      	b.n	7ade <__aeabi_ddiv+0x1fe>
    7d78:	1909      	adds	r1, r1, r4
    7d7a:	3f01      	subs	r7, #1
    7d7c:	4658      	mov	r0, fp
    7d7e:	428c      	cmp	r4, r1
    7d80:	d919      	bls.n	7db6 <__aeabi_ddiv+0x4d6>
    7d82:	4291      	cmp	r1, r2
    7d84:	d000      	beq.n	7d88 <__aeabi_ddiv+0x4a8>
    7d86:	e712      	b.n	7bae <__aeabi_ddiv+0x2ce>
    7d88:	4298      	cmp	r0, r3
    7d8a:	d000      	beq.n	7d8e <__aeabi_ddiv+0x4ae>
    7d8c:	e70f      	b.n	7bae <__aeabi_ddiv+0x2ce>
    7d8e:	e76c      	b.n	7c6a <__aeabi_ddiv+0x38a>
    7d90:	4c3d      	ldr	r4, [pc, #244]	; (7e88 <__aeabi_ddiv+0x5a8>)
    7d92:	9d04      	ldr	r5, [sp, #16]
    7d94:	1b63      	subs	r3, r4, r5
    7d96:	2b38      	cmp	r3, #56	; 0x38
    7d98:	dd1c      	ble.n	7dd4 <__aeabi_ddiv+0x4f4>
    7d9a:	9b01      	ldr	r3, [sp, #4]
    7d9c:	2200      	movs	r2, #0
    7d9e:	2600      	movs	r6, #0
    7da0:	2700      	movs	r7, #0
    7da2:	e711      	b.n	7bc8 <__aeabi_ddiv+0x2e8>
    7da4:	9b01      	ldr	r3, [sp, #4]
    7da6:	2200      	movs	r2, #0
    7da8:	402b      	ands	r3, r5
    7daa:	2600      	movs	r6, #0
    7dac:	2700      	movs	r7, #0
    7dae:	e70b      	b.n	7bc8 <__aeabi_ddiv+0x2e8>
    7db0:	2701      	movs	r7, #1
    7db2:	427f      	negs	r7, r7
    7db4:	e759      	b.n	7c6a <__aeabi_ddiv+0x38a>
    7db6:	428a      	cmp	r2, r1
    7db8:	d803      	bhi.n	7dc2 <__aeabi_ddiv+0x4e2>
    7dba:	d000      	beq.n	7dbe <__aeabi_ddiv+0x4de>
    7dbc:	e6f7      	b.n	7bae <__aeabi_ddiv+0x2ce>
    7dbe:	4298      	cmp	r0, r3
    7dc0:	d2e2      	bcs.n	7d88 <__aeabi_ddiv+0x4a8>
    7dc2:	465d      	mov	r5, fp
    7dc4:	0068      	lsls	r0, r5, #1
    7dc6:	4558      	cmp	r0, fp
    7dc8:	41ad      	sbcs	r5, r5
    7dca:	426d      	negs	r5, r5
    7dcc:	192c      	adds	r4, r5, r4
    7dce:	3f01      	subs	r7, #1
    7dd0:	1909      	adds	r1, r1, r4
    7dd2:	e7d6      	b.n	7d82 <__aeabi_ddiv+0x4a2>
    7dd4:	2b1f      	cmp	r3, #31
    7dd6:	dc34      	bgt.n	7e42 <__aeabi_ddiv+0x562>
    7dd8:	9c04      	ldr	r4, [sp, #16]
    7dda:	4a2c      	ldr	r2, [pc, #176]	; (7e8c <__aeabi_ddiv+0x5ac>)
    7ddc:	1c38      	adds	r0, r7, #0
    7dde:	18a5      	adds	r5, r4, r2
    7de0:	1c31      	adds	r1, r6, #0
    7de2:	40af      	lsls	r7, r5
    7de4:	40d8      	lsrs	r0, r3
    7de6:	40a9      	lsls	r1, r5
    7de8:	1c3c      	adds	r4, r7, #0
    7dea:	4301      	orrs	r1, r0
    7dec:	1e67      	subs	r7, r4, #1
    7dee:	41bc      	sbcs	r4, r7
    7df0:	1c0f      	adds	r7, r1, #0
    7df2:	4327      	orrs	r7, r4
    7df4:	40de      	lsrs	r6, r3
    7df6:	230f      	movs	r3, #15
    7df8:	403b      	ands	r3, r7
    7dfa:	2b04      	cmp	r3, #4
    7dfc:	d005      	beq.n	7e0a <__aeabi_ddiv+0x52a>
    7dfe:	1d3a      	adds	r2, r7, #4
    7e00:	42ba      	cmp	r2, r7
    7e02:	41bf      	sbcs	r7, r7
    7e04:	427d      	negs	r5, r7
    7e06:	1976      	adds	r6, r6, r5
    7e08:	1c17      	adds	r7, r2, #0
    7e0a:	0232      	lsls	r2, r6, #8
    7e0c:	d511      	bpl.n	7e32 <__aeabi_ddiv+0x552>
    7e0e:	9b01      	ldr	r3, [sp, #4]
    7e10:	2201      	movs	r2, #1
    7e12:	2600      	movs	r6, #0
    7e14:	2700      	movs	r7, #0
    7e16:	e6d7      	b.n	7bc8 <__aeabi_ddiv+0x2e8>
    7e18:	4459      	add	r1, fp
    7e1a:	4559      	cmp	r1, fp
    7e1c:	4192      	sbcs	r2, r2
    7e1e:	4252      	negs	r2, r2
    7e20:	1912      	adds	r2, r2, r4
    7e22:	18d3      	adds	r3, r2, r3
    7e24:	3e01      	subs	r6, #1
    7e26:	1a1b      	subs	r3, r3, r0
    7e28:	e659      	b.n	7ade <__aeabi_ddiv+0x1fe>
    7e2a:	2b00      	cmp	r3, #0
    7e2c:	d1a4      	bne.n	7d78 <__aeabi_ddiv+0x498>
    7e2e:	2000      	movs	r0, #0
    7e30:	e7aa      	b.n	7d88 <__aeabi_ddiv+0x4a8>
    7e32:	0770      	lsls	r0, r6, #29
    7e34:	08ff      	lsrs	r7, r7, #3
    7e36:	0271      	lsls	r1, r6, #9
    7e38:	4307      	orrs	r7, r0
    7e3a:	0b0e      	lsrs	r6, r1, #12
    7e3c:	9b01      	ldr	r3, [sp, #4]
    7e3e:	2200      	movs	r2, #0
    7e40:	e6c2      	b.n	7bc8 <__aeabi_ddiv+0x2e8>
    7e42:	4913      	ldr	r1, [pc, #76]	; (7e90 <__aeabi_ddiv+0x5b0>)
    7e44:	9c04      	ldr	r4, [sp, #16]
    7e46:	1c30      	adds	r0, r6, #0
    7e48:	1b0a      	subs	r2, r1, r4
    7e4a:	40d0      	lsrs	r0, r2
    7e4c:	1c05      	adds	r5, r0, #0
    7e4e:	2b20      	cmp	r3, #32
    7e50:	d008      	beq.n	7e64 <__aeabi_ddiv+0x584>
    7e52:	4b10      	ldr	r3, [pc, #64]	; (7e94 <__aeabi_ddiv+0x5b4>)
    7e54:	18e1      	adds	r1, r4, r3
    7e56:	408e      	lsls	r6, r1
    7e58:	4337      	orrs	r7, r6
    7e5a:	1e7b      	subs	r3, r7, #1
    7e5c:	419f      	sbcs	r7, r3
    7e5e:	432f      	orrs	r7, r5
    7e60:	2600      	movs	r6, #0
    7e62:	e7c8      	b.n	7df6 <__aeabi_ddiv+0x516>
    7e64:	2600      	movs	r6, #0
    7e66:	e7f7      	b.n	7e58 <__aeabi_ddiv+0x578>
    7e68:	2280      	movs	r2, #128	; 0x80
    7e6a:	0310      	lsls	r0, r2, #12
    7e6c:	4306      	orrs	r6, r0
    7e6e:	0331      	lsls	r1, r6, #12
    7e70:	0b0e      	lsrs	r6, r1, #12
    7e72:	9b01      	ldr	r3, [sp, #4]
    7e74:	4a03      	ldr	r2, [pc, #12]	; (7e84 <__aeabi_ddiv+0x5a4>)
    7e76:	e6a7      	b.n	7bc8 <__aeabi_ddiv+0x2e8>
    7e78:	000003ff 	.word	0x000003ff
    7e7c:	feffffff 	.word	0xfeffffff
    7e80:	000007fe 	.word	0x000007fe
    7e84:	000007ff 	.word	0x000007ff
    7e88:	fffffc02 	.word	0xfffffc02
    7e8c:	0000041e 	.word	0x0000041e
    7e90:	fffffbe2 	.word	0xfffffbe2
    7e94:	0000043e 	.word	0x0000043e

00007e98 <__eqdf2>:
    7e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e9a:	4694      	mov	ip, r2
    7e9c:	4647      	mov	r7, r8
    7e9e:	031a      	lsls	r2, r3, #12
    7ea0:	1c06      	adds	r6, r0, #0
    7ea2:	0058      	lsls	r0, r3, #1
    7ea4:	b480      	push	{r7}
    7ea6:	0b17      	lsrs	r7, r2, #12
    7ea8:	0d42      	lsrs	r2, r0, #21
    7eaa:	4819      	ldr	r0, [pc, #100]	; (7f10 <__eqdf2+0x78>)
    7eac:	030d      	lsls	r5, r1, #12
    7eae:	004c      	lsls	r4, r1, #1
    7eb0:	0fdb      	lsrs	r3, r3, #31
    7eb2:	0b2d      	lsrs	r5, r5, #12
    7eb4:	0d64      	lsrs	r4, r4, #21
    7eb6:	0fc9      	lsrs	r1, r1, #31
    7eb8:	4698      	mov	r8, r3
    7eba:	4284      	cmp	r4, r0
    7ebc:	d008      	beq.n	7ed0 <__eqdf2+0x38>
    7ebe:	4814      	ldr	r0, [pc, #80]	; (7f10 <__eqdf2+0x78>)
    7ec0:	4282      	cmp	r2, r0
    7ec2:	d00d      	beq.n	7ee0 <__eqdf2+0x48>
    7ec4:	2001      	movs	r0, #1
    7ec6:	4294      	cmp	r4, r2
    7ec8:	d012      	beq.n	7ef0 <__eqdf2+0x58>
    7eca:	bc04      	pop	{r2}
    7ecc:	4690      	mov	r8, r2
    7ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ed0:	1c2b      	adds	r3, r5, #0
    7ed2:	4333      	orrs	r3, r6
    7ed4:	2001      	movs	r0, #1
    7ed6:	2b00      	cmp	r3, #0
    7ed8:	d1f7      	bne.n	7eca <__eqdf2+0x32>
    7eda:	480d      	ldr	r0, [pc, #52]	; (7f10 <__eqdf2+0x78>)
    7edc:	4282      	cmp	r2, r0
    7ede:	d1f1      	bne.n	7ec4 <__eqdf2+0x2c>
    7ee0:	4663      	mov	r3, ip
    7ee2:	433b      	orrs	r3, r7
    7ee4:	2001      	movs	r0, #1
    7ee6:	2b00      	cmp	r3, #0
    7ee8:	d1ef      	bne.n	7eca <__eqdf2+0x32>
    7eea:	2001      	movs	r0, #1
    7eec:	4294      	cmp	r4, r2
    7eee:	d1ec      	bne.n	7eca <__eqdf2+0x32>
    7ef0:	42bd      	cmp	r5, r7
    7ef2:	d1ea      	bne.n	7eca <__eqdf2+0x32>
    7ef4:	4566      	cmp	r6, ip
    7ef6:	d1e8      	bne.n	7eca <__eqdf2+0x32>
    7ef8:	4541      	cmp	r1, r8
    7efa:	d006      	beq.n	7f0a <__eqdf2+0x72>
    7efc:	2c00      	cmp	r4, #0
    7efe:	d1e4      	bne.n	7eca <__eqdf2+0x32>
    7f00:	1c28      	adds	r0, r5, #0
    7f02:	4330      	orrs	r0, r6
    7f04:	1e45      	subs	r5, r0, #1
    7f06:	41a8      	sbcs	r0, r5
    7f08:	e7df      	b.n	7eca <__eqdf2+0x32>
    7f0a:	2000      	movs	r0, #0
    7f0c:	e7dd      	b.n	7eca <__eqdf2+0x32>
    7f0e:	46c0      	nop			; (mov r8, r8)
    7f10:	000007ff 	.word	0x000007ff

00007f14 <__gedf2>:
    7f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f16:	4657      	mov	r7, sl
    7f18:	464e      	mov	r6, r9
    7f1a:	4645      	mov	r5, r8
    7f1c:	b4e0      	push	{r5, r6, r7}
    7f1e:	1c04      	adds	r4, r0, #0
    7f20:	004e      	lsls	r6, r1, #1
    7f22:	0308      	lsls	r0, r1, #12
    7f24:	0fc9      	lsrs	r1, r1, #31
    7f26:	468a      	mov	sl, r1
    7f28:	1c17      	adds	r7, r2, #0
    7f2a:	0059      	lsls	r1, r3, #1
    7f2c:	031a      	lsls	r2, r3, #12
    7f2e:	0b05      	lsrs	r5, r0, #12
    7f30:	0d70      	lsrs	r0, r6, #21
    7f32:	0b16      	lsrs	r6, r2, #12
    7f34:	0d4a      	lsrs	r2, r1, #21
    7f36:	4930      	ldr	r1, [pc, #192]	; (7ff8 <__gedf2+0xe4>)
    7f38:	0fdb      	lsrs	r3, r3, #31
    7f3a:	469c      	mov	ip, r3
    7f3c:	4288      	cmp	r0, r1
    7f3e:	d032      	beq.n	7fa6 <__gedf2+0x92>
    7f40:	492d      	ldr	r1, [pc, #180]	; (7ff8 <__gedf2+0xe4>)
    7f42:	428a      	cmp	r2, r1
    7f44:	d035      	beq.n	7fb2 <__gedf2+0x9e>
    7f46:	2800      	cmp	r0, #0
    7f48:	d10f      	bne.n	7f6a <__gedf2+0x56>
    7f4a:	1c29      	adds	r1, r5, #0
    7f4c:	4321      	orrs	r1, r4
    7f4e:	424b      	negs	r3, r1
    7f50:	414b      	adcs	r3, r1
    7f52:	4698      	mov	r8, r3
    7f54:	2a00      	cmp	r2, #0
    7f56:	d00b      	beq.n	7f70 <__gedf2+0x5c>
    7f58:	2b00      	cmp	r3, #0
    7f5a:	d11a      	bne.n	7f92 <__gedf2+0x7e>
    7f5c:	45e2      	cmp	sl, ip
    7f5e:	d02c      	beq.n	7fba <__gedf2+0xa6>
    7f60:	4655      	mov	r5, sl
    7f62:	2d00      	cmp	r5, #0
    7f64:	d118      	bne.n	7f98 <__gedf2+0x84>
    7f66:	2001      	movs	r0, #1
    7f68:	e018      	b.n	7f9c <__gedf2+0x88>
    7f6a:	2a00      	cmp	r2, #0
    7f6c:	d1f6      	bne.n	7f5c <__gedf2+0x48>
    7f6e:	4690      	mov	r8, r2
    7f70:	1c31      	adds	r1, r6, #0
    7f72:	4339      	orrs	r1, r7
    7f74:	424b      	negs	r3, r1
    7f76:	414b      	adcs	r3, r1
    7f78:	4641      	mov	r1, r8
    7f7a:	2900      	cmp	r1, #0
    7f7c:	d106      	bne.n	7f8c <__gedf2+0x78>
    7f7e:	2b00      	cmp	r3, #0
    7f80:	d0ec      	beq.n	7f5c <__gedf2+0x48>
    7f82:	4656      	mov	r6, sl
    7f84:	2001      	movs	r0, #1
    7f86:	2e00      	cmp	r6, #0
    7f88:	d008      	beq.n	7f9c <__gedf2+0x88>
    7f8a:	e005      	b.n	7f98 <__gedf2+0x84>
    7f8c:	2000      	movs	r0, #0
    7f8e:	2b00      	cmp	r3, #0
    7f90:	d104      	bne.n	7f9c <__gedf2+0x88>
    7f92:	4667      	mov	r7, ip
    7f94:	2f00      	cmp	r7, #0
    7f96:	d1e6      	bne.n	7f66 <__gedf2+0x52>
    7f98:	2301      	movs	r3, #1
    7f9a:	4258      	negs	r0, r3
    7f9c:	bc1c      	pop	{r2, r3, r4}
    7f9e:	4690      	mov	r8, r2
    7fa0:	4699      	mov	r9, r3
    7fa2:	46a2      	mov	sl, r4
    7fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7fa6:	1c2b      	adds	r3, r5, #0
    7fa8:	4323      	orrs	r3, r4
    7faa:	d0c9      	beq.n	7f40 <__gedf2+0x2c>
    7fac:	2102      	movs	r1, #2
    7fae:	4248      	negs	r0, r1
    7fb0:	e7f4      	b.n	7f9c <__gedf2+0x88>
    7fb2:	1c33      	adds	r3, r6, #0
    7fb4:	433b      	orrs	r3, r7
    7fb6:	d0c6      	beq.n	7f46 <__gedf2+0x32>
    7fb8:	e7f8      	b.n	7fac <__gedf2+0x98>
    7fba:	4290      	cmp	r0, r2
    7fbc:	dc05      	bgt.n	7fca <__gedf2+0xb6>
    7fbe:	da09      	bge.n	7fd4 <__gedf2+0xc0>
    7fc0:	4652      	mov	r2, sl
    7fc2:	2a00      	cmp	r2, #0
    7fc4:	d0e8      	beq.n	7f98 <__gedf2+0x84>
    7fc6:	2001      	movs	r0, #1
    7fc8:	e7e8      	b.n	7f9c <__gedf2+0x88>
    7fca:	4654      	mov	r4, sl
    7fcc:	2c00      	cmp	r4, #0
    7fce:	d1e3      	bne.n	7f98 <__gedf2+0x84>
    7fd0:	2001      	movs	r0, #1
    7fd2:	e7e3      	b.n	7f9c <__gedf2+0x88>
    7fd4:	42b5      	cmp	r5, r6
    7fd6:	d8c3      	bhi.n	7f60 <__gedf2+0x4c>
    7fd8:	d007      	beq.n	7fea <__gedf2+0xd6>
    7fda:	2000      	movs	r0, #0
    7fdc:	42b5      	cmp	r5, r6
    7fde:	d2dd      	bcs.n	7f9c <__gedf2+0x88>
    7fe0:	4650      	mov	r0, sl
    7fe2:	2800      	cmp	r0, #0
    7fe4:	d0d8      	beq.n	7f98 <__gedf2+0x84>
    7fe6:	2001      	movs	r0, #1
    7fe8:	e7d8      	b.n	7f9c <__gedf2+0x88>
    7fea:	42bc      	cmp	r4, r7
    7fec:	d8b8      	bhi.n	7f60 <__gedf2+0x4c>
    7fee:	2000      	movs	r0, #0
    7ff0:	42bc      	cmp	r4, r7
    7ff2:	d3f5      	bcc.n	7fe0 <__gedf2+0xcc>
    7ff4:	e7d2      	b.n	7f9c <__gedf2+0x88>
    7ff6:	46c0      	nop			; (mov r8, r8)
    7ff8:	000007ff 	.word	0x000007ff

00007ffc <__ledf2>:
    7ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ffe:	4644      	mov	r4, r8
    8000:	465f      	mov	r7, fp
    8002:	4656      	mov	r6, sl
    8004:	464d      	mov	r5, r9
    8006:	b4f0      	push	{r4, r5, r6, r7}
    8008:	4694      	mov	ip, r2
    800a:	1c06      	adds	r6, r0, #0
    800c:	031a      	lsls	r2, r3, #12
    800e:	0058      	lsls	r0, r3, #1
    8010:	0b17      	lsrs	r7, r2, #12
    8012:	0d42      	lsrs	r2, r0, #21
    8014:	482e      	ldr	r0, [pc, #184]	; (80d0 <__ledf2+0xd4>)
    8016:	030d      	lsls	r5, r1, #12
    8018:	004c      	lsls	r4, r1, #1
    801a:	0fdb      	lsrs	r3, r3, #31
    801c:	0b2d      	lsrs	r5, r5, #12
    801e:	0d64      	lsrs	r4, r4, #21
    8020:	0fc9      	lsrs	r1, r1, #31
    8022:	4698      	mov	r8, r3
    8024:	4284      	cmp	r4, r0
    8026:	d033      	beq.n	8090 <__ledf2+0x94>
    8028:	4829      	ldr	r0, [pc, #164]	; (80d0 <__ledf2+0xd4>)
    802a:	4282      	cmp	r2, r0
    802c:	d036      	beq.n	809c <__ledf2+0xa0>
    802e:	2c00      	cmp	r4, #0
    8030:	d019      	beq.n	8066 <__ledf2+0x6a>
    8032:	2a00      	cmp	r2, #0
    8034:	d120      	bne.n	8078 <__ledf2+0x7c>
    8036:	4693      	mov	fp, r2
    8038:	4663      	mov	r3, ip
    803a:	433b      	orrs	r3, r7
    803c:	4258      	negs	r0, r3
    803e:	4158      	adcs	r0, r3
    8040:	465b      	mov	r3, fp
    8042:	4682      	mov	sl, r0
    8044:	2b00      	cmp	r3, #0
    8046:	d01d      	beq.n	8084 <__ledf2+0x88>
    8048:	4651      	mov	r1, sl
    804a:	2000      	movs	r0, #0
    804c:	2900      	cmp	r1, #0
    804e:	d104      	bne.n	805a <__ledf2+0x5e>
    8050:	4642      	mov	r2, r8
    8052:	2a00      	cmp	r2, #0
    8054:	d114      	bne.n	8080 <__ledf2+0x84>
    8056:	2401      	movs	r4, #1
    8058:	4260      	negs	r0, r4
    805a:	bc3c      	pop	{r2, r3, r4, r5}
    805c:	4690      	mov	r8, r2
    805e:	4699      	mov	r9, r3
    8060:	46a2      	mov	sl, r4
    8062:	46ab      	mov	fp, r5
    8064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8066:	1c2b      	adds	r3, r5, #0
    8068:	4333      	orrs	r3, r6
    806a:	4258      	negs	r0, r3
    806c:	4143      	adcs	r3, r0
    806e:	469b      	mov	fp, r3
    8070:	2a00      	cmp	r2, #0
    8072:	d0e1      	beq.n	8038 <__ledf2+0x3c>
    8074:	2b00      	cmp	r3, #0
    8076:	d1eb      	bne.n	8050 <__ledf2+0x54>
    8078:	4541      	cmp	r1, r8
    807a:	d015      	beq.n	80a8 <__ledf2+0xac>
    807c:	2900      	cmp	r1, #0
    807e:	d1ea      	bne.n	8056 <__ledf2+0x5a>
    8080:	2001      	movs	r0, #1
    8082:	e7ea      	b.n	805a <__ledf2+0x5e>
    8084:	2800      	cmp	r0, #0
    8086:	d0f7      	beq.n	8078 <__ledf2+0x7c>
    8088:	2001      	movs	r0, #1
    808a:	2900      	cmp	r1, #0
    808c:	d0e5      	beq.n	805a <__ledf2+0x5e>
    808e:	e7e2      	b.n	8056 <__ledf2+0x5a>
    8090:	1c2b      	adds	r3, r5, #0
    8092:	4333      	orrs	r3, r6
    8094:	2002      	movs	r0, #2
    8096:	2b00      	cmp	r3, #0
    8098:	d1df      	bne.n	805a <__ledf2+0x5e>
    809a:	e7c5      	b.n	8028 <__ledf2+0x2c>
    809c:	4663      	mov	r3, ip
    809e:	433b      	orrs	r3, r7
    80a0:	2002      	movs	r0, #2
    80a2:	2b00      	cmp	r3, #0
    80a4:	d1d9      	bne.n	805a <__ledf2+0x5e>
    80a6:	e7c2      	b.n	802e <__ledf2+0x32>
    80a8:	4294      	cmp	r4, r2
    80aa:	dce7      	bgt.n	807c <__ledf2+0x80>
    80ac:	db05      	blt.n	80ba <__ledf2+0xbe>
    80ae:	42bd      	cmp	r5, r7
    80b0:	d8e4      	bhi.n	807c <__ledf2+0x80>
    80b2:	d006      	beq.n	80c2 <__ledf2+0xc6>
    80b4:	2000      	movs	r0, #0
    80b6:	42bd      	cmp	r5, r7
    80b8:	d2cf      	bcs.n	805a <__ledf2+0x5e>
    80ba:	2900      	cmp	r1, #0
    80bc:	d0cb      	beq.n	8056 <__ledf2+0x5a>
    80be:	2001      	movs	r0, #1
    80c0:	e7cb      	b.n	805a <__ledf2+0x5e>
    80c2:	4566      	cmp	r6, ip
    80c4:	d8da      	bhi.n	807c <__ledf2+0x80>
    80c6:	2000      	movs	r0, #0
    80c8:	4566      	cmp	r6, ip
    80ca:	d3f6      	bcc.n	80ba <__ledf2+0xbe>
    80cc:	e7c5      	b.n	805a <__ledf2+0x5e>
    80ce:	46c0      	nop			; (mov r8, r8)
    80d0:	000007ff 	.word	0x000007ff

000080d4 <__aeabi_dmul>:
    80d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    80d6:	4656      	mov	r6, sl
    80d8:	4644      	mov	r4, r8
    80da:	465f      	mov	r7, fp
    80dc:	464d      	mov	r5, r9
    80de:	b4f0      	push	{r4, r5, r6, r7}
    80e0:	004f      	lsls	r7, r1, #1
    80e2:	1c1d      	adds	r5, r3, #0
    80e4:	030b      	lsls	r3, r1, #12
    80e6:	1c14      	adds	r4, r2, #0
    80e8:	0b1a      	lsrs	r2, r3, #12
    80ea:	0d7b      	lsrs	r3, r7, #21
    80ec:	b087      	sub	sp, #28
    80ee:	1c06      	adds	r6, r0, #0
    80f0:	4692      	mov	sl, r2
    80f2:	4698      	mov	r8, r3
    80f4:	0fcf      	lsrs	r7, r1, #31
    80f6:	2b00      	cmp	r3, #0
    80f8:	d121      	bne.n	813e <__aeabi_dmul+0x6a>
    80fa:	4302      	orrs	r2, r0
    80fc:	d100      	bne.n	8100 <__aeabi_dmul+0x2c>
    80fe:	e149      	b.n	8394 <__aeabi_dmul+0x2c0>
    8100:	4653      	mov	r3, sl
    8102:	2b00      	cmp	r3, #0
    8104:	d100      	bne.n	8108 <__aeabi_dmul+0x34>
    8106:	e1e4      	b.n	84d2 <__aeabi_dmul+0x3fe>
    8108:	4650      	mov	r0, sl
    810a:	f7fb fa7d 	bl	3608 <__clzsi2>
    810e:	1e03      	subs	r3, r0, #0
    8110:	2b27      	cmp	r3, #39	; 0x27
    8112:	dd00      	ble.n	8116 <__aeabi_dmul+0x42>
    8114:	e1d8      	b.n	84c8 <__aeabi_dmul+0x3f4>
    8116:	3b08      	subs	r3, #8
    8118:	4651      	mov	r1, sl
    811a:	4099      	lsls	r1, r3
    811c:	2228      	movs	r2, #40	; 0x28
    811e:	4688      	mov	r8, r1
    8120:	1a11      	subs	r1, r2, r0
    8122:	1c32      	adds	r2, r6, #0
    8124:	40ca      	lsrs	r2, r1
    8126:	4641      	mov	r1, r8
    8128:	430a      	orrs	r2, r1
    812a:	4692      	mov	sl, r2
    812c:	409e      	lsls	r6, r3
    812e:	4bd8      	ldr	r3, [pc, #864]	; (8490 <__aeabi_dmul+0x3bc>)
    8130:	2200      	movs	r2, #0
    8132:	1a18      	subs	r0, r3, r0
    8134:	2100      	movs	r1, #0
    8136:	4680      	mov	r8, r0
    8138:	4691      	mov	r9, r2
    813a:	9103      	str	r1, [sp, #12]
    813c:	e011      	b.n	8162 <__aeabi_dmul+0x8e>
    813e:	48d5      	ldr	r0, [pc, #852]	; (8494 <__aeabi_dmul+0x3c0>)
    8140:	4283      	cmp	r3, r0
    8142:	d03e      	beq.n	81c2 <__aeabi_dmul+0xee>
    8144:	2180      	movs	r1, #128	; 0x80
    8146:	4653      	mov	r3, sl
    8148:	034a      	lsls	r2, r1, #13
    814a:	431a      	orrs	r2, r3
    814c:	00d0      	lsls	r0, r2, #3
    814e:	0f71      	lsrs	r1, r6, #29
    8150:	4308      	orrs	r0, r1
    8152:	4ad1      	ldr	r2, [pc, #836]	; (8498 <__aeabi_dmul+0x3c4>)
    8154:	4682      	mov	sl, r0
    8156:	2300      	movs	r3, #0
    8158:	2000      	movs	r0, #0
    815a:	00f6      	lsls	r6, r6, #3
    815c:	4490      	add	r8, r2
    815e:	4699      	mov	r9, r3
    8160:	9003      	str	r0, [sp, #12]
    8162:	1c29      	adds	r1, r5, #0
    8164:	1c20      	adds	r0, r4, #0
    8166:	1c25      	adds	r5, r4, #0
    8168:	004a      	lsls	r2, r1, #1
    816a:	030c      	lsls	r4, r1, #12
    816c:	0fcb      	lsrs	r3, r1, #31
    816e:	0b24      	lsrs	r4, r4, #12
    8170:	0d52      	lsrs	r2, r2, #21
    8172:	469b      	mov	fp, r3
    8174:	d131      	bne.n	81da <__aeabi_dmul+0x106>
    8176:	1c21      	adds	r1, r4, #0
    8178:	4301      	orrs	r1, r0
    817a:	d100      	bne.n	817e <__aeabi_dmul+0xaa>
    817c:	e112      	b.n	83a4 <__aeabi_dmul+0x2d0>
    817e:	2c00      	cmp	r4, #0
    8180:	d100      	bne.n	8184 <__aeabi_dmul+0xb0>
    8182:	e19d      	b.n	84c0 <__aeabi_dmul+0x3ec>
    8184:	1c20      	adds	r0, r4, #0
    8186:	f7fb fa3f 	bl	3608 <__clzsi2>
    818a:	2827      	cmp	r0, #39	; 0x27
    818c:	dd00      	ble.n	8190 <__aeabi_dmul+0xbc>
    818e:	e191      	b.n	84b4 <__aeabi_dmul+0x3e0>
    8190:	1c03      	adds	r3, r0, #0
    8192:	2228      	movs	r2, #40	; 0x28
    8194:	3b08      	subs	r3, #8
    8196:	1c29      	adds	r1, r5, #0
    8198:	1a12      	subs	r2, r2, r0
    819a:	409c      	lsls	r4, r3
    819c:	40d1      	lsrs	r1, r2
    819e:	430c      	orrs	r4, r1
    81a0:	409d      	lsls	r5, r3
    81a2:	4bbb      	ldr	r3, [pc, #748]	; (8490 <__aeabi_dmul+0x3bc>)
    81a4:	4659      	mov	r1, fp
    81a6:	1a1a      	subs	r2, r3, r0
    81a8:	4079      	eors	r1, r7
    81aa:	2000      	movs	r0, #0
    81ac:	464b      	mov	r3, r9
    81ae:	9101      	str	r1, [sp, #4]
    81b0:	4303      	orrs	r3, r0
    81b2:	2b0f      	cmp	r3, #15
    81b4:	d826      	bhi.n	8204 <__aeabi_dmul+0x130>
    81b6:	0099      	lsls	r1, r3, #2
    81b8:	4bb8      	ldr	r3, [pc, #736]	; (849c <__aeabi_dmul+0x3c8>)
    81ba:	468c      	mov	ip, r1
    81bc:	4463      	add	r3, ip
    81be:	6819      	ldr	r1, [r3, #0]
    81c0:	468f      	mov	pc, r1
    81c2:	1c11      	adds	r1, r2, #0
    81c4:	4331      	orrs	r1, r6
    81c6:	d000      	beq.n	81ca <__aeabi_dmul+0xf6>
    81c8:	e0df      	b.n	838a <__aeabi_dmul+0x2b6>
    81ca:	2608      	movs	r6, #8
    81cc:	2000      	movs	r0, #0
    81ce:	2102      	movs	r1, #2
    81d0:	46b1      	mov	r9, r6
    81d2:	4682      	mov	sl, r0
    81d4:	2600      	movs	r6, #0
    81d6:	9103      	str	r1, [sp, #12]
    81d8:	e7c3      	b.n	8162 <__aeabi_dmul+0x8e>
    81da:	48ae      	ldr	r0, [pc, #696]	; (8494 <__aeabi_dmul+0x3c0>)
    81dc:	4282      	cmp	r2, r0
    81de:	d100      	bne.n	81e2 <__aeabi_dmul+0x10e>
    81e0:	e0c9      	b.n	8376 <__aeabi_dmul+0x2a2>
    81e2:	2180      	movs	r1, #128	; 0x80
    81e4:	034b      	lsls	r3, r1, #13
    81e6:	431c      	orrs	r4, r3
    81e8:	49ab      	ldr	r1, [pc, #684]	; (8498 <__aeabi_dmul+0x3c4>)
    81ea:	0f68      	lsrs	r0, r5, #29
    81ec:	00e4      	lsls	r4, r4, #3
    81ee:	4304      	orrs	r4, r0
    81f0:	00ed      	lsls	r5, r5, #3
    81f2:	1852      	adds	r2, r2, r1
    81f4:	2000      	movs	r0, #0
    81f6:	4659      	mov	r1, fp
    81f8:	4079      	eors	r1, r7
    81fa:	464b      	mov	r3, r9
    81fc:	9101      	str	r1, [sp, #4]
    81fe:	4303      	orrs	r3, r0
    8200:	2b0f      	cmp	r3, #15
    8202:	d9d8      	bls.n	81b6 <__aeabi_dmul+0xe2>
    8204:	4442      	add	r2, r8
    8206:	0433      	lsls	r3, r6, #16
    8208:	0429      	lsls	r1, r5, #16
    820a:	9204      	str	r2, [sp, #16]
    820c:	0c1a      	lsrs	r2, r3, #16
    820e:	0c0f      	lsrs	r7, r1, #16
    8210:	1c10      	adds	r0, r2, #0
    8212:	4378      	muls	r0, r7
    8214:	0c36      	lsrs	r6, r6, #16
    8216:	1c33      	adds	r3, r6, #0
    8218:	4680      	mov	r8, r0
    821a:	0c2d      	lsrs	r5, r5, #16
    821c:	437b      	muls	r3, r7
    821e:	1c30      	adds	r0, r6, #0
    8220:	4368      	muls	r0, r5
    8222:	1c11      	adds	r1, r2, #0
    8224:	4369      	muls	r1, r5
    8226:	469c      	mov	ip, r3
    8228:	4643      	mov	r3, r8
    822a:	4683      	mov	fp, r0
    822c:	0c18      	lsrs	r0, r3, #16
    822e:	1808      	adds	r0, r1, r0
    8230:	4460      	add	r0, ip
    8232:	4584      	cmp	ip, r0
    8234:	d900      	bls.n	8238 <__aeabi_dmul+0x164>
    8236:	e11f      	b.n	8478 <__aeabi_dmul+0x3a4>
    8238:	0c01      	lsrs	r1, r0, #16
    823a:	4643      	mov	r3, r8
    823c:	9103      	str	r1, [sp, #12]
    823e:	0419      	lsls	r1, r3, #16
    8240:	0c0b      	lsrs	r3, r1, #16
    8242:	0400      	lsls	r0, r0, #16
    8244:	18c0      	adds	r0, r0, r3
    8246:	0421      	lsls	r1, r4, #16
    8248:	0c24      	lsrs	r4, r4, #16
    824a:	9005      	str	r0, [sp, #20]
    824c:	1c10      	adds	r0, r2, #0
    824e:	4362      	muls	r2, r4
    8250:	0c09      	lsrs	r1, r1, #16
    8252:	9202      	str	r2, [sp, #8]
    8254:	4348      	muls	r0, r1
    8256:	1c32      	adds	r2, r6, #0
    8258:	4366      	muls	r6, r4
    825a:	434a      	muls	r2, r1
    825c:	9b02      	ldr	r3, [sp, #8]
    825e:	46b1      	mov	r9, r6
    8260:	0c06      	lsrs	r6, r0, #16
    8262:	4690      	mov	r8, r2
    8264:	46b4      	mov	ip, r6
    8266:	1c1a      	adds	r2, r3, #0
    8268:	4462      	add	r2, ip
    826a:	4442      	add	r2, r8
    826c:	4590      	cmp	r8, r2
    826e:	d902      	bls.n	8276 <__aeabi_dmul+0x1a2>
    8270:	2680      	movs	r6, #128	; 0x80
    8272:	0273      	lsls	r3, r6, #9
    8274:	4499      	add	r9, r3
    8276:	0c16      	lsrs	r6, r2, #16
    8278:	46b0      	mov	r8, r6
    827a:	44c1      	add	r9, r8
    827c:	0400      	lsls	r0, r0, #16
    827e:	464b      	mov	r3, r9
    8280:	0c06      	lsrs	r6, r0, #16
    8282:	0412      	lsls	r2, r2, #16
    8284:	9302      	str	r3, [sp, #8]
    8286:	1993      	adds	r3, r2, r6
    8288:	4656      	mov	r6, sl
    828a:	0432      	lsls	r2, r6, #16
    828c:	0c10      	lsrs	r0, r2, #16
    828e:	1c02      	adds	r2, r0, #0
    8290:	436a      	muls	r2, r5
    8292:	469c      	mov	ip, r3
    8294:	1c03      	adds	r3, r0, #0
    8296:	437b      	muls	r3, r7
    8298:	4691      	mov	r9, r2
    829a:	0c32      	lsrs	r2, r6, #16
    829c:	4357      	muls	r7, r2
    829e:	4698      	mov	r8, r3
    82a0:	0c1b      	lsrs	r3, r3, #16
    82a2:	469a      	mov	sl, r3
    82a4:	44d1      	add	r9, sl
    82a6:	44b9      	add	r9, r7
    82a8:	4355      	muls	r5, r2
    82aa:	454f      	cmp	r7, r9
    82ac:	d902      	bls.n	82b4 <__aeabi_dmul+0x1e0>
    82ae:	2780      	movs	r7, #128	; 0x80
    82b0:	027e      	lsls	r6, r7, #9
    82b2:	19ad      	adds	r5, r5, r6
    82b4:	464b      	mov	r3, r9
    82b6:	0c1f      	lsrs	r7, r3, #16
    82b8:	4646      	mov	r6, r8
    82ba:	19ed      	adds	r5, r5, r7
    82bc:	041f      	lsls	r7, r3, #16
    82be:	0433      	lsls	r3, r6, #16
    82c0:	0c1e      	lsrs	r6, r3, #16
    82c2:	1c03      	adds	r3, r0, #0
    82c4:	434b      	muls	r3, r1
    82c6:	4360      	muls	r0, r4
    82c8:	4351      	muls	r1, r2
    82ca:	4354      	muls	r4, r2
    82cc:	0c1a      	lsrs	r2, r3, #16
    82ce:	1880      	adds	r0, r0, r2
    82d0:	46b0      	mov	r8, r6
    82d2:	1840      	adds	r0, r0, r1
    82d4:	4447      	add	r7, r8
    82d6:	469a      	mov	sl, r3
    82d8:	4281      	cmp	r1, r0
    82da:	d902      	bls.n	82e2 <__aeabi_dmul+0x20e>
    82dc:	2180      	movs	r1, #128	; 0x80
    82de:	024e      	lsls	r6, r1, #9
    82e0:	19a4      	adds	r4, r4, r6
    82e2:	9b03      	ldr	r3, [sp, #12]
    82e4:	1c1a      	adds	r2, r3, #0
    82e6:	4462      	add	r2, ip
    82e8:	445a      	add	r2, fp
    82ea:	4562      	cmp	r2, ip
    82ec:	4189      	sbcs	r1, r1
    82ee:	424e      	negs	r6, r1
    82f0:	4651      	mov	r1, sl
    82f2:	46b3      	mov	fp, r6
    82f4:	0403      	lsls	r3, r0, #16
    82f6:	040e      	lsls	r6, r1, #16
    82f8:	469c      	mov	ip, r3
    82fa:	9902      	ldr	r1, [sp, #8]
    82fc:	0c33      	lsrs	r3, r6, #16
    82fe:	4463      	add	r3, ip
    8300:	18ce      	adds	r6, r1, r3
    8302:	46b0      	mov	r8, r6
    8304:	46c2      	mov	sl, r8
    8306:	44da      	add	sl, fp
    8308:	19d2      	adds	r2, r2, r7
    830a:	42ba      	cmp	r2, r7
    830c:	41bf      	sbcs	r7, r7
    830e:	4651      	mov	r1, sl
    8310:	427b      	negs	r3, r7
    8312:	186f      	adds	r7, r5, r1
    8314:	18f9      	adds	r1, r7, r3
    8316:	4699      	mov	r9, r3
    8318:	45da      	cmp	sl, fp
    831a:	419b      	sbcs	r3, r3
    831c:	425e      	negs	r6, r3
    831e:	9b02      	ldr	r3, [sp, #8]
    8320:	46b3      	mov	fp, r6
    8322:	4598      	cmp	r8, r3
    8324:	41b6      	sbcs	r6, r6
    8326:	4276      	negs	r6, r6
    8328:	465b      	mov	r3, fp
    832a:	431e      	orrs	r6, r3
    832c:	0c00      	lsrs	r0, r0, #16
    832e:	4549      	cmp	r1, r9
    8330:	419b      	sbcs	r3, r3
    8332:	42af      	cmp	r7, r5
    8334:	41ad      	sbcs	r5, r5
    8336:	1836      	adds	r6, r6, r0
    8338:	426f      	negs	r7, r5
    833a:	4258      	negs	r0, r3
    833c:	4338      	orrs	r0, r7
    833e:	1836      	adds	r6, r6, r0
    8340:	9805      	ldr	r0, [sp, #20]
    8342:	1934      	adds	r4, r6, r4
    8344:	0256      	lsls	r6, r2, #9
    8346:	4306      	orrs	r6, r0
    8348:	0dcb      	lsrs	r3, r1, #23
    834a:	0264      	lsls	r4, r4, #9
    834c:	1e70      	subs	r0, r6, #1
    834e:	4186      	sbcs	r6, r0
    8350:	0dd2      	lsrs	r2, r2, #23
    8352:	4316      	orrs	r6, r2
    8354:	0249      	lsls	r1, r1, #9
    8356:	431c      	orrs	r4, r3
    8358:	430e      	orrs	r6, r1
    835a:	01e0      	lsls	r0, r4, #7
    835c:	d52f      	bpl.n	83be <__aeabi_dmul+0x2ea>
    835e:	2701      	movs	r7, #1
    8360:	9d04      	ldr	r5, [sp, #16]
    8362:	4037      	ands	r7, r6
    8364:	0873      	lsrs	r3, r6, #1
    8366:	1c3e      	adds	r6, r7, #0
    8368:	07e0      	lsls	r0, r4, #31
    836a:	3501      	adds	r5, #1
    836c:	431e      	orrs	r6, r3
    836e:	9504      	str	r5, [sp, #16]
    8370:	4306      	orrs	r6, r0
    8372:	0864      	lsrs	r4, r4, #1
    8374:	e023      	b.n	83be <__aeabi_dmul+0x2ea>
    8376:	1c23      	adds	r3, r4, #0
    8378:	432b      	orrs	r3, r5
    837a:	2003      	movs	r0, #3
    837c:	2b00      	cmp	r3, #0
    837e:	d000      	beq.n	8382 <__aeabi_dmul+0x2ae>
    8380:	e739      	b.n	81f6 <__aeabi_dmul+0x122>
    8382:	2400      	movs	r4, #0
    8384:	2500      	movs	r5, #0
    8386:	2002      	movs	r0, #2
    8388:	e735      	b.n	81f6 <__aeabi_dmul+0x122>
    838a:	220c      	movs	r2, #12
    838c:	2303      	movs	r3, #3
    838e:	4691      	mov	r9, r2
    8390:	9303      	str	r3, [sp, #12]
    8392:	e6e6      	b.n	8162 <__aeabi_dmul+0x8e>
    8394:	2604      	movs	r6, #4
    8396:	2300      	movs	r3, #0
    8398:	2001      	movs	r0, #1
    839a:	46b1      	mov	r9, r6
    839c:	469a      	mov	sl, r3
    839e:	2600      	movs	r6, #0
    83a0:	9003      	str	r0, [sp, #12]
    83a2:	e6de      	b.n	8162 <__aeabi_dmul+0x8e>
    83a4:	2400      	movs	r4, #0
    83a6:	2500      	movs	r5, #0
    83a8:	2001      	movs	r0, #1
    83aa:	e724      	b.n	81f6 <__aeabi_dmul+0x122>
    83ac:	9803      	ldr	r0, [sp, #12]
    83ae:	4654      	mov	r4, sl
    83b0:	2802      	cmp	r0, #2
    83b2:	d044      	beq.n	843e <__aeabi_dmul+0x36a>
    83b4:	2803      	cmp	r0, #3
    83b6:	d100      	bne.n	83ba <__aeabi_dmul+0x2e6>
    83b8:	e0ea      	b.n	8590 <__aeabi_dmul+0x4bc>
    83ba:	2801      	cmp	r0, #1
    83bc:	d060      	beq.n	8480 <__aeabi_dmul+0x3ac>
    83be:	9a04      	ldr	r2, [sp, #16]
    83c0:	4937      	ldr	r1, [pc, #220]	; (84a0 <__aeabi_dmul+0x3cc>)
    83c2:	1850      	adds	r0, r2, r1
    83c4:	2800      	cmp	r0, #0
    83c6:	dc00      	bgt.n	83ca <__aeabi_dmul+0x2f6>
    83c8:	e095      	b.n	84f6 <__aeabi_dmul+0x422>
    83ca:	270f      	movs	r7, #15
    83cc:	4037      	ands	r7, r6
    83ce:	2f04      	cmp	r7, #4
    83d0:	d005      	beq.n	83de <__aeabi_dmul+0x30a>
    83d2:	1d31      	adds	r1, r6, #4
    83d4:	42b1      	cmp	r1, r6
    83d6:	41b6      	sbcs	r6, r6
    83d8:	4275      	negs	r5, r6
    83da:	1964      	adds	r4, r4, r5
    83dc:	1c0e      	adds	r6, r1, #0
    83de:	01e1      	lsls	r1, r4, #7
    83e0:	d505      	bpl.n	83ee <__aeabi_dmul+0x31a>
    83e2:	4830      	ldr	r0, [pc, #192]	; (84a4 <__aeabi_dmul+0x3d0>)
    83e4:	9a04      	ldr	r2, [sp, #16]
    83e6:	2380      	movs	r3, #128	; 0x80
    83e8:	00df      	lsls	r7, r3, #3
    83ea:	4004      	ands	r4, r0
    83ec:	19d0      	adds	r0, r2, r7
    83ee:	492e      	ldr	r1, [pc, #184]	; (84a8 <__aeabi_dmul+0x3d4>)
    83f0:	4288      	cmp	r0, r1
    83f2:	dc24      	bgt.n	843e <__aeabi_dmul+0x36a>
    83f4:	9b01      	ldr	r3, [sp, #4]
    83f6:	0765      	lsls	r5, r4, #29
    83f8:	08f6      	lsrs	r6, r6, #3
    83fa:	0264      	lsls	r4, r4, #9
    83fc:	0542      	lsls	r2, r0, #21
    83fe:	2701      	movs	r7, #1
    8400:	432e      	orrs	r6, r5
    8402:	0b24      	lsrs	r4, r4, #12
    8404:	0d52      	lsrs	r2, r2, #21
    8406:	401f      	ands	r7, r3
    8408:	2000      	movs	r0, #0
    840a:	2100      	movs	r1, #0
    840c:	0d09      	lsrs	r1, r1, #20
    840e:	050d      	lsls	r5, r1, #20
    8410:	4325      	orrs	r5, r4
    8412:	4c26      	ldr	r4, [pc, #152]	; (84ac <__aeabi_dmul+0x3d8>)
    8414:	0512      	lsls	r2, r2, #20
    8416:	402c      	ands	r4, r5
    8418:	4314      	orrs	r4, r2
    841a:	0063      	lsls	r3, r4, #1
    841c:	1c30      	adds	r0, r6, #0
    841e:	085e      	lsrs	r6, r3, #1
    8420:	07ff      	lsls	r7, r7, #31
    8422:	1c31      	adds	r1, r6, #0
    8424:	4339      	orrs	r1, r7
    8426:	b007      	add	sp, #28
    8428:	bc3c      	pop	{r2, r3, r4, r5}
    842a:	4690      	mov	r8, r2
    842c:	4699      	mov	r9, r3
    842e:	46a2      	mov	sl, r4
    8430:	46ab      	mov	fp, r5
    8432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8434:	465a      	mov	r2, fp
    8436:	1c2e      	adds	r6, r5, #0
    8438:	9201      	str	r2, [sp, #4]
    843a:	2802      	cmp	r0, #2
    843c:	d1ba      	bne.n	83b4 <__aeabi_dmul+0x2e0>
    843e:	9e01      	ldr	r6, [sp, #4]
    8440:	2701      	movs	r7, #1
    8442:	4037      	ands	r7, r6
    8444:	4a13      	ldr	r2, [pc, #76]	; (8494 <__aeabi_dmul+0x3c0>)
    8446:	2400      	movs	r4, #0
    8448:	2600      	movs	r6, #0
    844a:	e7dd      	b.n	8408 <__aeabi_dmul+0x334>
    844c:	4654      	mov	r4, sl
    844e:	9701      	str	r7, [sp, #4]
    8450:	9803      	ldr	r0, [sp, #12]
    8452:	e7ad      	b.n	83b0 <__aeabi_dmul+0x2dc>
    8454:	2601      	movs	r6, #1
    8456:	2700      	movs	r7, #0
    8458:	4c15      	ldr	r4, [pc, #84]	; (84b0 <__aeabi_dmul+0x3dc>)
    845a:	4276      	negs	r6, r6
    845c:	4a0d      	ldr	r2, [pc, #52]	; (8494 <__aeabi_dmul+0x3c0>)
    845e:	e7d3      	b.n	8408 <__aeabi_dmul+0x334>
    8460:	1c2e      	adds	r6, r5, #0
    8462:	e7a5      	b.n	83b0 <__aeabi_dmul+0x2dc>
    8464:	2280      	movs	r2, #128	; 0x80
    8466:	0313      	lsls	r3, r2, #12
    8468:	4651      	mov	r1, sl
    846a:	4219      	tst	r1, r3
    846c:	d135      	bne.n	84da <__aeabi_dmul+0x406>
    846e:	430b      	orrs	r3, r1
    8470:	031d      	lsls	r5, r3, #12
    8472:	0b2c      	lsrs	r4, r5, #12
    8474:	4a07      	ldr	r2, [pc, #28]	; (8494 <__aeabi_dmul+0x3c0>)
    8476:	e7c7      	b.n	8408 <__aeabi_dmul+0x334>
    8478:	2180      	movs	r1, #128	; 0x80
    847a:	024b      	lsls	r3, r1, #9
    847c:	449b      	add	fp, r3
    847e:	e6db      	b.n	8238 <__aeabi_dmul+0x164>
    8480:	9b01      	ldr	r3, [sp, #4]
    8482:	2200      	movs	r2, #0
    8484:	4018      	ands	r0, r3
    8486:	b2c7      	uxtb	r7, r0
    8488:	2400      	movs	r4, #0
    848a:	2600      	movs	r6, #0
    848c:	e7bc      	b.n	8408 <__aeabi_dmul+0x334>
    848e:	46c0      	nop			; (mov r8, r8)
    8490:	fffffc0d 	.word	0xfffffc0d
    8494:	000007ff 	.word	0x000007ff
    8498:	fffffc01 	.word	0xfffffc01
    849c:	00009d10 	.word	0x00009d10
    84a0:	000003ff 	.word	0x000003ff
    84a4:	feffffff 	.word	0xfeffffff
    84a8:	000007fe 	.word	0x000007fe
    84ac:	800fffff 	.word	0x800fffff
    84b0:	000fffff 	.word	0x000fffff
    84b4:	1c04      	adds	r4, r0, #0
    84b6:	3c28      	subs	r4, #40	; 0x28
    84b8:	40a5      	lsls	r5, r4
    84ba:	1c2c      	adds	r4, r5, #0
    84bc:	2500      	movs	r5, #0
    84be:	e670      	b.n	81a2 <__aeabi_dmul+0xce>
    84c0:	f7fb f8a2 	bl	3608 <__clzsi2>
    84c4:	3020      	adds	r0, #32
    84c6:	e660      	b.n	818a <__aeabi_dmul+0xb6>
    84c8:	3b28      	subs	r3, #40	; 0x28
    84ca:	409e      	lsls	r6, r3
    84cc:	46b2      	mov	sl, r6
    84ce:	2600      	movs	r6, #0
    84d0:	e62d      	b.n	812e <__aeabi_dmul+0x5a>
    84d2:	f7fb f899 	bl	3608 <__clzsi2>
    84d6:	3020      	adds	r0, #32
    84d8:	e619      	b.n	810e <__aeabi_dmul+0x3a>
    84da:	421c      	tst	r4, r3
    84dc:	d106      	bne.n	84ec <__aeabi_dmul+0x418>
    84de:	431c      	orrs	r4, r3
    84e0:	0326      	lsls	r6, r4, #12
    84e2:	0b34      	lsrs	r4, r6, #12
    84e4:	465f      	mov	r7, fp
    84e6:	1c2e      	adds	r6, r5, #0
    84e8:	4a2e      	ldr	r2, [pc, #184]	; (85a4 <__aeabi_dmul+0x4d0>)
    84ea:	e78d      	b.n	8408 <__aeabi_dmul+0x334>
    84ec:	430b      	orrs	r3, r1
    84ee:	0318      	lsls	r0, r3, #12
    84f0:	0b04      	lsrs	r4, r0, #12
    84f2:	4a2c      	ldr	r2, [pc, #176]	; (85a4 <__aeabi_dmul+0x4d0>)
    84f4:	e788      	b.n	8408 <__aeabi_dmul+0x334>
    84f6:	4f2c      	ldr	r7, [pc, #176]	; (85a8 <__aeabi_dmul+0x4d4>)
    84f8:	9d04      	ldr	r5, [sp, #16]
    84fa:	1b7b      	subs	r3, r7, r5
    84fc:	2b38      	cmp	r3, #56	; 0x38
    84fe:	dd06      	ble.n	850e <__aeabi_dmul+0x43a>
    8500:	9e01      	ldr	r6, [sp, #4]
    8502:	2701      	movs	r7, #1
    8504:	4037      	ands	r7, r6
    8506:	2200      	movs	r2, #0
    8508:	2400      	movs	r4, #0
    850a:	2600      	movs	r6, #0
    850c:	e77c      	b.n	8408 <__aeabi_dmul+0x334>
    850e:	2b1f      	cmp	r3, #31
    8510:	dc21      	bgt.n	8556 <__aeabi_dmul+0x482>
    8512:	9a04      	ldr	r2, [sp, #16]
    8514:	4f25      	ldr	r7, [pc, #148]	; (85ac <__aeabi_dmul+0x4d8>)
    8516:	1c35      	adds	r5, r6, #0
    8518:	19d1      	adds	r1, r2, r7
    851a:	1c20      	adds	r0, r4, #0
    851c:	408e      	lsls	r6, r1
    851e:	40dd      	lsrs	r5, r3
    8520:	4088      	lsls	r0, r1
    8522:	1c32      	adds	r2, r6, #0
    8524:	4328      	orrs	r0, r5
    8526:	1e56      	subs	r6, r2, #1
    8528:	41b2      	sbcs	r2, r6
    852a:	1c06      	adds	r6, r0, #0
    852c:	4316      	orrs	r6, r2
    852e:	40dc      	lsrs	r4, r3
    8530:	230f      	movs	r3, #15
    8532:	4033      	ands	r3, r6
    8534:	2b04      	cmp	r3, #4
    8536:	d005      	beq.n	8544 <__aeabi_dmul+0x470>
    8538:	1d37      	adds	r7, r6, #4
    853a:	42b7      	cmp	r7, r6
    853c:	41b6      	sbcs	r6, r6
    853e:	4271      	negs	r1, r6
    8540:	1864      	adds	r4, r4, r1
    8542:	1c3e      	adds	r6, r7, #0
    8544:	0225      	lsls	r5, r4, #8
    8546:	d517      	bpl.n	8578 <__aeabi_dmul+0x4a4>
    8548:	9b01      	ldr	r3, [sp, #4]
    854a:	2701      	movs	r7, #1
    854c:	401f      	ands	r7, r3
    854e:	2201      	movs	r2, #1
    8550:	2400      	movs	r4, #0
    8552:	2600      	movs	r6, #0
    8554:	e758      	b.n	8408 <__aeabi_dmul+0x334>
    8556:	4816      	ldr	r0, [pc, #88]	; (85b0 <__aeabi_dmul+0x4dc>)
    8558:	9a04      	ldr	r2, [sp, #16]
    855a:	1c21      	adds	r1, r4, #0
    855c:	1a87      	subs	r7, r0, r2
    855e:	40f9      	lsrs	r1, r7
    8560:	1c0d      	adds	r5, r1, #0
    8562:	2b20      	cmp	r3, #32
    8564:	d012      	beq.n	858c <__aeabi_dmul+0x4b8>
    8566:	4b13      	ldr	r3, [pc, #76]	; (85b4 <__aeabi_dmul+0x4e0>)
    8568:	18d0      	adds	r0, r2, r3
    856a:	4084      	lsls	r4, r0
    856c:	4326      	orrs	r6, r4
    856e:	1e72      	subs	r2, r6, #1
    8570:	4196      	sbcs	r6, r2
    8572:	432e      	orrs	r6, r5
    8574:	2400      	movs	r4, #0
    8576:	e7db      	b.n	8530 <__aeabi_dmul+0x45c>
    8578:	9a01      	ldr	r2, [sp, #4]
    857a:	0765      	lsls	r5, r4, #29
    857c:	08f6      	lsrs	r6, r6, #3
    857e:	0260      	lsls	r0, r4, #9
    8580:	2701      	movs	r7, #1
    8582:	4017      	ands	r7, r2
    8584:	432e      	orrs	r6, r5
    8586:	0b04      	lsrs	r4, r0, #12
    8588:	2200      	movs	r2, #0
    858a:	e73d      	b.n	8408 <__aeabi_dmul+0x334>
    858c:	2400      	movs	r4, #0
    858e:	e7ed      	b.n	856c <__aeabi_dmul+0x498>
    8590:	2180      	movs	r1, #128	; 0x80
    8592:	030f      	lsls	r7, r1, #12
    8594:	433c      	orrs	r4, r7
    8596:	9801      	ldr	r0, [sp, #4]
    8598:	0324      	lsls	r4, r4, #12
    859a:	2701      	movs	r7, #1
    859c:	0b24      	lsrs	r4, r4, #12
    859e:	4007      	ands	r7, r0
    85a0:	4a00      	ldr	r2, [pc, #0]	; (85a4 <__aeabi_dmul+0x4d0>)
    85a2:	e731      	b.n	8408 <__aeabi_dmul+0x334>
    85a4:	000007ff 	.word	0x000007ff
    85a8:	fffffc02 	.word	0xfffffc02
    85ac:	0000041e 	.word	0x0000041e
    85b0:	fffffbe2 	.word	0xfffffbe2
    85b4:	0000043e 	.word	0x0000043e

000085b8 <__aeabi_dsub>:
    85b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    85ba:	4657      	mov	r7, sl
    85bc:	464e      	mov	r6, r9
    85be:	4645      	mov	r5, r8
    85c0:	b4e0      	push	{r5, r6, r7}
    85c2:	1c07      	adds	r7, r0, #0
    85c4:	030d      	lsls	r5, r1, #12
    85c6:	004e      	lsls	r6, r1, #1
    85c8:	0a68      	lsrs	r0, r5, #9
    85ca:	0fcc      	lsrs	r4, r1, #31
    85cc:	0f79      	lsrs	r1, r7, #29
    85ce:	4308      	orrs	r0, r1
    85d0:	4684      	mov	ip, r0
    85d2:	1c11      	adds	r1, r2, #0
    85d4:	0318      	lsls	r0, r3, #12
    85d6:	005a      	lsls	r2, r3, #1
    85d8:	00fd      	lsls	r5, r7, #3
    85da:	0a40      	lsrs	r0, r0, #9
    85dc:	0fdf      	lsrs	r7, r3, #31
    85de:	0f4b      	lsrs	r3, r1, #29
    85e0:	4318      	orrs	r0, r3
    85e2:	4bca      	ldr	r3, [pc, #808]	; (890c <__aeabi_dsub+0x354>)
    85e4:	00c9      	lsls	r1, r1, #3
    85e6:	0d76      	lsrs	r6, r6, #21
    85e8:	0d52      	lsrs	r2, r2, #21
    85ea:	468a      	mov	sl, r1
    85ec:	429a      	cmp	r2, r3
    85ee:	d100      	bne.n	85f2 <__aeabi_dsub+0x3a>
    85f0:	e0e0      	b.n	87b4 <__aeabi_dsub+0x1fc>
    85f2:	2301      	movs	r3, #1
    85f4:	405f      	eors	r7, r3
    85f6:	46b9      	mov	r9, r7
    85f8:	42bc      	cmp	r4, r7
    85fa:	d100      	bne.n	85fe <__aeabi_dsub+0x46>
    85fc:	e0a8      	b.n	8750 <__aeabi_dsub+0x198>
    85fe:	1ab7      	subs	r7, r6, r2
    8600:	2f00      	cmp	r7, #0
    8602:	dc00      	bgt.n	8606 <__aeabi_dsub+0x4e>
    8604:	e110      	b.n	8828 <__aeabi_dsub+0x270>
    8606:	2a00      	cmp	r2, #0
    8608:	d112      	bne.n	8630 <__aeabi_dsub+0x78>
    860a:	4652      	mov	r2, sl
    860c:	4302      	orrs	r2, r0
    860e:	d100      	bne.n	8612 <__aeabi_dsub+0x5a>
    8610:	e0d4      	b.n	87bc <__aeabi_dsub+0x204>
    8612:	3f01      	subs	r7, #1
    8614:	2f00      	cmp	r7, #0
    8616:	d000      	beq.n	861a <__aeabi_dsub+0x62>
    8618:	e160      	b.n	88dc <__aeabi_dsub+0x324>
    861a:	4651      	mov	r1, sl
    861c:	1a6f      	subs	r7, r5, r1
    861e:	42bd      	cmp	r5, r7
    8620:	41ad      	sbcs	r5, r5
    8622:	4662      	mov	r2, ip
    8624:	426b      	negs	r3, r5
    8626:	1a10      	subs	r0, r2, r0
    8628:	1c3d      	adds	r5, r7, #0
    862a:	1ac3      	subs	r3, r0, r3
    862c:	1c37      	adds	r7, r6, #0
    862e:	e024      	b.n	867a <__aeabi_dsub+0xc2>
    8630:	4ab6      	ldr	r2, [pc, #728]	; (890c <__aeabi_dsub+0x354>)
    8632:	4296      	cmp	r6, r2
    8634:	d100      	bne.n	8638 <__aeabi_dsub+0x80>
    8636:	e0e3      	b.n	8800 <__aeabi_dsub+0x248>
    8638:	2180      	movs	r1, #128	; 0x80
    863a:	040b      	lsls	r3, r1, #16
    863c:	4318      	orrs	r0, r3
    863e:	2f38      	cmp	r7, #56	; 0x38
    8640:	dd00      	ble.n	8644 <__aeabi_dsub+0x8c>
    8642:	e123      	b.n	888c <__aeabi_dsub+0x2d4>
    8644:	2f1f      	cmp	r7, #31
    8646:	dd00      	ble.n	864a <__aeabi_dsub+0x92>
    8648:	e166      	b.n	8918 <__aeabi_dsub+0x360>
    864a:	2120      	movs	r1, #32
    864c:	1bc9      	subs	r1, r1, r7
    864e:	1c02      	adds	r2, r0, #0
    8650:	4653      	mov	r3, sl
    8652:	408a      	lsls	r2, r1
    8654:	40fb      	lsrs	r3, r7
    8656:	431a      	orrs	r2, r3
    8658:	4653      	mov	r3, sl
    865a:	408b      	lsls	r3, r1
    865c:	1c19      	adds	r1, r3, #0
    865e:	1e4b      	subs	r3, r1, #1
    8660:	4199      	sbcs	r1, r3
    8662:	1c03      	adds	r3, r0, #0
    8664:	430a      	orrs	r2, r1
    8666:	40fb      	lsrs	r3, r7
    8668:	1aaa      	subs	r2, r5, r2
    866a:	4667      	mov	r7, ip
    866c:	4295      	cmp	r5, r2
    866e:	41ad      	sbcs	r5, r5
    8670:	1af8      	subs	r0, r7, r3
    8672:	426b      	negs	r3, r5
    8674:	1ac3      	subs	r3, r0, r3
    8676:	1c15      	adds	r5, r2, #0
    8678:	1c37      	adds	r7, r6, #0
    867a:	021a      	lsls	r2, r3, #8
    867c:	d400      	bmi.n	8680 <__aeabi_dsub+0xc8>
    867e:	e0c7      	b.n	8810 <__aeabi_dsub+0x258>
    8680:	025e      	lsls	r6, r3, #9
    8682:	0a71      	lsrs	r1, r6, #9
    8684:	4688      	mov	r8, r1
    8686:	4642      	mov	r2, r8
    8688:	2a00      	cmp	r2, #0
    868a:	d100      	bne.n	868e <__aeabi_dsub+0xd6>
    868c:	e0f0      	b.n	8870 <__aeabi_dsub+0x2b8>
    868e:	4640      	mov	r0, r8
    8690:	f7fa ffba 	bl	3608 <__clzsi2>
    8694:	1c02      	adds	r2, r0, #0
    8696:	3a08      	subs	r2, #8
    8698:	2a1f      	cmp	r2, #31
    869a:	dd00      	ble.n	869e <__aeabi_dsub+0xe6>
    869c:	e0f1      	b.n	8882 <__aeabi_dsub+0x2ca>
    869e:	2328      	movs	r3, #40	; 0x28
    86a0:	1a18      	subs	r0, r3, r0
    86a2:	1c2e      	adds	r6, r5, #0
    86a4:	4641      	mov	r1, r8
    86a6:	40c6      	lsrs	r6, r0
    86a8:	4091      	lsls	r1, r2
    86aa:	1c33      	adds	r3, r6, #0
    86ac:	430b      	orrs	r3, r1
    86ae:	4095      	lsls	r5, r2
    86b0:	4297      	cmp	r7, r2
    86b2:	dd00      	ble.n	86b6 <__aeabi_dsub+0xfe>
    86b4:	e0a9      	b.n	880a <__aeabi_dsub+0x252>
    86b6:	1bd0      	subs	r0, r2, r7
    86b8:	1c41      	adds	r1, r0, #1
    86ba:	291f      	cmp	r1, #31
    86bc:	dd00      	ble.n	86c0 <__aeabi_dsub+0x108>
    86be:	e112      	b.n	88e6 <__aeabi_dsub+0x32e>
    86c0:	271f      	movs	r7, #31
    86c2:	1a3a      	subs	r2, r7, r0
    86c4:	1c2e      	adds	r6, r5, #0
    86c6:	1c18      	adds	r0, r3, #0
    86c8:	40ce      	lsrs	r6, r1
    86ca:	4090      	lsls	r0, r2
    86cc:	4095      	lsls	r5, r2
    86ce:	4330      	orrs	r0, r6
    86d0:	1e6a      	subs	r2, r5, #1
    86d2:	4195      	sbcs	r5, r2
    86d4:	40cb      	lsrs	r3, r1
    86d6:	4305      	orrs	r5, r0
    86d8:	2101      	movs	r1, #1
    86da:	2700      	movs	r7, #0
    86dc:	260f      	movs	r6, #15
    86de:	402e      	ands	r6, r5
    86e0:	2e04      	cmp	r6, #4
    86e2:	d100      	bne.n	86e6 <__aeabi_dsub+0x12e>
    86e4:	e072      	b.n	87cc <__aeabi_dsub+0x214>
    86e6:	1d2e      	adds	r6, r5, #4
    86e8:	42ae      	cmp	r6, r5
    86ea:	41ad      	sbcs	r5, r5
    86ec:	4268      	negs	r0, r5
    86ee:	2280      	movs	r2, #128	; 0x80
    86f0:	181b      	adds	r3, r3, r0
    86f2:	2501      	movs	r5, #1
    86f4:	0410      	lsls	r0, r2, #16
    86f6:	4018      	ands	r0, r3
    86f8:	402c      	ands	r4, r5
    86fa:	2800      	cmp	r0, #0
    86fc:	d007      	beq.n	870e <__aeabi_dsub+0x156>
    86fe:	4f83      	ldr	r7, [pc, #524]	; (890c <__aeabi_dsub+0x354>)
    8700:	42b9      	cmp	r1, r7
    8702:	d100      	bne.n	8706 <__aeabi_dsub+0x14e>
    8704:	e0b0      	b.n	8868 <__aeabi_dsub+0x2b0>
    8706:	4a82      	ldr	r2, [pc, #520]	; (8910 <__aeabi_dsub+0x358>)
    8708:	1c0f      	adds	r7, r1, #0
    870a:	4013      	ands	r3, r2
    870c:	3101      	adds	r1, #1
    870e:	08f2      	lsrs	r2, r6, #3
    8710:	0549      	lsls	r1, r1, #21
    8712:	075e      	lsls	r6, r3, #29
    8714:	4332      	orrs	r2, r6
    8716:	08db      	lsrs	r3, r3, #3
    8718:	0d48      	lsrs	r0, r1, #21
    871a:	2801      	cmp	r0, #1
    871c:	dc00      	bgt.n	8720 <__aeabi_dsub+0x168>
    871e:	e079      	b.n	8814 <__aeabi_dsub+0x25c>
    8720:	031b      	lsls	r3, r3, #12
    8722:	0578      	lsls	r0, r7, #21
    8724:	0b1e      	lsrs	r6, r3, #12
    8726:	0d47      	lsrs	r7, r0, #21
    8728:	2000      	movs	r0, #0
    872a:	2100      	movs	r1, #0
    872c:	0d09      	lsrs	r1, r1, #20
    872e:	057d      	lsls	r5, r7, #21
    8730:	050b      	lsls	r3, r1, #20
    8732:	4f78      	ldr	r7, [pc, #480]	; (8914 <__aeabi_dsub+0x35c>)
    8734:	431e      	orrs	r6, r3
    8736:	1c10      	adds	r0, r2, #0
    8738:	4037      	ands	r7, r6
    873a:	086a      	lsrs	r2, r5, #1
    873c:	4317      	orrs	r7, r2
    873e:	007e      	lsls	r6, r7, #1
    8740:	0871      	lsrs	r1, r6, #1
    8742:	07e4      	lsls	r4, r4, #31
    8744:	4321      	orrs	r1, r4
    8746:	bc1c      	pop	{r2, r3, r4}
    8748:	4690      	mov	r8, r2
    874a:	4699      	mov	r9, r3
    874c:	46a2      	mov	sl, r4
    874e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8750:	1ab3      	subs	r3, r6, r2
    8752:	2b00      	cmp	r3, #0
    8754:	dc00      	bgt.n	8758 <__aeabi_dsub+0x1a0>
    8756:	e0a6      	b.n	88a6 <__aeabi_dsub+0x2ee>
    8758:	2a00      	cmp	r2, #0
    875a:	d03e      	beq.n	87da <__aeabi_dsub+0x222>
    875c:	4a6b      	ldr	r2, [pc, #428]	; (890c <__aeabi_dsub+0x354>)
    875e:	4296      	cmp	r6, r2
    8760:	d04e      	beq.n	8800 <__aeabi_dsub+0x248>
    8762:	2180      	movs	r1, #128	; 0x80
    8764:	040f      	lsls	r7, r1, #16
    8766:	4338      	orrs	r0, r7
    8768:	2b38      	cmp	r3, #56	; 0x38
    876a:	dc00      	bgt.n	876e <__aeabi_dsub+0x1b6>
    876c:	e118      	b.n	89a0 <__aeabi_dsub+0x3e8>
    876e:	4653      	mov	r3, sl
    8770:	4318      	orrs	r0, r3
    8772:	2700      	movs	r7, #0
    8774:	2200      	movs	r2, #0
    8776:	2800      	cmp	r0, #0
    8778:	d000      	beq.n	877c <__aeabi_dsub+0x1c4>
    877a:	2201      	movs	r2, #1
    877c:	1952      	adds	r2, r2, r5
    877e:	42aa      	cmp	r2, r5
    8780:	41ad      	sbcs	r5, r5
    8782:	4467      	add	r7, ip
    8784:	426b      	negs	r3, r5
    8786:	18fb      	adds	r3, r7, r3
    8788:	1c15      	adds	r5, r2, #0
    878a:	1c37      	adds	r7, r6, #0
    878c:	021e      	lsls	r6, r3, #8
    878e:	d53f      	bpl.n	8810 <__aeabi_dsub+0x258>
    8790:	485e      	ldr	r0, [pc, #376]	; (890c <__aeabi_dsub+0x354>)
    8792:	1c7e      	adds	r6, r7, #1
    8794:	4286      	cmp	r6, r0
    8796:	d100      	bne.n	879a <__aeabi_dsub+0x1e2>
    8798:	e17b      	b.n	8a92 <__aeabi_dsub+0x4da>
    879a:	495d      	ldr	r1, [pc, #372]	; (8910 <__aeabi_dsub+0x358>)
    879c:	2201      	movs	r2, #1
    879e:	402a      	ands	r2, r5
    87a0:	400b      	ands	r3, r1
    87a2:	0868      	lsrs	r0, r5, #1
    87a4:	1c15      	adds	r5, r2, #0
    87a6:	07d9      	lsls	r1, r3, #31
    87a8:	4305      	orrs	r5, r0
    87aa:	430d      	orrs	r5, r1
    87ac:	085b      	lsrs	r3, r3, #1
    87ae:	1cb9      	adds	r1, r7, #2
    87b0:	1c37      	adds	r7, r6, #0
    87b2:	e793      	b.n	86dc <__aeabi_dsub+0x124>
    87b4:	4301      	orrs	r1, r0
    87b6:	d100      	bne.n	87ba <__aeabi_dsub+0x202>
    87b8:	e71b      	b.n	85f2 <__aeabi_dsub+0x3a>
    87ba:	e71c      	b.n	85f6 <__aeabi_dsub+0x3e>
    87bc:	1c71      	adds	r1, r6, #1
    87be:	1c37      	adds	r7, r6, #0
    87c0:	260f      	movs	r6, #15
    87c2:	4663      	mov	r3, ip
    87c4:	402e      	ands	r6, r5
    87c6:	2e04      	cmp	r6, #4
    87c8:	d000      	beq.n	87cc <__aeabi_dsub+0x214>
    87ca:	e78c      	b.n	86e6 <__aeabi_dsub+0x12e>
    87cc:	2280      	movs	r2, #128	; 0x80
    87ce:	2601      	movs	r6, #1
    87d0:	0410      	lsls	r0, r2, #16
    87d2:	4034      	ands	r4, r6
    87d4:	4018      	ands	r0, r3
    87d6:	1c2e      	adds	r6, r5, #0
    87d8:	e78f      	b.n	86fa <__aeabi_dsub+0x142>
    87da:	4652      	mov	r2, sl
    87dc:	4302      	orrs	r2, r0
    87de:	d0ed      	beq.n	87bc <__aeabi_dsub+0x204>
    87e0:	3b01      	subs	r3, #1
    87e2:	2b00      	cmp	r3, #0
    87e4:	d109      	bne.n	87fa <__aeabi_dsub+0x242>
    87e6:	4657      	mov	r7, sl
    87e8:	1979      	adds	r1, r7, r5
    87ea:	42a9      	cmp	r1, r5
    87ec:	4192      	sbcs	r2, r2
    87ee:	4255      	negs	r5, r2
    87f0:	4460      	add	r0, ip
    87f2:	1943      	adds	r3, r0, r5
    87f4:	1c37      	adds	r7, r6, #0
    87f6:	1c0d      	adds	r5, r1, #0
    87f8:	e7c8      	b.n	878c <__aeabi_dsub+0x1d4>
    87fa:	4944      	ldr	r1, [pc, #272]	; (890c <__aeabi_dsub+0x354>)
    87fc:	428e      	cmp	r6, r1
    87fe:	d1b3      	bne.n	8768 <__aeabi_dsub+0x1b0>
    8800:	2080      	movs	r0, #128	; 0x80
    8802:	4663      	mov	r3, ip
    8804:	0101      	lsls	r1, r0, #4
    8806:	1c37      	adds	r7, r6, #0
    8808:	e768      	b.n	86dc <__aeabi_dsub+0x124>
    880a:	1abf      	subs	r7, r7, r2
    880c:	4a40      	ldr	r2, [pc, #256]	; (8910 <__aeabi_dsub+0x358>)
    880e:	4013      	ands	r3, r2
    8810:	1c79      	adds	r1, r7, #1
    8812:	e763      	b.n	86dc <__aeabi_dsub+0x124>
    8814:	1c15      	adds	r5, r2, #0
    8816:	431d      	orrs	r5, r3
    8818:	d100      	bne.n	881c <__aeabi_dsub+0x264>
    881a:	e221      	b.n	8c60 <__aeabi_dsub+0x6a8>
    881c:	2f00      	cmp	r7, #0
    881e:	d03e      	beq.n	889e <__aeabi_dsub+0x2e6>
    8820:	2680      	movs	r6, #128	; 0x80
    8822:	0331      	lsls	r1, r6, #12
    8824:	430b      	orrs	r3, r1
    8826:	e77b      	b.n	8720 <__aeabi_dsub+0x168>
    8828:	2f00      	cmp	r7, #0
    882a:	d000      	beq.n	882e <__aeabi_dsub+0x276>
    882c:	e086      	b.n	893c <__aeabi_dsub+0x384>
    882e:	1c72      	adds	r2, r6, #1
    8830:	0551      	lsls	r1, r2, #21
    8832:	0d4b      	lsrs	r3, r1, #21
    8834:	2b01      	cmp	r3, #1
    8836:	dc00      	bgt.n	883a <__aeabi_dsub+0x282>
    8838:	e0f0      	b.n	8a1c <__aeabi_dsub+0x464>
    883a:	4657      	mov	r7, sl
    883c:	1bea      	subs	r2, r5, r7
    883e:	4295      	cmp	r5, r2
    8840:	419b      	sbcs	r3, r3
    8842:	4667      	mov	r7, ip
    8844:	1a39      	subs	r1, r7, r0
    8846:	425b      	negs	r3, r3
    8848:	1ac9      	subs	r1, r1, r3
    884a:	4688      	mov	r8, r1
    884c:	020b      	lsls	r3, r1, #8
    884e:	d400      	bmi.n	8852 <__aeabi_dsub+0x29a>
    8850:	e09d      	b.n	898e <__aeabi_dsub+0x3d6>
    8852:	4654      	mov	r4, sl
    8854:	1b65      	subs	r5, r4, r5
    8856:	45aa      	cmp	sl, r5
    8858:	4192      	sbcs	r2, r2
    885a:	1bc0      	subs	r0, r0, r7
    885c:	4257      	negs	r7, r2
    885e:	1bc3      	subs	r3, r0, r7
    8860:	4698      	mov	r8, r3
    8862:	1c37      	adds	r7, r6, #0
    8864:	464c      	mov	r4, r9
    8866:	e70e      	b.n	8686 <__aeabi_dsub+0xce>
    8868:	1c0f      	adds	r7, r1, #0
    886a:	2600      	movs	r6, #0
    886c:	2200      	movs	r2, #0
    886e:	e75b      	b.n	8728 <__aeabi_dsub+0x170>
    8870:	1c28      	adds	r0, r5, #0
    8872:	f7fa fec9 	bl	3608 <__clzsi2>
    8876:	3020      	adds	r0, #32
    8878:	1c02      	adds	r2, r0, #0
    887a:	3a08      	subs	r2, #8
    887c:	2a1f      	cmp	r2, #31
    887e:	dc00      	bgt.n	8882 <__aeabi_dsub+0x2ca>
    8880:	e70d      	b.n	869e <__aeabi_dsub+0xe6>
    8882:	3828      	subs	r0, #40	; 0x28
    8884:	4085      	lsls	r5, r0
    8886:	1c2b      	adds	r3, r5, #0
    8888:	2500      	movs	r5, #0
    888a:	e711      	b.n	86b0 <__aeabi_dsub+0xf8>
    888c:	4657      	mov	r7, sl
    888e:	4338      	orrs	r0, r7
    8890:	2300      	movs	r3, #0
    8892:	2200      	movs	r2, #0
    8894:	2800      	cmp	r0, #0
    8896:	d100      	bne.n	889a <__aeabi_dsub+0x2e2>
    8898:	e6e6      	b.n	8668 <__aeabi_dsub+0xb0>
    889a:	2201      	movs	r2, #1
    889c:	e6e4      	b.n	8668 <__aeabi_dsub+0xb0>
    889e:	031d      	lsls	r5, r3, #12
    88a0:	0b2e      	lsrs	r6, r5, #12
    88a2:	2700      	movs	r7, #0
    88a4:	e740      	b.n	8728 <__aeabi_dsub+0x170>
    88a6:	2b00      	cmp	r3, #0
    88a8:	d000      	beq.n	88ac <__aeabi_dsub+0x2f4>
    88aa:	e0d9      	b.n	8a60 <__aeabi_dsub+0x4a8>
    88ac:	1c77      	adds	r7, r6, #1
    88ae:	0579      	lsls	r1, r7, #21
    88b0:	0d4a      	lsrs	r2, r1, #21
    88b2:	2a01      	cmp	r2, #1
    88b4:	dc00      	bgt.n	88b8 <__aeabi_dsub+0x300>
    88b6:	e095      	b.n	89e4 <__aeabi_dsub+0x42c>
    88b8:	4b14      	ldr	r3, [pc, #80]	; (890c <__aeabi_dsub+0x354>)
    88ba:	429f      	cmp	r7, r3
    88bc:	d100      	bne.n	88c0 <__aeabi_dsub+0x308>
    88be:	e0fe      	b.n	8abe <__aeabi_dsub+0x506>
    88c0:	4651      	mov	r1, sl
    88c2:	1949      	adds	r1, r1, r5
    88c4:	42a9      	cmp	r1, r5
    88c6:	41ad      	sbcs	r5, r5
    88c8:	4662      	mov	r2, ip
    88ca:	426b      	negs	r3, r5
    88cc:	1880      	adds	r0, r0, r2
    88ce:	18c2      	adds	r2, r0, r3
    88d0:	0849      	lsrs	r1, r1, #1
    88d2:	07d5      	lsls	r5, r2, #31
    88d4:	430d      	orrs	r5, r1
    88d6:	0853      	lsrs	r3, r2, #1
    88d8:	1cb1      	adds	r1, r6, #2
    88da:	e6ff      	b.n	86dc <__aeabi_dsub+0x124>
    88dc:	490b      	ldr	r1, [pc, #44]	; (890c <__aeabi_dsub+0x354>)
    88de:	428e      	cmp	r6, r1
    88e0:	d000      	beq.n	88e4 <__aeabi_dsub+0x32c>
    88e2:	e6ac      	b.n	863e <__aeabi_dsub+0x86>
    88e4:	e78c      	b.n	8800 <__aeabi_dsub+0x248>
    88e6:	1c06      	adds	r6, r0, #0
    88e8:	3e1f      	subs	r6, #31
    88ea:	1c1f      	adds	r7, r3, #0
    88ec:	40f7      	lsrs	r7, r6
    88ee:	1c3e      	adds	r6, r7, #0
    88f0:	2920      	cmp	r1, #32
    88f2:	d073      	beq.n	89dc <__aeabi_dsub+0x424>
    88f4:	223f      	movs	r2, #63	; 0x3f
    88f6:	1a10      	subs	r0, r2, r0
    88f8:	4083      	lsls	r3, r0
    88fa:	431d      	orrs	r5, r3
    88fc:	1e6b      	subs	r3, r5, #1
    88fe:	419d      	sbcs	r5, r3
    8900:	4335      	orrs	r5, r6
    8902:	2101      	movs	r1, #1
    8904:	2300      	movs	r3, #0
    8906:	2700      	movs	r7, #0
    8908:	e6e8      	b.n	86dc <__aeabi_dsub+0x124>
    890a:	46c0      	nop			; (mov r8, r8)
    890c:	000007ff 	.word	0x000007ff
    8910:	ff7fffff 	.word	0xff7fffff
    8914:	800fffff 	.word	0x800fffff
    8918:	1c3b      	adds	r3, r7, #0
    891a:	3b20      	subs	r3, #32
    891c:	1c01      	adds	r1, r0, #0
    891e:	40d9      	lsrs	r1, r3
    8920:	1c0b      	adds	r3, r1, #0
    8922:	2f20      	cmp	r7, #32
    8924:	d05c      	beq.n	89e0 <__aeabi_dsub+0x428>
    8926:	2240      	movs	r2, #64	; 0x40
    8928:	1bd7      	subs	r7, r2, r7
    892a:	40b8      	lsls	r0, r7
    892c:	1c02      	adds	r2, r0, #0
    892e:	4650      	mov	r0, sl
    8930:	4302      	orrs	r2, r0
    8932:	1e51      	subs	r1, r2, #1
    8934:	418a      	sbcs	r2, r1
    8936:	431a      	orrs	r2, r3
    8938:	2300      	movs	r3, #0
    893a:	e695      	b.n	8668 <__aeabi_dsub+0xb0>
    893c:	427f      	negs	r7, r7
    893e:	2e00      	cmp	r6, #0
    8940:	d040      	beq.n	89c4 <__aeabi_dsub+0x40c>
    8942:	4cca      	ldr	r4, [pc, #808]	; (8c6c <__aeabi_dsub+0x6b4>)
    8944:	42a2      	cmp	r2, r4
    8946:	d100      	bne.n	894a <__aeabi_dsub+0x392>
    8948:	e11f      	b.n	8b8a <__aeabi_dsub+0x5d2>
    894a:	2180      	movs	r1, #128	; 0x80
    894c:	4666      	mov	r6, ip
    894e:	040b      	lsls	r3, r1, #16
    8950:	431e      	orrs	r6, r3
    8952:	46b4      	mov	ip, r6
    8954:	2f38      	cmp	r7, #56	; 0x38
    8956:	dd00      	ble.n	895a <__aeabi_dsub+0x3a2>
    8958:	e0a9      	b.n	8aae <__aeabi_dsub+0x4f6>
    895a:	2f1f      	cmp	r7, #31
    895c:	dd00      	ble.n	8960 <__aeabi_dsub+0x3a8>
    895e:	e13d      	b.n	8bdc <__aeabi_dsub+0x624>
    8960:	2320      	movs	r3, #32
    8962:	1bde      	subs	r6, r3, r7
    8964:	1c29      	adds	r1, r5, #0
    8966:	4664      	mov	r4, ip
    8968:	40b4      	lsls	r4, r6
    896a:	40f9      	lsrs	r1, r7
    896c:	40b5      	lsls	r5, r6
    896e:	1e6b      	subs	r3, r5, #1
    8970:	419d      	sbcs	r5, r3
    8972:	4321      	orrs	r1, r4
    8974:	4663      	mov	r3, ip
    8976:	430d      	orrs	r5, r1
    8978:	40fb      	lsrs	r3, r7
    897a:	4657      	mov	r7, sl
    897c:	1b7d      	subs	r5, r7, r5
    897e:	1ac0      	subs	r0, r0, r3
    8980:	45aa      	cmp	sl, r5
    8982:	419b      	sbcs	r3, r3
    8984:	425f      	negs	r7, r3
    8986:	1bc3      	subs	r3, r0, r7
    8988:	464c      	mov	r4, r9
    898a:	1c17      	adds	r7, r2, #0
    898c:	e675      	b.n	867a <__aeabi_dsub+0xc2>
    898e:	1c0d      	adds	r5, r1, #0
    8990:	4315      	orrs	r5, r2
    8992:	d120      	bne.n	89d6 <__aeabi_dsub+0x41e>
    8994:	2400      	movs	r4, #0
    8996:	2101      	movs	r1, #1
    8998:	2300      	movs	r3, #0
    899a:	2604      	movs	r6, #4
    899c:	2700      	movs	r7, #0
    899e:	e6b6      	b.n	870e <__aeabi_dsub+0x156>
    89a0:	2b1f      	cmp	r3, #31
    89a2:	dc4a      	bgt.n	8a3a <__aeabi_dsub+0x482>
    89a4:	2120      	movs	r1, #32
    89a6:	1ac9      	subs	r1, r1, r3
    89a8:	1c07      	adds	r7, r0, #0
    89aa:	4652      	mov	r2, sl
    89ac:	408f      	lsls	r7, r1
    89ae:	40da      	lsrs	r2, r3
    89b0:	433a      	orrs	r2, r7
    89b2:	4657      	mov	r7, sl
    89b4:	408f      	lsls	r7, r1
    89b6:	1c39      	adds	r1, r7, #0
    89b8:	1e4f      	subs	r7, r1, #1
    89ba:	41b9      	sbcs	r1, r7
    89bc:	40d8      	lsrs	r0, r3
    89be:	430a      	orrs	r2, r1
    89c0:	1c07      	adds	r7, r0, #0
    89c2:	e6db      	b.n	877c <__aeabi_dsub+0x1c4>
    89c4:	4664      	mov	r4, ip
    89c6:	432c      	orrs	r4, r5
    89c8:	d169      	bne.n	8a9e <__aeabi_dsub+0x4e6>
    89ca:	1c51      	adds	r1, r2, #1
    89cc:	1c03      	adds	r3, r0, #0
    89ce:	4655      	mov	r5, sl
    89d0:	1c17      	adds	r7, r2, #0
    89d2:	464c      	mov	r4, r9
    89d4:	e682      	b.n	86dc <__aeabi_dsub+0x124>
    89d6:	1c15      	adds	r5, r2, #0
    89d8:	1c37      	adds	r7, r6, #0
    89da:	e654      	b.n	8686 <__aeabi_dsub+0xce>
    89dc:	2300      	movs	r3, #0
    89de:	e78c      	b.n	88fa <__aeabi_dsub+0x342>
    89e0:	2200      	movs	r2, #0
    89e2:	e7a4      	b.n	892e <__aeabi_dsub+0x376>
    89e4:	4667      	mov	r7, ip
    89e6:	432f      	orrs	r7, r5
    89e8:	2e00      	cmp	r6, #0
    89ea:	d000      	beq.n	89ee <__aeabi_dsub+0x436>
    89ec:	e0d4      	b.n	8b98 <__aeabi_dsub+0x5e0>
    89ee:	2f00      	cmp	r7, #0
    89f0:	d100      	bne.n	89f4 <__aeabi_dsub+0x43c>
    89f2:	e126      	b.n	8c42 <__aeabi_dsub+0x68a>
    89f4:	4653      	mov	r3, sl
    89f6:	4303      	orrs	r3, r0
    89f8:	d100      	bne.n	89fc <__aeabi_dsub+0x444>
    89fa:	e0e4      	b.n	8bc6 <__aeabi_dsub+0x60e>
    89fc:	4651      	mov	r1, sl
    89fe:	194f      	adds	r7, r1, r5
    8a00:	42af      	cmp	r7, r5
    8a02:	41ad      	sbcs	r5, r5
    8a04:	4460      	add	r0, ip
    8a06:	426e      	negs	r6, r5
    8a08:	1983      	adds	r3, r0, r6
    8a0a:	021e      	lsls	r6, r3, #8
    8a0c:	d400      	bmi.n	8a10 <__aeabi_dsub+0x458>
    8a0e:	e14e      	b.n	8cae <__aeabi_dsub+0x6f6>
    8a10:	4897      	ldr	r0, [pc, #604]	; (8c70 <__aeabi_dsub+0x6b8>)
    8a12:	1c3d      	adds	r5, r7, #0
    8a14:	4003      	ands	r3, r0
    8a16:	2102      	movs	r1, #2
    8a18:	2701      	movs	r7, #1
    8a1a:	e65f      	b.n	86dc <__aeabi_dsub+0x124>
    8a1c:	4661      	mov	r1, ip
    8a1e:	4329      	orrs	r1, r5
    8a20:	2e00      	cmp	r6, #0
    8a22:	d129      	bne.n	8a78 <__aeabi_dsub+0x4c0>
    8a24:	2900      	cmp	r1, #0
    8a26:	d176      	bne.n	8b16 <__aeabi_dsub+0x55e>
    8a28:	4651      	mov	r1, sl
    8a2a:	4301      	orrs	r1, r0
    8a2c:	d0b2      	beq.n	8994 <__aeabi_dsub+0x3dc>
    8a2e:	1c03      	adds	r3, r0, #0
    8a30:	4655      	mov	r5, sl
    8a32:	464c      	mov	r4, r9
    8a34:	2101      	movs	r1, #1
    8a36:	2700      	movs	r7, #0
    8a38:	e650      	b.n	86dc <__aeabi_dsub+0x124>
    8a3a:	1c1f      	adds	r7, r3, #0
    8a3c:	3f20      	subs	r7, #32
    8a3e:	1c01      	adds	r1, r0, #0
    8a40:	40f9      	lsrs	r1, r7
    8a42:	1c0f      	adds	r7, r1, #0
    8a44:	2b20      	cmp	r3, #32
    8a46:	d100      	bne.n	8a4a <__aeabi_dsub+0x492>
    8a48:	e0c6      	b.n	8bd8 <__aeabi_dsub+0x620>
    8a4a:	2240      	movs	r2, #64	; 0x40
    8a4c:	1ad3      	subs	r3, r2, r3
    8a4e:	4098      	lsls	r0, r3
    8a50:	1c02      	adds	r2, r0, #0
    8a52:	4650      	mov	r0, sl
    8a54:	4302      	orrs	r2, r0
    8a56:	1e53      	subs	r3, r2, #1
    8a58:	419a      	sbcs	r2, r3
    8a5a:	433a      	orrs	r2, r7
    8a5c:	2700      	movs	r7, #0
    8a5e:	e68d      	b.n	877c <__aeabi_dsub+0x1c4>
    8a60:	425b      	negs	r3, r3
    8a62:	2e00      	cmp	r6, #0
    8a64:	d130      	bne.n	8ac8 <__aeabi_dsub+0x510>
    8a66:	4667      	mov	r7, ip
    8a68:	432f      	orrs	r7, r5
    8a6a:	d000      	beq.n	8a6e <__aeabi_dsub+0x4b6>
    8a6c:	e0c8      	b.n	8c00 <__aeabi_dsub+0x648>
    8a6e:	1c51      	adds	r1, r2, #1
    8a70:	1c03      	adds	r3, r0, #0
    8a72:	4655      	mov	r5, sl
    8a74:	1c17      	adds	r7, r2, #0
    8a76:	e631      	b.n	86dc <__aeabi_dsub+0x124>
    8a78:	2900      	cmp	r1, #0
    8a7a:	d165      	bne.n	8b48 <__aeabi_dsub+0x590>
    8a7c:	4657      	mov	r7, sl
    8a7e:	4307      	orrs	r7, r0
    8a80:	d100      	bne.n	8a84 <__aeabi_dsub+0x4cc>
    8a82:	e0c8      	b.n	8c16 <__aeabi_dsub+0x65e>
    8a84:	1c03      	adds	r3, r0, #0
    8a86:	2080      	movs	r0, #128	; 0x80
    8a88:	4655      	mov	r5, sl
    8a8a:	464c      	mov	r4, r9
    8a8c:	0101      	lsls	r1, r0, #4
    8a8e:	4f77      	ldr	r7, [pc, #476]	; (8c6c <__aeabi_dsub+0x6b4>)
    8a90:	e624      	b.n	86dc <__aeabi_dsub+0x124>
    8a92:	2380      	movs	r3, #128	; 0x80
    8a94:	1c37      	adds	r7, r6, #0
    8a96:	0119      	lsls	r1, r3, #4
    8a98:	2604      	movs	r6, #4
    8a9a:	2300      	movs	r3, #0
    8a9c:	e637      	b.n	870e <__aeabi_dsub+0x156>
    8a9e:	3f01      	subs	r7, #1
    8aa0:	2f00      	cmp	r7, #0
    8aa2:	d16e      	bne.n	8b82 <__aeabi_dsub+0x5ca>
    8aa4:	4654      	mov	r4, sl
    8aa6:	4661      	mov	r1, ip
    8aa8:	1b65      	subs	r5, r4, r5
    8aaa:	1a40      	subs	r0, r0, r1
    8aac:	e768      	b.n	8980 <__aeabi_dsub+0x3c8>
    8aae:	4667      	mov	r7, ip
    8ab0:	433d      	orrs	r5, r7
    8ab2:	2300      	movs	r3, #0
    8ab4:	2d00      	cmp	r5, #0
    8ab6:	d100      	bne.n	8aba <__aeabi_dsub+0x502>
    8ab8:	e75f      	b.n	897a <__aeabi_dsub+0x3c2>
    8aba:	2501      	movs	r5, #1
    8abc:	e75d      	b.n	897a <__aeabi_dsub+0x3c2>
    8abe:	2680      	movs	r6, #128	; 0x80
    8ac0:	0131      	lsls	r1, r6, #4
    8ac2:	2300      	movs	r3, #0
    8ac4:	2604      	movs	r6, #4
    8ac6:	e622      	b.n	870e <__aeabi_dsub+0x156>
    8ac8:	4968      	ldr	r1, [pc, #416]	; (8c6c <__aeabi_dsub+0x6b4>)
    8aca:	428a      	cmp	r2, r1
    8acc:	d100      	bne.n	8ad0 <__aeabi_dsub+0x518>
    8ace:	e0c1      	b.n	8c54 <__aeabi_dsub+0x69c>
    8ad0:	2780      	movs	r7, #128	; 0x80
    8ad2:	4666      	mov	r6, ip
    8ad4:	0439      	lsls	r1, r7, #16
    8ad6:	430e      	orrs	r6, r1
    8ad8:	46b4      	mov	ip, r6
    8ada:	2b38      	cmp	r3, #56	; 0x38
    8adc:	dd00      	ble.n	8ae0 <__aeabi_dsub+0x528>
    8ade:	e0a2      	b.n	8c26 <__aeabi_dsub+0x66e>
    8ae0:	2b1f      	cmp	r3, #31
    8ae2:	dd00      	ble.n	8ae6 <__aeabi_dsub+0x52e>
    8ae4:	e0d0      	b.n	8c88 <__aeabi_dsub+0x6d0>
    8ae6:	2120      	movs	r1, #32
    8ae8:	1ac9      	subs	r1, r1, r3
    8aea:	1c2e      	adds	r6, r5, #0
    8aec:	4667      	mov	r7, ip
    8aee:	408f      	lsls	r7, r1
    8af0:	408d      	lsls	r5, r1
    8af2:	40de      	lsrs	r6, r3
    8af4:	433e      	orrs	r6, r7
    8af6:	1c29      	adds	r1, r5, #0
    8af8:	4667      	mov	r7, ip
    8afa:	1e4d      	subs	r5, r1, #1
    8afc:	41a9      	sbcs	r1, r5
    8afe:	40df      	lsrs	r7, r3
    8b00:	1c35      	adds	r5, r6, #0
    8b02:	430d      	orrs	r5, r1
    8b04:	1c3e      	adds	r6, r7, #0
    8b06:	4455      	add	r5, sl
    8b08:	4555      	cmp	r5, sl
    8b0a:	419b      	sbcs	r3, r3
    8b0c:	1830      	adds	r0, r6, r0
    8b0e:	425e      	negs	r6, r3
    8b10:	1983      	adds	r3, r0, r6
    8b12:	1c17      	adds	r7, r2, #0
    8b14:	e63a      	b.n	878c <__aeabi_dsub+0x1d4>
    8b16:	4656      	mov	r6, sl
    8b18:	4306      	orrs	r6, r0
    8b1a:	d054      	beq.n	8bc6 <__aeabi_dsub+0x60e>
    8b1c:	4657      	mov	r7, sl
    8b1e:	1bea      	subs	r2, r5, r7
    8b20:	4663      	mov	r3, ip
    8b22:	4295      	cmp	r5, r2
    8b24:	41b6      	sbcs	r6, r6
    8b26:	1a19      	subs	r1, r3, r0
    8b28:	4273      	negs	r3, r6
    8b2a:	1acb      	subs	r3, r1, r3
    8b2c:	021e      	lsls	r6, r3, #8
    8b2e:	d400      	bmi.n	8b32 <__aeabi_dsub+0x57a>
    8b30:	e0a2      	b.n	8c78 <__aeabi_dsub+0x6c0>
    8b32:	1b7d      	subs	r5, r7, r5
    8b34:	4664      	mov	r4, ip
    8b36:	45aa      	cmp	sl, r5
    8b38:	41bf      	sbcs	r7, r7
    8b3a:	1b00      	subs	r0, r0, r4
    8b3c:	427a      	negs	r2, r7
    8b3e:	1a83      	subs	r3, r0, r2
    8b40:	464c      	mov	r4, r9
    8b42:	2101      	movs	r1, #1
    8b44:	2700      	movs	r7, #0
    8b46:	e5c9      	b.n	86dc <__aeabi_dsub+0x124>
    8b48:	4656      	mov	r6, sl
    8b4a:	4306      	orrs	r6, r0
    8b4c:	d03f      	beq.n	8bce <__aeabi_dsub+0x616>
    8b4e:	4662      	mov	r2, ip
    8b50:	2180      	movs	r1, #128	; 0x80
    8b52:	0757      	lsls	r7, r2, #29
    8b54:	08ed      	lsrs	r5, r5, #3
    8b56:	08d3      	lsrs	r3, r2, #3
    8b58:	030a      	lsls	r2, r1, #12
    8b5a:	433d      	orrs	r5, r7
    8b5c:	4213      	tst	r3, r2
    8b5e:	d008      	beq.n	8b72 <__aeabi_dsub+0x5ba>
    8b60:	08c6      	lsrs	r6, r0, #3
    8b62:	4216      	tst	r6, r2
    8b64:	d105      	bne.n	8b72 <__aeabi_dsub+0x5ba>
    8b66:	4655      	mov	r5, sl
    8b68:	08ec      	lsrs	r4, r5, #3
    8b6a:	0745      	lsls	r5, r0, #29
    8b6c:	4325      	orrs	r5, r4
    8b6e:	1c33      	adds	r3, r6, #0
    8b70:	464c      	mov	r4, r9
    8b72:	0f68      	lsrs	r0, r5, #29
    8b74:	00db      	lsls	r3, r3, #3
    8b76:	2680      	movs	r6, #128	; 0x80
    8b78:	4303      	orrs	r3, r0
    8b7a:	00ed      	lsls	r5, r5, #3
    8b7c:	0131      	lsls	r1, r6, #4
    8b7e:	4f3b      	ldr	r7, [pc, #236]	; (8c6c <__aeabi_dsub+0x6b4>)
    8b80:	e5ac      	b.n	86dc <__aeabi_dsub+0x124>
    8b82:	493a      	ldr	r1, [pc, #232]	; (8c6c <__aeabi_dsub+0x6b4>)
    8b84:	428a      	cmp	r2, r1
    8b86:	d000      	beq.n	8b8a <__aeabi_dsub+0x5d2>
    8b88:	e6e4      	b.n	8954 <__aeabi_dsub+0x39c>
    8b8a:	2680      	movs	r6, #128	; 0x80
    8b8c:	1c03      	adds	r3, r0, #0
    8b8e:	4655      	mov	r5, sl
    8b90:	464c      	mov	r4, r9
    8b92:	0131      	lsls	r1, r6, #4
    8b94:	1c17      	adds	r7, r2, #0
    8b96:	e5a1      	b.n	86dc <__aeabi_dsub+0x124>
    8b98:	2f00      	cmp	r7, #0
    8b9a:	d04c      	beq.n	8c36 <__aeabi_dsub+0x67e>
    8b9c:	4653      	mov	r3, sl
    8b9e:	4303      	orrs	r3, r0
    8ba0:	d015      	beq.n	8bce <__aeabi_dsub+0x616>
    8ba2:	4662      	mov	r2, ip
    8ba4:	2680      	movs	r6, #128	; 0x80
    8ba6:	08ed      	lsrs	r5, r5, #3
    8ba8:	0751      	lsls	r1, r2, #29
    8baa:	08d3      	lsrs	r3, r2, #3
    8bac:	0337      	lsls	r7, r6, #12
    8bae:	430d      	orrs	r5, r1
    8bb0:	423b      	tst	r3, r7
    8bb2:	d0de      	beq.n	8b72 <__aeabi_dsub+0x5ba>
    8bb4:	08c2      	lsrs	r2, r0, #3
    8bb6:	423a      	tst	r2, r7
    8bb8:	d1db      	bne.n	8b72 <__aeabi_dsub+0x5ba>
    8bba:	4655      	mov	r5, sl
    8bbc:	08e9      	lsrs	r1, r5, #3
    8bbe:	0745      	lsls	r5, r0, #29
    8bc0:	1c13      	adds	r3, r2, #0
    8bc2:	430d      	orrs	r5, r1
    8bc4:	e7d5      	b.n	8b72 <__aeabi_dsub+0x5ba>
    8bc6:	4663      	mov	r3, ip
    8bc8:	2101      	movs	r1, #1
    8bca:	2700      	movs	r7, #0
    8bcc:	e586      	b.n	86dc <__aeabi_dsub+0x124>
    8bce:	2780      	movs	r7, #128	; 0x80
    8bd0:	0139      	lsls	r1, r7, #4
    8bd2:	4663      	mov	r3, ip
    8bd4:	4f25      	ldr	r7, [pc, #148]	; (8c6c <__aeabi_dsub+0x6b4>)
    8bd6:	e581      	b.n	86dc <__aeabi_dsub+0x124>
    8bd8:	2200      	movs	r2, #0
    8bda:	e73a      	b.n	8a52 <__aeabi_dsub+0x49a>
    8bdc:	1c3c      	adds	r4, r7, #0
    8bde:	3c20      	subs	r4, #32
    8be0:	4666      	mov	r6, ip
    8be2:	40e6      	lsrs	r6, r4
    8be4:	1c33      	adds	r3, r6, #0
    8be6:	2f20      	cmp	r7, #32
    8be8:	d05f      	beq.n	8caa <__aeabi_dsub+0x6f2>
    8bea:	2440      	movs	r4, #64	; 0x40
    8bec:	1be7      	subs	r7, r4, r7
    8bee:	4666      	mov	r6, ip
    8bf0:	40be      	lsls	r6, r7
    8bf2:	1c31      	adds	r1, r6, #0
    8bf4:	430d      	orrs	r5, r1
    8bf6:	1e69      	subs	r1, r5, #1
    8bf8:	418d      	sbcs	r5, r1
    8bfa:	431d      	orrs	r5, r3
    8bfc:	2300      	movs	r3, #0
    8bfe:	e6bc      	b.n	897a <__aeabi_dsub+0x3c2>
    8c00:	3b01      	subs	r3, #1
    8c02:	2b00      	cmp	r3, #0
    8c04:	d122      	bne.n	8c4c <__aeabi_dsub+0x694>
    8c06:	4455      	add	r5, sl
    8c08:	4555      	cmp	r5, sl
    8c0a:	41bf      	sbcs	r7, r7
    8c0c:	427b      	negs	r3, r7
    8c0e:	4460      	add	r0, ip
    8c10:	18c3      	adds	r3, r0, r3
    8c12:	1c17      	adds	r7, r2, #0
    8c14:	e5ba      	b.n	878c <__aeabi_dsub+0x1d4>
    8c16:	2180      	movs	r1, #128	; 0x80
    8c18:	2204      	movs	r2, #4
    8c1a:	2400      	movs	r4, #0
    8c1c:	0109      	lsls	r1, r1, #4
    8c1e:	4b15      	ldr	r3, [pc, #84]	; (8c74 <__aeabi_dsub+0x6bc>)
    8c20:	4256      	negs	r6, r2
    8c22:	4f12      	ldr	r7, [pc, #72]	; (8c6c <__aeabi_dsub+0x6b4>)
    8c24:	e573      	b.n	870e <__aeabi_dsub+0x156>
    8c26:	4663      	mov	r3, ip
    8c28:	431d      	orrs	r5, r3
    8c2a:	2600      	movs	r6, #0
    8c2c:	2d00      	cmp	r5, #0
    8c2e:	d100      	bne.n	8c32 <__aeabi_dsub+0x67a>
    8c30:	e769      	b.n	8b06 <__aeabi_dsub+0x54e>
    8c32:	2501      	movs	r5, #1
    8c34:	e767      	b.n	8b06 <__aeabi_dsub+0x54e>
    8c36:	2280      	movs	r2, #128	; 0x80
    8c38:	1c03      	adds	r3, r0, #0
    8c3a:	4655      	mov	r5, sl
    8c3c:	0111      	lsls	r1, r2, #4
    8c3e:	4f0b      	ldr	r7, [pc, #44]	; (8c6c <__aeabi_dsub+0x6b4>)
    8c40:	e54c      	b.n	86dc <__aeabi_dsub+0x124>
    8c42:	1c03      	adds	r3, r0, #0
    8c44:	4655      	mov	r5, sl
    8c46:	2101      	movs	r1, #1
    8c48:	2700      	movs	r7, #0
    8c4a:	e547      	b.n	86dc <__aeabi_dsub+0x124>
    8c4c:	4907      	ldr	r1, [pc, #28]	; (8c6c <__aeabi_dsub+0x6b4>)
    8c4e:	428a      	cmp	r2, r1
    8c50:	d000      	beq.n	8c54 <__aeabi_dsub+0x69c>
    8c52:	e742      	b.n	8ada <__aeabi_dsub+0x522>
    8c54:	2180      	movs	r1, #128	; 0x80
    8c56:	1c03      	adds	r3, r0, #0
    8c58:	4655      	mov	r5, sl
    8c5a:	0109      	lsls	r1, r1, #4
    8c5c:	1c17      	adds	r7, r2, #0
    8c5e:	e53d      	b.n	86dc <__aeabi_dsub+0x124>
    8c60:	057f      	lsls	r7, r7, #21
    8c62:	0d7f      	lsrs	r7, r7, #21
    8c64:	2600      	movs	r6, #0
    8c66:	2200      	movs	r2, #0
    8c68:	e55e      	b.n	8728 <__aeabi_dsub+0x170>
    8c6a:	46c0      	nop			; (mov r8, r8)
    8c6c:	000007ff 	.word	0x000007ff
    8c70:	ff7fffff 	.word	0xff7fffff
    8c74:	007fffff 	.word	0x007fffff
    8c78:	1c1d      	adds	r5, r3, #0
    8c7a:	4315      	orrs	r5, r2
    8c7c:	d100      	bne.n	8c80 <__aeabi_dsub+0x6c8>
    8c7e:	e689      	b.n	8994 <__aeabi_dsub+0x3dc>
    8c80:	1c15      	adds	r5, r2, #0
    8c82:	2101      	movs	r1, #1
    8c84:	2700      	movs	r7, #0
    8c86:	e529      	b.n	86dc <__aeabi_dsub+0x124>
    8c88:	1c1f      	adds	r7, r3, #0
    8c8a:	3f20      	subs	r7, #32
    8c8c:	4661      	mov	r1, ip
    8c8e:	40f9      	lsrs	r1, r7
    8c90:	2b20      	cmp	r3, #32
    8c92:	d010      	beq.n	8cb6 <__aeabi_dsub+0x6fe>
    8c94:	2640      	movs	r6, #64	; 0x40
    8c96:	1af3      	subs	r3, r6, r3
    8c98:	4667      	mov	r7, ip
    8c9a:	409f      	lsls	r7, r3
    8c9c:	1c3b      	adds	r3, r7, #0
    8c9e:	431d      	orrs	r5, r3
    8ca0:	1e6b      	subs	r3, r5, #1
    8ca2:	419d      	sbcs	r5, r3
    8ca4:	430d      	orrs	r5, r1
    8ca6:	2600      	movs	r6, #0
    8ca8:	e72d      	b.n	8b06 <__aeabi_dsub+0x54e>
    8caa:	2100      	movs	r1, #0
    8cac:	e7a2      	b.n	8bf4 <__aeabi_dsub+0x63c>
    8cae:	1c3d      	adds	r5, r7, #0
    8cb0:	2101      	movs	r1, #1
    8cb2:	2700      	movs	r7, #0
    8cb4:	e512      	b.n	86dc <__aeabi_dsub+0x124>
    8cb6:	2300      	movs	r3, #0
    8cb8:	e7f1      	b.n	8c9e <__aeabi_dsub+0x6e6>
    8cba:	46c0      	nop			; (mov r8, r8)

00008cbc <__aeabi_d2iz>:
    8cbc:	4a13      	ldr	r2, [pc, #76]	; (8d0c <__aeabi_d2iz+0x50>)
    8cbe:	030b      	lsls	r3, r1, #12
    8cc0:	b530      	push	{r4, r5, lr}
    8cc2:	1c05      	adds	r5, r0, #0
    8cc4:	0048      	lsls	r0, r1, #1
    8cc6:	0b1c      	lsrs	r4, r3, #12
    8cc8:	0fc9      	lsrs	r1, r1, #31
    8cca:	0d43      	lsrs	r3, r0, #21
    8ccc:	2000      	movs	r0, #0
    8cce:	4293      	cmp	r3, r2
    8cd0:	dd11      	ble.n	8cf6 <__aeabi_d2iz+0x3a>
    8cd2:	480f      	ldr	r0, [pc, #60]	; (8d10 <__aeabi_d2iz+0x54>)
    8cd4:	4283      	cmp	r3, r0
    8cd6:	dc0f      	bgt.n	8cf8 <__aeabi_d2iz+0x3c>
    8cd8:	2280      	movs	r2, #128	; 0x80
    8cda:	0350      	lsls	r0, r2, #13
    8cdc:	4a0d      	ldr	r2, [pc, #52]	; (8d14 <__aeabi_d2iz+0x58>)
    8cde:	4304      	orrs	r4, r0
    8ce0:	1ad0      	subs	r0, r2, r3
    8ce2:	281f      	cmp	r0, #31
    8ce4:	dd0b      	ble.n	8cfe <__aeabi_d2iz+0x42>
    8ce6:	4d0c      	ldr	r5, [pc, #48]	; (8d18 <__aeabi_d2iz+0x5c>)
    8ce8:	1aeb      	subs	r3, r5, r3
    8cea:	40dc      	lsrs	r4, r3
    8cec:	1c22      	adds	r2, r4, #0
    8cee:	4250      	negs	r0, r2
    8cf0:	2900      	cmp	r1, #0
    8cf2:	d100      	bne.n	8cf6 <__aeabi_d2iz+0x3a>
    8cf4:	1c10      	adds	r0, r2, #0
    8cf6:	bd30      	pop	{r4, r5, pc}
    8cf8:	4c08      	ldr	r4, [pc, #32]	; (8d1c <__aeabi_d2iz+0x60>)
    8cfa:	1908      	adds	r0, r1, r4
    8cfc:	e7fb      	b.n	8cf6 <__aeabi_d2iz+0x3a>
    8cfe:	40c5      	lsrs	r5, r0
    8d00:	4807      	ldr	r0, [pc, #28]	; (8d20 <__aeabi_d2iz+0x64>)
    8d02:	1c2a      	adds	r2, r5, #0
    8d04:	181d      	adds	r5, r3, r0
    8d06:	40ac      	lsls	r4, r5
    8d08:	4322      	orrs	r2, r4
    8d0a:	e7f0      	b.n	8cee <__aeabi_d2iz+0x32>
    8d0c:	000003fe 	.word	0x000003fe
    8d10:	0000041d 	.word	0x0000041d
    8d14:	00000433 	.word	0x00000433
    8d18:	00000413 	.word	0x00000413
    8d1c:	7fffffff 	.word	0x7fffffff
    8d20:	fffffbed 	.word	0xfffffbed

00008d24 <__aeabi_i2d>:
    8d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d26:	1e04      	subs	r4, r0, #0
    8d28:	d02d      	beq.n	8d86 <__aeabi_i2d+0x62>
    8d2a:	0fc5      	lsrs	r5, r0, #31
    8d2c:	d000      	beq.n	8d30 <__aeabi_i2d+0xc>
    8d2e:	4244      	negs	r4, r0
    8d30:	1c20      	adds	r0, r4, #0
    8d32:	f7fa fc69 	bl	3608 <__clzsi2>
    8d36:	4916      	ldr	r1, [pc, #88]	; (8d90 <__aeabi_i2d+0x6c>)
    8d38:	1a0a      	subs	r2, r1, r0
    8d3a:	280a      	cmp	r0, #10
    8d3c:	dd16      	ble.n	8d6c <__aeabi_i2d+0x48>
    8d3e:	380b      	subs	r0, #11
    8d40:	4084      	lsls	r4, r0
    8d42:	0557      	lsls	r7, r2, #21
    8d44:	0326      	lsls	r6, r4, #12
    8d46:	0d7a      	lsrs	r2, r7, #21
    8d48:	0b36      	lsrs	r6, r6, #12
    8d4a:	2700      	movs	r7, #0
    8d4c:	2000      	movs	r0, #0
    8d4e:	2100      	movs	r1, #0
    8d50:	1c38      	adds	r0, r7, #0
    8d52:	0d0f      	lsrs	r7, r1, #20
    8d54:	053b      	lsls	r3, r7, #20
    8d56:	4c0f      	ldr	r4, [pc, #60]	; (8d94 <__aeabi_i2d+0x70>)
    8d58:	4333      	orrs	r3, r6
    8d5a:	401c      	ands	r4, r3
    8d5c:	0516      	lsls	r6, r2, #20
    8d5e:	4334      	orrs	r4, r6
    8d60:	0061      	lsls	r1, r4, #1
    8d62:	084a      	lsrs	r2, r1, #1
    8d64:	07ed      	lsls	r5, r5, #31
    8d66:	1c11      	adds	r1, r2, #0
    8d68:	4329      	orrs	r1, r5
    8d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8d6c:	260b      	movs	r6, #11
    8d6e:	1c01      	adds	r1, r0, #0
    8d70:	1a30      	subs	r0, r6, r0
    8d72:	3115      	adds	r1, #21
    8d74:	1c23      	adds	r3, r4, #0
    8d76:	40c4      	lsrs	r4, r0
    8d78:	408b      	lsls	r3, r1
    8d7a:	0552      	lsls	r2, r2, #21
    8d7c:	0321      	lsls	r1, r4, #12
    8d7e:	1c1f      	adds	r7, r3, #0
    8d80:	0b0e      	lsrs	r6, r1, #12
    8d82:	0d52      	lsrs	r2, r2, #21
    8d84:	e7e2      	b.n	8d4c <__aeabi_i2d+0x28>
    8d86:	2500      	movs	r5, #0
    8d88:	2200      	movs	r2, #0
    8d8a:	2600      	movs	r6, #0
    8d8c:	2700      	movs	r7, #0
    8d8e:	e7dd      	b.n	8d4c <__aeabi_i2d+0x28>
    8d90:	0000041e 	.word	0x0000041e
    8d94:	800fffff 	.word	0x800fffff

00008d98 <__aeabi_ui2d>:
    8d98:	b570      	push	{r4, r5, r6, lr}
    8d9a:	1e04      	subs	r4, r0, #0
    8d9c:	d026      	beq.n	8dec <__aeabi_ui2d+0x54>
    8d9e:	f7fa fc33 	bl	3608 <__clzsi2>
    8da2:	4914      	ldr	r1, [pc, #80]	; (8df4 <__aeabi_ui2d+0x5c>)
    8da4:	1a0a      	subs	r2, r1, r0
    8da6:	280a      	cmp	r0, #10
    8da8:	dd13      	ble.n	8dd2 <__aeabi_ui2d+0x3a>
    8daa:	380b      	subs	r0, #11
    8dac:	4084      	lsls	r4, r0
    8dae:	0556      	lsls	r6, r2, #21
    8db0:	0324      	lsls	r4, r4, #12
    8db2:	0d72      	lsrs	r2, r6, #21
    8db4:	0b25      	lsrs	r5, r4, #12
    8db6:	2600      	movs	r6, #0
    8db8:	2000      	movs	r0, #0
    8dba:	2100      	movs	r1, #0
    8dbc:	1c30      	adds	r0, r6, #0
    8dbe:	0d0e      	lsrs	r6, r1, #20
    8dc0:	0533      	lsls	r3, r6, #20
    8dc2:	4c0d      	ldr	r4, [pc, #52]	; (8df8 <__aeabi_ui2d+0x60>)
    8dc4:	432b      	orrs	r3, r5
    8dc6:	0511      	lsls	r1, r2, #20
    8dc8:	401c      	ands	r4, r3
    8dca:	430c      	orrs	r4, r1
    8dcc:	0065      	lsls	r5, r4, #1
    8dce:	0869      	lsrs	r1, r5, #1
    8dd0:	bd70      	pop	{r4, r5, r6, pc}
    8dd2:	230b      	movs	r3, #11
    8dd4:	1c05      	adds	r5, r0, #0
    8dd6:	1a18      	subs	r0, r3, r0
    8dd8:	3515      	adds	r5, #21
    8dda:	1c21      	adds	r1, r4, #0
    8ddc:	40c4      	lsrs	r4, r0
    8dde:	40a9      	lsls	r1, r5
    8de0:	0552      	lsls	r2, r2, #21
    8de2:	0325      	lsls	r5, r4, #12
    8de4:	1c0e      	adds	r6, r1, #0
    8de6:	0b2d      	lsrs	r5, r5, #12
    8de8:	0d52      	lsrs	r2, r2, #21
    8dea:	e7e5      	b.n	8db8 <__aeabi_ui2d+0x20>
    8dec:	2200      	movs	r2, #0
    8dee:	2500      	movs	r5, #0
    8df0:	2600      	movs	r6, #0
    8df2:	e7e1      	b.n	8db8 <__aeabi_ui2d+0x20>
    8df4:	0000041e 	.word	0x0000041e
    8df8:	800fffff 	.word	0x800fffff

00008dfc <sysfont_glyphs>:
	...
    8e20:	00300000 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
    8e30:	00300000 00000030 00000000 00000000     ..0.0...........
    8e40:	006c0000 006c006c 0000006c 00000000     ..l.l.l.l.......
	...
    8e64:	00480048 004800fc 00480048 004800fc     H.H...H.H.H...H.
    8e74:	00000048 00000000 00000000 00100000     H...............
    8e84:	003c0010 00300040 00040008 00100078     ..<.@.0.....x...
    8e94:	00000010 00000000 00000000 00000000     ................
    8ea4:	00a4007c 004800a8 00140010 004a002a     |.....H.....*.J.
    8eb4:	00000044 00000000 00000000 00700000     D.............p.
    8ec4:	00880088 00700088 008a0088 008c008a     ......p.........
    8ed4:	00000070 00000000 00000000 00100000     p...............
    8ee4:	00100010 00000000 00000000 00000000     ................
	...
    8f00:	00100008 00200010 00200020 00200020     ...... . . . . .
    8f10:	00100020 00080010 00000000 00000000      ...............
    8f20:	00100020 00080010 00080008 00080008      ...............
    8f30:	00100008 00200010 00000000 00000000     ...... .........
    8f40:	00280000 007c0010 00280010 00000000     ..(...|...(.....
	...
    8f68:	00100010 00fe0010 00100010 00000010     ................
	...
    8f90:	00180000 00300018 00000020 00000000     ......0. .......
	...
    8fac:	00fe0000 00000000 00000000 00000000     ................
	...
    8fd0:	00180000 00000018 00000000 00000000     ................
    8fe0:	00000000 00080004 00100008 00200010     .............. .
    8ff0:	00400020 00000040 00000000 00000000      .@.@...........
    9000:	00780000 00840084 0094008c 00c400a4     ..x.............
    9010:	00840084 00000078 00000000 00000000     ....x...........
    9020:	00100000 00500030 00100010 00100010     ....0.P.........
    9030:	00100010 0000007c 00000000 00000000     ....|...........
    9040:	00700000 00080088 00100008 00200010     ..p........... .
    9050:	00400020 000000fc 00000000 00000000      .@.............
    9060:	00700000 00080088 00300008 00080008     ..p.......0.....
    9070:	00880008 00000070 00000000 00000000     ....p...........
    9080:	00080000 00280018 00480028 00880088     ......(.(.H.....
    9090:	000800fc 00000008 00000000 00000000     ................
    90a0:	007c0000 00800080 00c400b8 00040004     ..|.............
    90b0:	00840004 00000078 00000000 00000000     ....x...........
    90c0:	00380000 00800040 00b00080 008400c8     ..8.@...........
    90d0:	00480084 00000030 00000000 00000000     ..H.0...........
    90e0:	00fc0000 00040004 00080008 00100010     ................
    90f0:	00200020 00000040 00000000 00000000      . .@...........
    9100:	00780000 00840084 00780084 00840084     ..x.......x.....
    9110:	00840084 00000078 00000000 00000000     ....x...........
    9120:	00780000 00840084 008c0084 00040074     ..x.........t...
    9130:	00100008 000000e0 00000000 00000000     ................
	...
    9148:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
    9168:	00600000 00000060 00600000 00c00060     ..`.`.....`.`...
    9178:	00000080 00000000 00000000 00000000     ................
    9188:	00180004 00800060 00180060 00000004     ....`...`.......
	...
    91a8:	007e0000 00000000 0000007e 00000000     ..~.....~.......
	...
    91c8:	00300040 0002000c 0030000c 00000040     @.0.......0.@...
	...
    91e0:	00700000 00080088 00100008 00200020     ..p......... . .
    91f0:	00200000 00000020 00000000 00000000     .. . ...........
    9200:	00000000 003c0000 00ba0042 00aa00aa     ......<.B.......
    9210:	00bc00aa 003c0040 00000000 00000000     ....@.<.........
    9220:	00100000 00280010 00280028 007c0044     ......(.(.(.D.|.
    9230:	00820044 00000082 00000000 00000000     D...............
    9240:	00f00000 00880088 00f00088 00880088     ................
    9250:	00880088 000000f0 00000000 00000000     ................
    9260:	00380000 00800044 00800080 00800080     ..8.D...........
    9270:	00440080 00000038 00000000 00000000     ..D.8...........
    9280:	00f00000 00840088 00840084 00840084     ................
    9290:	00880084 000000f0 00000000 00000000     ................
    92a0:	007c0000 00400040 00780040 00400040     ..|.@.@.@.x.@.@.
    92b0:	00400040 0000007c 00000000 00000000     @.@.|...........
    92c0:	007c0000 00400040 00400040 00400078     ..|.@.@.@.@.x.@.
    92d0:	00400040 00000040 00000000 00000000     @.@.@...........
    92e0:	00380000 00800044 00800080 0084009c     ..8.D...........
    92f0:	00440084 0000003c 00000000 00000000     ..D.<...........
    9300:	00840000 00840084 00fc0084 00840084     ................
    9310:	00840084 00000084 00000000 00000000     ................
    9320:	007c0000 00100010 00100010 00100010     ..|.............
    9330:	00100010 0000007c 00000000 00000000     ....|...........
    9340:	00f80000 00080008 00080008 00080008     ................
    9350:	00100008 000000e0 00000000 00000000     ................
    9360:	00840000 00880084 00a00090 008800d0     ................
    9370:	00840088 00000084 00000000 00000000     ................
    9380:	00800000 00800080 00800080 00800080     ................
    9390:	00800080 000000fc 00000000 00000000     ................
    93a0:	00840000 00cc0084 00b400cc 008400b4     ................
    93b0:	00840084 00000084 00000000 00000000     ................
    93c0:	00840000 00c400c4 00a400a4 00940094     ................
    93d0:	008c008c 00000084 00000000 00000000     ................
    93e0:	00300000 00840048 00840084 00840084     ..0.H...........
    93f0:	00480084 00000030 00000000 00000000     ..H.0...........
    9400:	00f00000 00840088 00840084 00f00088     ................
    9410:	00800080 00000080 00000000 00000000     ................
    9420:	00300000 00840048 00840084 00840084     ..0.H...........
    9430:	00480084 00200030 0000001c 00000000     ..H.0. .........
    9440:	00f00000 00840088 00880084 009000f0     ................
    9450:	00840088 00000084 00000000 00000000     ................
    9460:	00780000 00800084 00300040 00040008     ..x.....@.0.....
    9470:	00840004 00000078 00000000 00000000     ....x...........
    9480:	00fe0000 00100010 00100010 00100010     ................
    9490:	00100010 00000010 00000000 00000000     ................
    94a0:	00840000 00840084 00840084 00840084     ................
    94b0:	00840084 00000078 00000000 00000000     ....x...........
    94c0:	00820000 00440082 00440044 00280044     ......D.D.D.D.(.
    94d0:	00280028 00000010 00000000 00000000     (.(.............
    94e0:	00840000 00840084 00b40084 00b400b4     ................
    94f0:	00480078 00000048 00000000 00000000     x.H.H...........
    9500:	00820000 00440044 00100028 00280010     ....D.D.(.....(.
    9510:	00440044 00000082 00000000 00000000     D.D.............
    9520:	00820000 00440044 00280028 00100028     ....D.D.(.(.(...
    9530:	00100010 00000010 00000000 00000000     ................
    9540:	00fc0000 00080004 00100008 00200010     .............. .
    9550:	00400040 000000fe 00000000 00000000     @.@.............
    9560:	008000e0 00800080 00800080 00800080     ................
    9570:	00800080 00e00080 00000000 00000000     ................
    9580:	00400000 00200040 00100020 00080010     ..@.@. . .......
    9590:	00040008 00000004 00000000 00000000     ................
    95a0:	002000e0 00200020 00200020 00200020     .. . . . . . . .
    95b0:	00200020 00e00020 00000000 00000000      . . ...........
    95c0:	00100000 00440028 00000000 00000000     ....(.D.........
	...
    95f4:	0000007c 00000000 00000000 00200000     |............. .
    9604:	00080010 00000000 00000000 00000000     ................
	...
    9628:	00040078 007c0004 008c0084 00000076     x.....|.....v...
	...
    9640:	00800080 00800080 00c400b8 00840084     ................
    9650:	00880084 000000f0 00000000 00000000     ................
	...
    9668:	0080007c 00800080 00800080 0000007c     |...........|...
	...
    9680:	00020002 00020002 0042003e 00820082     ........>.B.....
    9690:	00420082 0000003e 00000000 00000000     ..B.>...........
	...
    96a8:	0082007c 00fe0082 00800080 0000007e     |...........~...
	...
    96c0:	001c0000 00200020 002000fc 00200020     .... . ... . . .
    96d0:	00200020 000000fc 00000000 00000000      . .............
	...
    96e8:	0084007c 00840084 008c0084 00040074     |...........t...
    96f8:	00380044 00000000 00800080 00800080     D.8.............
    9708:	00c400b8 00840084 00840084 00000084     ................
	...
    9720:	00100000 00000000 00100070 00100010     ........p.......
    9730:	00100010 0000007c 00000000 00000000     ....|...........
    9740:	00080000 00000000 00080078 00080008     ........x.......
    9750:	00080008 00080008 00e00010 00000000     ................
    9760:	00800080 00800080 00900088 00e000a0     ................
    9770:	00880090 00000084 00000000 00000000     ................
    9780:	00f00000 00100010 00100010 00100010     ................
    9790:	00100010 000000fe 00000000 00000000     ................
	...
    97a8:	00d400ac 00940094 00940094 00000094     ................
	...
    97c8:	00c400b8 00840084 00840084 00000084     ................
	...
    97e8:	00840078 00840084 00840084 00000078     x...........x...
	...
    9808:	00c400b8 00840084 00840084 008000f8     ................
    9818:	00800080 00000000 00000000 00000000     ................
    9828:	0084007c 00840084 00840084 0004007c     |...........|...
    9838:	00040004 00000000 00000000 00000000     ................
    9848:	003000cc 00200020 00200020 000000f8     ..0. . . . .....
	...
    9868:	0080007c 00780080 00040004 000000f8     |.....x.........
	...
    9884:	00200000 002000fc 00200020 00200020     .. ... . . . . .
    9894:	0000001c 00000000 00000000 00000000     ................
    98a4:	00000000 00880088 00880088 00880088     ................
    98b4:	00000074 00000000 00000000 00000000     t...............
    98c4:	00000000 00440082 00280044 00100028     ......D.D.(.(...
    98d4:	00000010 00000000 00000000 00000000     ................
    98e4:	00000000 00840084 00b400b4 00480048     ............H.H.
    98f4:	00000048 00000000 00000000 00000000     H...............
    9904:	00000000 00280044 00100028 00440028     ....D.(.(...(.D.
    9914:	00000044 00000000 00000000 00000000     D...............
    9924:	00000000 00440082 00280044 00280028     ......D.D.(.(.(.
    9934:	00100010 00200020 00000000 00000000     .... . .........
    9944:	00000000 000400fc 00100008 00400020     ............ .@.
    9954:	000000fc 00000000 00000000 00100008     ................
    9964:	00080010 00100008 00080010 00100008     ................
    9974:	00080010 00000000 00000000 00100010     ................
    9984:	00100010 00000010 00100000 00100010     ................
    9994:	00100010 00000000 00000000 00100020     ............ ...
    99a4:	00200010 00100020 00200010 00100020     .. . ..... . ...
    99b4:	00200010 00000000 42000800 42000c00     .. ........B...B
    99c4:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    99d4:	0a090807 00000c0b 42002000 42002400     ......... .B.$.B
    99e4:	42002800 42002c00 42003000 42003400     .(.B.,.B.0.B.4.B
    99f4:	42003800 42003c00 14141313 16161515     .8.B.<.B........
    9a04:	02000100 08000400 20001000 80004000     ........... .@..
    9a14:	64323025 3230253a 30253a64 00006432     %02d:%02d:%02d..
    9a24:	52414c41 2020214d 00202020 25203a41     ALARM!     .A: %
    9a34:	3a643230 64323025 3230253a 00000064     02d:%02d:%02d...

00009a44 <tc_interrupt_vectors.10588>:
    9a44:	100f0e0d 14131211 0000226c 000022b6     ........l"..."..
    9a54:	000022b6 00002266 00002266 00002282     ."..f"..f"..."..
    9a64:	00002272 00002288 000023cc 0000241c     r"..."...#...$..
    9a74:	0000241c 000023ac 000023be 000023da     .$...#...#...#..
    9a84:	000023b0 000023e8 00002440 0000245e     .#...#..@$..^$..
    9a94:	0000245e 0000243c 00002450 00002444     ^$..<$..P$..D$..
    9aa4:	0000244c 00002448 0000000f 0000001c     L$..H$..........
    9ab4:	00000002 00000003 0000000f 00000008     ................
    9ac4:	00000002 00000003 00002a01 000029dd     .........*...)..
    9ad4:	000029b9 00002995 74747562 33206e6f     .)...)..button 3
    9ae4:	00000000 74747562 32206e6f 00000000     ....button 2....
    9af4:	74747562 31206e6f 00000000 74747562     button 1....butt
    9b04:	30206e6f 00000000 656d6974 0000000a     on 0....time....

00009b14 <_global_impure_ptr>:
    9b14:	20000020 20200043                                 .. C.

00009b1a <blanks.6720>:
    9b1a:	20202020 20202020 20202020 20202020                     

00009b2a <zeroes.6721>:
    9b2a:	30303030 30303030 30303030 30303030     0000000000000000
    9b3a:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
    9b4a:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    9b5a:	32313000 36353433 61393837 65646362     .0123456789abcde
    9b6a:	00300066 69666e49 7974696e 4e614e00     f.0.Infinity.NaN
    9b7a:	534f5000 2e005849 00000000 00050000              .POSIX........

00009b88 <p05.5242>:
    9b88:	00000005 00000019 0000007d 00000000     ........}.......

00009b98 <__mprec_tens>:
    9b98:	00000000 3ff00000 00000000 40240000     .......?......$@
    9ba8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    9bb8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    9bc8:	00000000 412e8480 00000000 416312d0     .......A......cA
    9bd8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    9be8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    9bf8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    9c08:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    9c18:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    9c28:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    9c38:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    9c48:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    9c58:	79d99db4 44ea7843                       ...yCx.D

00009c60 <__mprec_tinytens>:
    9c60:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
    9c70:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
    9c80:	64ac6f43 0ac80628                       Co.d(...

00009c88 <__mprec_bigtens>:
    9c88:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    9c98:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    9ca8:	7f73bf3c 75154fdd                       <.s..O.u

00009cb0 <blanks.6664>:
    9cb0:	20202020 20202020 20202020 20202020                     

00009cc0 <zeroes.6665>:
    9cc0:	30303030 30303030 30303030 30303030     0000000000000000
    9cd0:	000079f4 00007bc0 00007cb4 00007c50     .y...{...|..P|..
    9ce0:	00007cb4 00007c2a 00007cb4 00007c50     .|..*|...|..P|..
    9cf0:	00007bc0 00007bc0 00007c2a 00007c50     .{...{..*|..P|..
    9d00:	00007cd6 00007cd6 00007cd6 00007cbc     .|...|...|...|..
    9d10:	00008204 00008460 00008460 00008434     ....`...`...4...
    9d20:	000083ac 000083ac 00008454 00008434     ........T...4...
    9d30:	000083ac 00008454 000083ac 00008434     ....T.......4...
    9d40:	0000844c 0000844c 0000844c 00008464     L...L...L...d...

00009d50 <_init>:
    9d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d52:	46c0      	nop			; (mov r8, r8)
    9d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9d56:	bc08      	pop	{r3}
    9d58:	469e      	mov	lr, r3
    9d5a:	4770      	bx	lr

00009d5c <__init_array_start>:
    9d5c:	00004771 	.word	0x00004771

00009d60 <__frame_dummy_init_array_entry>:
    9d60:	00000125                                %...

00009d64 <_fini>:
    9d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d66:	46c0      	nop			; (mov r8, r8)
    9d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9d6a:	bc08      	pop	{r3}
    9d6c:	469e      	mov	lr, r3
    9d6e:	4770      	bx	lr

00009d70 <__fini_array_start>:
    9d70:	000000f9 	.word	0x000000f9
